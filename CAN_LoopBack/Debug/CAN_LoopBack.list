
CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003628  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080037f8  080037f8  000047f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800387c  0800387c  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  0800387c  0800387c  0000487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003884  08003884  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003884  08003884  00004884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800388c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000005c  080038e8  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  080038e8  00005238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ad6  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001827  00000000  00000000  0000eb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00010390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005fa  00000000  00000000  00010b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002158e  00000000  00000000  00011162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a635  00000000  00000000  000326f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cada8  00000000  00000000  0003cd25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107acd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b8  00000000  00000000  00107b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00109fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080037e0 	.word	0x080037e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080037e0 	.word	0x080037e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <SysTick_Handler>:
 *      Author: User
 */
#include "it.h"

void SysTick_Handler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005b4:	f000 fb3a 	bl	8000c2c <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005b8:	f001 f8e4 	bl	8001784 <HAL_SYSTICK_IRQHandler>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <main>:
UART_HandleTypeDef huart2;

CAN_HandleTypeDef hcan1;

int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	HAL_Init();
 80005c4:	f000 fae0 	bl	8000b88 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 80005c8:	2032      	movs	r0, #50	@ 0x32
 80005ca:	f000 f819 	bl	8000600 <SystemClock_Config_HSE>

	Gpio_Init();
 80005ce:	f000 f8a9 	bl	8000724 <Gpio_Init>

	UART2_Init();
 80005d2:	f000 f8cb 	bl	800076c <UART2_Init>

	CAN1_Init();
 80005d6:	f000 f8ef 	bl	80007b8 <CAN1_Init>

	CAN_Filter_Config();
 80005da:	f000 f9a3 	bl	8000924 <CAN_Filter_Config>

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80005de:	4807      	ldr	r0, [pc, #28]	@ (80005fc <main+0x3c>)
 80005e0:	f000 fd20 	bl	8001024 <HAL_CAN_Start>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x2e>
	{
		Error_handler();
 80005ea:	f000 f9c1 	bl	8000970 <Error_handler>
	}

	CAN1_Tx();
 80005ee:	f000 f919 	bl	8000824 <CAN1_Tx>

	CAN1_Rx();
 80005f2:	f000 f961 	bl	80008b8 <CAN1_Rx>

	while(1);
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x36>
 80005fa:	bf00      	nop
 80005fc:	200000c0 	.word	0x200000c0

08000600 <SystemClock_Config_HSE>:

	return 0;
}

void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b096      	sub	sp, #88	@ 0x58
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;

	RCC_ClkInitTypeDef clk_init;

	uint32_t Flatency = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	657b      	str	r3, [r7, #84]	@ 0x54


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 800060e:	2305      	movs	r3, #5
 8000610:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_ON;
 8000612:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
	osc_init.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
	//osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000620:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000624:	63fb      	str	r3, [r7, #60]	@ 0x3c


	switch(clock_freq)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b78      	cmp	r3, #120	@ 0x78
 800062a:	d038      	beq.n	800069e <SystemClock_Config_HSE+0x9e>
 800062c:	2b78      	cmp	r3, #120	@ 0x78
 800062e:	dc72      	bgt.n	8000716 <SystemClock_Config_HSE+0x116>
 8000630:	2b32      	cmp	r3, #50	@ 0x32
 8000632:	d002      	beq.n	800063a <SystemClock_Config_HSE+0x3a>
 8000634:	2b54      	cmp	r3, #84	@ 0x54
 8000636:	d019      	beq.n	800066c <SystemClock_Config_HSE+0x6c>

			break;
		}

		default:
			return;
 8000638:	e06d      	b.n	8000716 <SystemClock_Config_HSE+0x116>
			osc_init.PLL.PLLM = 16;
 800063a:	2310      	movs	r3, #16
 800063c:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 100;
 800063e:	2364      	movs	r3, #100	@ 0x64
 8000640:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8000646:	2302      	movs	r3, #2
 8000648:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 800064a:	2302      	movs	r3, #2
 800064c:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800064e:	230f      	movs	r3, #15
 8000650:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2302      	movs	r3, #2
 8000654:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065e:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000664:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_1WS;
 8000666:	2301      	movs	r3, #1
 8000668:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 800066a:	e031      	b.n	80006d0 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 168;
 8000670:	23a8      	movs	r3, #168	@ 0xa8
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_2WS;
 8000698:	2302      	movs	r3, #2
 800069a:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 800069c:	e018      	b.n	80006d0 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 16;
 800069e:	2310      	movs	r3, #16
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 240;
 80006a2:	23f0      	movs	r3, #240	@ 0xf0
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 80006b2:	230f      	movs	r3, #15
 80006b4:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b6:	2302      	movs	r3, #2
 80006b8:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80006be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006c2:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c8:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_3WS;
 80006ca:	2303      	movs	r3, #3
 80006cc:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 80006ce:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fd41 	bl	800215c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config_HSE+0xe4>
	{
		Error_handler();
 80006e0:	f000 f946 	bl	8000970 <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, Flatency) != HAL_OK)
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9ec 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config_HSE+0xfa>
	{
		Error_handler();
 80006f6:	f000 f93b 	bl	8000970 <Error_handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80006fa:	f001 facb 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a07      	ldr	r2, [pc, #28]	@ (8000720 <SystemClock_Config_HSE+0x120>)
 8000702:	fba2 2303 	umull	r2, r3, r2, r3
 8000706:	099b      	lsrs	r3, r3, #6
 8000708:	4618      	mov	r0, r3
 800070a:	f001 f812 	bl	8001732 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800070e:	2004      	movs	r0, #4
 8000710:	f001 f81c 	bl	800174c <HAL_SYSTICK_CLKSourceConfig>
 8000714:	e000      	b.n	8000718 <SystemClock_Config_HSE+0x118>
			return;
 8000716:	bf00      	nop
}
 8000718:	3758      	adds	r7, #88	@ 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	10624dd3 	.word	0x10624dd3

08000724 <Gpio_Init>:

void Gpio_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioLed;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <Gpio_Init+0x40>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a0c      	ldr	r2, [pc, #48]	@ (8000764 <Gpio_Init+0x40>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <Gpio_Init+0x40>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]

	gpioLed.Pin = GPIO_PIN_5;
 8000746:	2320      	movs	r3, #32
 8000748:	607b      	str	r3, [r7, #4]
	gpioLed.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	60bb      	str	r3, [r7, #8]
	gpioLed.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &gpioLed);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	@ (8000768 <Gpio_Init+0x44>)
 8000758:	f001 f822 	bl	80017a0 <HAL_GPIO_Init>
}
 800075c:	bf00      	nop
 800075e:	3718      	adds	r7, #24
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000

0800076c <UART2_Init>:


void UART2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <UART2_Init+0x44>)
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <UART2_Init+0x48>)
 8000774:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <UART2_Init+0x44>)
 8000778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800077c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <UART2_Init+0x44>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <UART2_Init+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <UART2_Init+0x44>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <UART2_Init+0x44>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <UART2_Init+0x44>)
 8000798:	220c      	movs	r2, #12
 800079a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <UART2_Init+0x44>)
 800079e:	f001 ff7b 	bl	8002698 <HAL_UART_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <UART2_Init+0x40>
	{
		//there is a problem
		Error_handler();
 80007a8:	f000 f8e2 	bl	8000970 <Error_handler>
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000078 	.word	0x20000078
 80007b4:	40004400 	.word	0x40004400

080007b8 <CAN1_Init>:

void CAN1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	hcan1.Instance = CAN1;
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <CAN1_Init+0x64>)
 80007be:	4a18      	ldr	r2, [pc, #96]	@ (8000820 <CAN1_Init+0x68>)
 80007c0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <CAN1_Init+0x64>)
 80007c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007c8:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoBusOff = DISABLE;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <CAN1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoRetransmission = ENABLE;
 80007d0:	4b12      	ldr	r3, [pc, #72]	@ (800081c <CAN1_Init+0x64>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoWakeUp = DISABLE;
 80007d6:	4b11      	ldr	r3, [pc, #68]	@ (800081c <CAN1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <CAN1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <CAN1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <CAN1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	775a      	strb	r2, [r3, #29]

	//setting related to can bit timings
	hcan1.Init.Prescaler = 5;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <CAN1_Init+0x64>)
 80007f0:	2205      	movs	r2, #5
 80007f2:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <CAN1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <CAN1_Init+0x64>)
 80007fc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000800:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS1_1TQ;
 8000802:	4b06      	ldr	r3, [pc, #24]	@ (800081c <CAN1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]


	if( HAL_CAN_Init(&hcan1) != HAL_OK)
 8000808:	4804      	ldr	r0, [pc, #16]	@ (800081c <CAN1_Init+0x64>)
 800080a:	f000 fa2f 	bl	8000c6c <HAL_CAN_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <CAN1_Init+0x60>
	{
		Error_handler();
 8000814:	f000 f8ac 	bl	8000970 <Error_handler>
	}
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000c0 	.word	0x200000c0
 8000820:	40006400 	.word	0x40006400

08000824 <CAN1_Tx>:

void CAN1_Tx(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b096      	sub	sp, #88	@ 0x58
 8000828:	af00      	add	r7, sp, #0

	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t Message[6] = {'H' , 'e' , 'l' , 'l' , 'o' , '\0'};
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <CAN1_Tx+0x84>)
 800082c:	463b      	mov	r3, r7
 800082e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000832:	6018      	str	r0, [r3, #0]
 8000834:	3304      	adds	r3, #4
 8000836:	8019      	strh	r1, [r3, #0]

	TxHeader.DLC = 6;
 8000838:	2306      	movs	r3, #6
 800083a:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x65D;
 800083c:	f240 635d 	movw	r3, #1629	@ 0x65d
 8000840:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]

	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, Message, &TxMailbox) != HAL_OK)
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	463a      	mov	r2, r7
 8000850:	f107 010c 	add.w	r1, r7, #12
 8000854:	4815      	ldr	r0, [pc, #84]	@ (80008ac <CAN1_Tx+0x88>)
 8000856:	f000 fc29 	bl	80010ac <HAL_CAN_AddTxMessage>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <CAN1_Tx+0x40>
	{
		Error_handler();
 8000860:	f000 f886 	bl	8000970 <Error_handler>
	}

	//we are waiting for at least one message in to the RX FIFO0
	while(HAL_CAN_IsTxMessagePending(&hcan1, TxMailbox));
 8000864:	bf00      	nop
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	4619      	mov	r1, r3
 800086a:	4810      	ldr	r0, [pc, #64]	@ (80008ac <CAN1_Tx+0x88>)
 800086c:	f000 fcee 	bl	800124c <HAL_CAN_IsTxMessagePending>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f7      	bne.n	8000866 <CAN1_Tx+0x42>

	sprintf(msg , "Message transmitted\r\n");
 8000876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087a:	490d      	ldr	r1, [pc, #52]	@ (80008b0 <CAN1_Tx+0x8c>)
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fb17 	bl	8002eb0 <siprintf>

	HAL_UART_Transmit(&huart2 , (uint8_t*)msg , strlen(msg) , HAL_MAX_DELAY);
 8000882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fcc2 	bl	8000210 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <CAN1_Tx+0x90>)
 800089a:	f001 ff4d 	bl	8002738 <HAL_UART_Transmit>

}
 800089e:	bf00      	nop
 80008a0:	3758      	adds	r7, #88	@ 0x58
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	08003810 	.word	0x08003810
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	080037f8 	.word	0x080037f8
 80008b4:	20000078 	.word	0x20000078

080008b8 <CAN1_Rx>:

void CAN1_Rx(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	@ 0x58
 80008bc:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t rcvd_msg[6];

	char msg[50];

	while(! HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0));
 80008be:	bf00      	nop
 80008c0:	2100      	movs	r1, #0
 80008c2:	4815      	ldr	r0, [pc, #84]	@ (8000918 <CAN1_Rx+0x60>)
 80008c4:	f000 fe08 	bl	80014d8 <HAL_CAN_GetRxFifoFillLevel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0f8      	beq.n	80008c0 <CAN1_Rx+0x8>

	if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, rcvd_msg) != HAL_OK)
 80008ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008d2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80008d6:	2100      	movs	r1, #0
 80008d8:	480f      	ldr	r0, [pc, #60]	@ (8000918 <CAN1_Rx+0x60>)
 80008da:	f000 fcdb 	bl	8001294 <HAL_CAN_GetRxMessage>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <CAN1_Rx+0x30>
	{
		Error_handler();
 80008e4:	f000 f844 	bl	8000970 <Error_handler>
	}

	sprintf(msg , "Message received : %s\r\n" , rcvd_msg);
 80008e8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80008ec:	463b      	mov	r3, r7
 80008ee:	490b      	ldr	r1, [pc, #44]	@ (800091c <CAN1_Rx+0x64>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f002 fadd 	bl	8002eb0 <siprintf>

	HAL_UART_Transmit(&huart2 , (uint8_t*)msg , strlen(msg) , HAL_MAX_DELAY);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc89 	bl	8000210 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29a      	uxth	r2, r3
 8000902:	4639      	mov	r1, r7
 8000904:	f04f 33ff 	mov.w	r3, #4294967295
 8000908:	4805      	ldr	r0, [pc, #20]	@ (8000920 <CAN1_Rx+0x68>)
 800090a:	f001 ff15 	bl	8002738 <HAL_UART_Transmit>
}
 800090e:	bf00      	nop
 8000910:	3758      	adds	r7, #88	@ 0x58
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000c0 	.word	0x200000c0
 800091c:	08003818 	.word	0x08003818
 8000920:	20000078 	.word	0x20000078

08000924 <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000946:	2300      	movs	r3, #0
 8000948:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800094a:	2301      	movs	r3, #1
 800094c:	61fb      	str	r3, [r7, #28]

	if(HAL_CAN_ConfigFilter(&hcan1, &can1_filter_init) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	@ (800096c <CAN_Filter_Config+0x48>)
 8000954:	f000 fa86 	bl	8000e64 <HAL_CAN_ConfigFilter>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <CAN_Filter_Config+0x3e>
	{
		Error_handler();
 800095e:	f000 f807 	bl	8000970 <Error_handler>
	}

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	@ 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000c0 	.word	0x200000c0

08000970 <Error_handler>:

void Error_handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	while(1);
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <Error_handler+0x4>

08000978 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  //here will do low level processor specific init

	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 fea3 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

	//2- enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16; // usg fault , memory fault and bus fault system exceptions
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_MspInit+0x40>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000986:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <HAL_MspInit+0x40>)
 8000988:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800098c:	6253      	str	r3, [r2, #36]	@ 0x24

	//3- configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn , 0 , 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f06f 000b 	mvn.w	r0, #11
 8000996:	f000 fea2 	bl	80016de <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn , 0 , 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	f06f 000a 	mvn.w	r0, #10
 80009a2:	f000 fe9c 	bl	80016de <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn , 0 , 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	f06f 0009 	mvn.w	r0, #9
 80009ae:	f000 fe96 	bl	80016de <HAL_NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level Inits of the USART2 peripheral

	//1- enable the clock for tha USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b17      	ldr	r3, [pc, #92]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	4a16      	ldr	r2, [pc, #88]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <HAL_UART_MspInit+0x88>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
	//2- Do the pin muxing configuration
	gpio_uart.Pin = GPIO_PIN_2;
 80009fc:	2304      	movs	r3, #4
 80009fe:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000a00:	2302      	movs	r3, #2
 8000a02:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_Tx
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <HAL_UART_MspInit+0x8c>)
 8000a18:	f000 fec2 	bl	80017a0 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_Rx
 8000a1c:	2308      	movs	r3, #8
 8000a1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <HAL_UART_MspInit+0x8c>)
 8000a28:	f000 feba 	bl	80017a0 <HAL_GPIO_Init>
	//3- enable the IRQ and set up the priority(NVIC setting)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a2c:	2026      	movs	r0, #38	@ 0x26
 8000a2e:	f000 fe72 	bl	8001716 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	210f      	movs	r1, #15
 8000a36:	2026      	movs	r0, #38	@ 0x26
 8000a38:	f000 fe51 	bl	80016de <HAL_NVIC_SetPriority>
}
 8000a3c:	bf00      	nop
 8000a3e:	3728      	adds	r7, #40	@ 0x28
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40020000 	.word	0x40020000

08000a4c <HAL_CAN_MspInit>:


void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_CAN1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b10      	ldr	r3, [pc, #64]	@ (8000a9c <HAL_CAN_MspInit+0x50>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <HAL_CAN_MspInit+0x50>)
 8000a5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <HAL_CAN_MspInit+0x50>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]

	/*CAN1 GPIO pins configuration
	 * PA11 -------> CAN1_RX
	 * PA12 -------> CAN1_Tx
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000a70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a74:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a82:	2309      	movs	r3, #9
 8000a84:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4804      	ldr	r0, [pc, #16]	@ (8000aa0 <HAL_CAN_MspInit+0x54>)
 8000a8e:	f000 fe87 	bl	80017a0 <HAL_GPIO_Init>
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aac:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_sbrk+0x5c>)
 8000aae:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <_sbrk+0x60>)
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab8:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d102      	bne.n	8000ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <_sbrk+0x64>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <_sbrk+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ac6:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <_sbrk+0x64>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4413      	add	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d207      	bcs.n	8000ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad4:	f002 fa0c 	bl	8002ef0 <__errno>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	220c      	movs	r2, #12
 8000adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e009      	b.n	8000af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	@ (8000b08 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aea:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <_sbrk+0x64>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a05      	ldr	r2, [pc, #20]	@ (8000b08 <_sbrk+0x64>)
 8000af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000af6:	68fb      	ldr	r3, [r7, #12]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3718      	adds	r7, #24
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20020000 	.word	0x20020000
 8000b04:	00000400 	.word	0x00000400
 8000b08:	200000e8 	.word	0x200000e8
 8000b0c:	20000238 	.word	0x20000238

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <SystemInit+0x20>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a05      	ldr	r2, [pc, #20]	@ (8000b30 <SystemInit+0x20>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b38:	f7ff ffea 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	@ (8000b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	@ (8000b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b62:	f002 f9cb 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b66:	f7ff fd2b 	bl	80005c0 <main>
  bx  lr    
 8000b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b78:	0800388c 	.word	0x0800388c
  ldr r2, =_sbss
 8000b7c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b80:	20000238 	.word	0x20000238

08000b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC_IRQHandler>
	...

08000b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc8 <HAL_Init+0x40>)
 8000b92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <HAL_Init+0x40>)
 8000b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x40>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x40>)
 8000baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 fd89 	bl	80016c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fedc 	bl	8000978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40023c00 	.word	0x40023c00

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fda1 	bl	8001732 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 fd69 	bl	80016de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	@ (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200000ec 	.word	0x200000ec

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200000ec 	.word	0x200000ec

08000c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0ed      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fede 	bl	8000a4c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f042 0201 	orr.w	r2, r2, #1
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff ffd8 	bl	8000c54 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ca6:	e012      	b.n	8000cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff ffd4 	bl	8000c54 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d90b      	bls.n	8000cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0c5      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0e5      	beq.n	8000ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0202 	bic.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffb2 	bl	8000c54 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffae 	bl	8000c54 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e09f      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e5      	bne.n	8000cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0220 	bic.w	r2, r2, #32
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7edb      	ldrb	r3, [r3, #27]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0208 	orr.w	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f5b      	ldrb	r3, [r3, #29]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7c:	7cfb      	ldrb	r3, [r7, #19]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <HAL_CAN_ConfigFilter+0x26>
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	f040 80be 	bne.w	8001006 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e8a:	4b65      	ldr	r3, [pc, #404]	@ (8001020 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ea4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2201      	movs	r2, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d123      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3248      	adds	r2, #72	@ 0x48
 8000f14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2a:	6979      	ldr	r1, [r7, #20]
 8000f2c:	3348      	adds	r3, #72	@ 0x48
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d122      	bne.n	8000f82 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3248      	adds	r2, #72	@ 0x48
 8000f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	3348      	adds	r3, #72	@ 0x48
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f9c:	e007      	b.n	8000fae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000fc8:	e007      	b.n	8000fda <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ff8:	f023 0201 	bic.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e006      	b.n	8001014 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	40006400 	.word	0x40006400

08001024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12e      	bne.n	8001096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fe00 	bl	8000c54 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff fdfc 	bl	8000c54 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e012      	b.n	80010a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e5      	bne.n	8001058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e006      	b.n	80010a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	@ 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ca:	7ffb      	ldrb	r3, [r7, #31]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_CAN_AddTxMessage+0x2c>
 80010d0:	7ffb      	ldrb	r3, [r7, #31]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	f040 80ad 	bne.w	8001232 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10a      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d105      	bne.n	80010f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8095 	beq.w	8001222 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	0e1b      	lsrs	r3, r3, #24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10d      	bne.n	8001130 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800111e:	68f9      	ldr	r1, [r7, #12]
 8001120:	6809      	ldr	r1, [r1, #0]
 8001122:	431a      	orrs	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3318      	adds	r3, #24
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	440b      	add	r3, r1
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00f      	b.n	8001150 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800113a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001140:	68f9      	ldr	r1, [r7, #12]
 8001142:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001144:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	3318      	adds	r3, #24
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	440b      	add	r3, r1
 800114e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6819      	ldr	r1, [r3, #0]
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	3304      	adds	r3, #4
 8001162:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	7d1b      	ldrb	r3, [r3, #20]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d111      	bne.n	8001190 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	3318      	adds	r3, #24
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	6811      	ldr	r1, [r2, #0]
 8001180:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3318      	adds	r3, #24
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	440b      	add	r3, r1
 800118c:	3304      	adds	r3, #4
 800118e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3307      	adds	r3, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	061a      	lsls	r2, r3, #24
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3306      	adds	r3, #6
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	431a      	orrs	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3305      	adds	r3, #5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	4313      	orrs	r3, r2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	3204      	adds	r2, #4
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	4610      	mov	r0, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6811      	ldr	r1, [r2, #0]
 80011b8:	ea43 0200 	orr.w	r2, r3, r0
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	440b      	add	r3, r1
 80011c2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80011c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3303      	adds	r3, #3
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	061a      	lsls	r2, r3, #24
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3302      	adds	r3, #2
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	041b      	lsls	r3, r3, #16
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	4313      	orrs	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	4610      	mov	r0, r2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	6811      	ldr	r1, [r2, #0]
 80011ee:	ea43 0200 	orr.w	r2, r3, r0
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80011fc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3318      	adds	r3, #24
 8001206:	011b      	lsls	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	6811      	ldr	r1, [r2, #0]
 8001210:	f043 0201 	orr.w	r2, r3, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3318      	adds	r3, #24
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	440b      	add	r3, r1
 800121c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e00e      	b.n	8001240 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e006      	b.n	8001240 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
  }
}
 8001240:	4618      	mov	r0, r3
 8001242:	3724      	adds	r7, #36	@ 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001260:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001262:	7afb      	ldrb	r3, [r7, #11]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d002      	beq.n	800126e <HAL_CAN_IsTxMessagePending+0x22>
 8001268:	7afb      	ldrb	r3, [r7, #11]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d10b      	bne.n	8001286 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	069b      	lsls	r3, r3, #26
 8001278:	401a      	ands	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	069b      	lsls	r3, r3, #26
 800127e:	429a      	cmp	r2, r3
 8001280:	d001      	beq.n	8001286 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001282:	2301      	movs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d003      	beq.n	80012b8 <HAL_CAN_GetRxMessage+0x24>
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f040 8103 	bne.w	80014be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10e      	bne.n	80012dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d116      	bne.n	80012fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0f7      	b.n	80014cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0e8      	b.n	80014cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	331b      	adds	r3, #27
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0204 	and.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10c      	bne.n	8001332 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	331b      	adds	r3, #27
 8001320:	011b      	lsls	r3, r3, #4
 8001322:	4413      	add	r3, r2
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	0d5b      	lsrs	r3, r3, #21
 8001328:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e00b      	b.n	800134a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	331b      	adds	r3, #27
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	331b      	adds	r3, #27
 8001352:	011b      	lsls	r3, r3, #4
 8001354:	4413      	add	r3, r2
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0202 	and.w	r2, r3, #2
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	331b      	adds	r3, #27
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	4413      	add	r3, r2
 800136c:	3304      	adds	r3, #4
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d003      	beq.n	8001380 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2208      	movs	r2, #8
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	e00b      	b.n	8001398 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	331b      	adds	r3, #27
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	3304      	adds	r3, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 020f 	and.w	r2, r3, #15
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	331b      	adds	r3, #27
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4413      	add	r3, r2
 80013a4:	3304      	adds	r3, #4
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	331b      	adds	r3, #27
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	4413      	add	r3, r2
 80013bc:	3304      	adds	r3, #4
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	0c1b      	lsrs	r3, r3, #16
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0a1a      	lsrs	r2, r3, #8
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3301      	adds	r3, #1
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0c1a      	lsrs	r2, r3, #16
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3302      	adds	r3, #2
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	0e1a      	lsrs	r2, r3, #24
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	3303      	adds	r3, #3
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	4413      	add	r3, r2
 8001436:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3304      	adds	r3, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0a1a      	lsrs	r2, r3, #8
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3305      	adds	r3, #5
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0c1a      	lsrs	r2, r3, #16
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	3306      	adds	r3, #6
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	011b      	lsls	r3, r3, #4
 8001480:	4413      	add	r3, r2
 8001482:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	0e1a      	lsrs	r2, r3, #24
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3307      	adds	r3, #7
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d108      	bne.n	80014aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	e007      	b.n	80014ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0220 	orr.w	r2, r2, #32
 80014b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e006      	b.n	80014cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ee:	7afb      	ldrb	r3, [r7, #11]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d002      	beq.n	80014fa <HAL_CAN_GetRxFifoFillLevel+0x22>
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d10f      	bne.n	800151a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e005      	b.n	800151a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	@ (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	@ (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	@ (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	@ (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	@ (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	@ 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001694:	d301      	bcc.n	800169a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001696:	2301      	movs	r3, #1
 8001698:	e00f      	b.n	80016ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169a:	4a0a      	ldr	r2, [pc, #40]	@ (80016c4 <SysTick_Config+0x40>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a2:	210f      	movs	r1, #15
 80016a4:	f04f 30ff 	mov.w	r0, #4294967295
 80016a8:	f7ff ff8e 	bl	80015c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <SysTick_Config+0x40>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b2:	4b04      	ldr	r3, [pc, #16]	@ (80016c4 <SysTick_Config+0x40>)
 80016b4:	2207      	movs	r2, #7
 80016b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff29 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4603      	mov	r3, r0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f0:	f7ff ff3e 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7ff ff8e 	bl	800161c <NVIC_EncodePriority>
 8001700:	4602      	mov	r2, r0
 8001702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001706:	4611      	mov	r1, r2
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff5d 	bl	80015c8 <__NVIC_SetPriority>
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff31 	bl	800158c <__NVIC_EnableIRQ>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff ffa2 	bl	8001684 <SysTick_Config>
 8001740:	4603      	mov	r3, r0
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b04      	cmp	r3, #4
 8001758:	d106      	bne.n	8001768 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800175a:	4b09      	ldr	r3, [pc, #36]	@ (8001780 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001760:	f043 0304 	orr.w	r3, r3, #4
 8001764:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001766:	e005      	b.n	8001774 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800176e:	f023 0304 	bic.w	r3, r3, #4
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001788:	f000 f802 	bl	8001790 <HAL_SYSTICK_Callback>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	@ 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e165      	b.n	8001a88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8154 	bne.w	8001a82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d005      	beq.n	80017f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d130      	bne.n	8001854 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001828:	2201      	movs	r2, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 0201 	and.w	r2, r3, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b03      	cmp	r3, #3
 800185e:	d017      	beq.n	8001890 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	69b9      	ldr	r1, [r7, #24]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ae 	beq.w	8001a82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b5d      	ldr	r3, [pc, #372]	@ (8001aa0 <HAL_GPIO_Init+0x300>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	4a5c      	ldr	r2, [pc, #368]	@ (8001aa0 <HAL_GPIO_Init+0x300>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001934:	6453      	str	r3, [r2, #68]	@ 0x44
 8001936:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa0 <HAL_GPIO_Init+0x300>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001942:	4a58      	ldr	r2, [pc, #352]	@ (8001aa4 <HAL_GPIO_Init+0x304>)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	220f      	movs	r2, #15
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa8 <HAL_GPIO_Init+0x308>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d025      	beq.n	80019ba <HAL_GPIO_Init+0x21a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4e      	ldr	r2, [pc, #312]	@ (8001aac <HAL_GPIO_Init+0x30c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d01f      	beq.n	80019b6 <HAL_GPIO_Init+0x216>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab0 <HAL_GPIO_Init+0x310>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d019      	beq.n	80019b2 <HAL_GPIO_Init+0x212>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab4 <HAL_GPIO_Init+0x314>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d013      	beq.n	80019ae <HAL_GPIO_Init+0x20e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4b      	ldr	r2, [pc, #300]	@ (8001ab8 <HAL_GPIO_Init+0x318>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00d      	beq.n	80019aa <HAL_GPIO_Init+0x20a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4a      	ldr	r2, [pc, #296]	@ (8001abc <HAL_GPIO_Init+0x31c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d007      	beq.n	80019a6 <HAL_GPIO_Init+0x206>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a49      	ldr	r2, [pc, #292]	@ (8001ac0 <HAL_GPIO_Init+0x320>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <HAL_GPIO_Init+0x202>
 800199e:	2306      	movs	r3, #6
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019a2:	2307      	movs	r3, #7
 80019a4:	e00a      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x21c>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	@ (8001aa4 <HAL_GPIO_Init+0x304>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a31      	ldr	r2, [pc, #196]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a26      	ldr	r2, [pc, #152]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a52:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7c:	4a11      	ldr	r2, [pc, #68]	@ (8001ac4 <HAL_GPIO_Init+0x324>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f ae96 	bls.w	80017bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40013c00 	.word	0x40013c00

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0cc      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b68      	ldr	r3, [pc, #416]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d90c      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b65      	ldr	r3, [pc, #404]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b63      	ldr	r3, [pc, #396]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b8      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b1c:	4b59      	ldr	r3, [pc, #356]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b34:	4b53      	ldr	r3, [pc, #332]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4a52      	ldr	r2, [pc, #328]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b50      	ldr	r3, [pc, #320]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	494d      	ldr	r1, [pc, #308]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d044      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b47      	ldr	r3, [pc, #284]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d119      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e07f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d003      	beq.n	8001b86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3b      	ldr	r3, [pc, #236]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e067      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4934      	ldr	r1, [pc, #208]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff f84c 	bl	8000c54 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff f848 	bl	8000c54 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b25      	ldr	r3, [pc, #148]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d20c      	bcs.n	8001c10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_RCC_ClockConfig+0x1b8>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e032      	b.n	8001c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4916      	ldr	r1, [pc, #88]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d009      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f855 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe ffac 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023c00 	.word	0x40023c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08003830 	.word	0x08003830
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb0:	f7ff fff0 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4903      	ldr	r1, [pc, #12]	@ (8001cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	08003840 	.word	0x08003840

08001cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd8:	f7ff ffdc 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0b5b      	lsrs	r3, r3, #13
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	@ (8001cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08003840 	.word	0x08003840

08001cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d00:	b0ae      	sub	sp, #184	@ 0xb8
 8001d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d22:	4bcb      	ldr	r3, [pc, #812]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	f200 8206 	bhi.w	800213c <HAL_RCC_GetSysClockFreq+0x440>
 8001d30:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001d6d 	.word	0x08001d6d
 8001d3c:	0800213d 	.word	0x0800213d
 8001d40:	0800213d 	.word	0x0800213d
 8001d44:	0800213d 	.word	0x0800213d
 8001d48:	08001d75 	.word	0x08001d75
 8001d4c:	0800213d 	.word	0x0800213d
 8001d50:	0800213d 	.word	0x0800213d
 8001d54:	0800213d 	.word	0x0800213d
 8001d58:	08001d7d 	.word	0x08001d7d
 8001d5c:	0800213d 	.word	0x0800213d
 8001d60:	0800213d 	.word	0x0800213d
 8001d64:	0800213d 	.word	0x0800213d
 8001d68:	08001f6d 	.word	0x08001f6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d6c:	4bb9      	ldr	r3, [pc, #740]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d72:	e1e7      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d74:	4bb8      	ldr	r3, [pc, #736]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d7a:	e1e3      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d7c:	4bb4      	ldr	r3, [pc, #720]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d88:	4bb1      	ldr	r3, [pc, #708]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d071      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d94:	4bae      	ldr	r3, [pc, #696]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	099b      	lsrs	r3, r3, #6
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001da0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001dba:	4622      	mov	r2, r4
 8001dbc:	462b      	mov	r3, r5
 8001dbe:	f04f 0000 	mov.w	r0, #0
 8001dc2:	f04f 0100 	mov.w	r1, #0
 8001dc6:	0159      	lsls	r1, r3, #5
 8001dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dcc:	0150      	lsls	r0, r2, #5
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4621      	mov	r1, r4
 8001dd4:	1a51      	subs	r1, r2, r1
 8001dd6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001dd8:	4629      	mov	r1, r5
 8001dda:	eb63 0301 	sbc.w	r3, r3, r1
 8001dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001dec:	4649      	mov	r1, r9
 8001dee:	018b      	lsls	r3, r1, #6
 8001df0:	4641      	mov	r1, r8
 8001df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001df6:	4641      	mov	r1, r8
 8001df8:	018a      	lsls	r2, r1, #6
 8001dfa:	4641      	mov	r1, r8
 8001dfc:	1a51      	subs	r1, r2, r1
 8001dfe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e00:	4649      	mov	r1, r9
 8001e02:	eb63 0301 	sbc.w	r3, r3, r1
 8001e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001e14:	4649      	mov	r1, r9
 8001e16:	00cb      	lsls	r3, r1, #3
 8001e18:	4641      	mov	r1, r8
 8001e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e1e:	4641      	mov	r1, r8
 8001e20:	00ca      	lsls	r2, r1, #3
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	4622      	mov	r2, r4
 8001e2a:	189b      	adds	r3, r3, r2
 8001e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e2e:	462b      	mov	r3, r5
 8001e30:	460a      	mov	r2, r1
 8001e32:	eb42 0303 	adc.w	r3, r2, r3
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e44:	4629      	mov	r1, r5
 8001e46:	024b      	lsls	r3, r1, #9
 8001e48:	4621      	mov	r1, r4
 8001e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e4e:	4621      	mov	r1, r4
 8001e50:	024a      	lsls	r2, r1, #9
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001e60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001e64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001e68:	f7fe fa2a 	bl	80002c0 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e76:	e067      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e78:	4b75      	ldr	r3, [pc, #468]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e84:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e92:	2300      	movs	r3, #0
 8001e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e9a:	4622      	mov	r2, r4
 8001e9c:	462b      	mov	r3, r5
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	0159      	lsls	r1, r3, #5
 8001ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eac:	0150      	lsls	r0, r2, #5
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	1a51      	subs	r1, r2, r1
 8001eb6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001eb8:	4629      	mov	r1, r5
 8001eba:	eb63 0301 	sbc.w	r3, r3, r1
 8001ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ecc:	4649      	mov	r1, r9
 8001ece:	018b      	lsls	r3, r1, #6
 8001ed0:	4641      	mov	r1, r8
 8001ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ed6:	4641      	mov	r1, r8
 8001ed8:	018a      	lsls	r2, r1, #6
 8001eda:	4641      	mov	r1, r8
 8001edc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ee0:	4649      	mov	r1, r9
 8001ee2:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ef2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001efa:	4692      	mov	sl, r2
 8001efc:	469b      	mov	fp, r3
 8001efe:	4623      	mov	r3, r4
 8001f00:	eb1a 0303 	adds.w	r3, sl, r3
 8001f04:	623b      	str	r3, [r7, #32]
 8001f06:	462b      	mov	r3, r5
 8001f08:	eb4b 0303 	adc.w	r3, fp, r3
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	028b      	lsls	r3, r1, #10
 8001f1e:	4621      	mov	r1, r4
 8001f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f24:	4621      	mov	r1, r4
 8001f26:	028a      	lsls	r2, r1, #10
 8001f28:	4610      	mov	r0, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f30:	2200      	movs	r2, #0
 8001f32:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f34:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001f3a:	f7fe f9c1 	bl	80002c0 <__aeabi_uldivmod>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4613      	mov	r3, r2
 8001f44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f48:	4b41      	ldr	r3, [pc, #260]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	3301      	adds	r3, #1
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f6a:	e0eb      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f6c:	4b38      	ldr	r3, [pc, #224]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f78:	4b35      	ldr	r3, [pc, #212]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d06b      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f84:	4b32      	ldr	r3, [pc, #200]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	099b      	lsrs	r3, r3, #6
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001f8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f98:	2300      	movs	r3, #0
 8001f9a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fa0:	4622      	mov	r2, r4
 8001fa2:	462b      	mov	r3, r5
 8001fa4:	f04f 0000 	mov.w	r0, #0
 8001fa8:	f04f 0100 	mov.w	r1, #0
 8001fac:	0159      	lsls	r1, r3, #5
 8001fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fb2:	0150      	lsls	r0, r2, #5
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4621      	mov	r1, r4
 8001fba:	1a51      	subs	r1, r2, r1
 8001fbc:	61b9      	str	r1, [r7, #24]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001fd2:	4659      	mov	r1, fp
 8001fd4:	018b      	lsls	r3, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fdc:	4651      	mov	r1, sl
 8001fde:	018a      	lsls	r2, r1, #6
 8001fe0:	4651      	mov	r1, sl
 8001fe2:	ebb2 0801 	subs.w	r8, r2, r1
 8001fe6:	4659      	mov	r1, fp
 8001fe8:	eb63 0901 	sbc.w	r9, r3, r1
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002000:	4690      	mov	r8, r2
 8002002:	4699      	mov	r9, r3
 8002004:	4623      	mov	r3, r4
 8002006:	eb18 0303 	adds.w	r3, r8, r3
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	462b      	mov	r3, r5
 800200e:	eb49 0303 	adc.w	r3, r9, r3
 8002012:	617b      	str	r3, [r7, #20]
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002020:	4629      	mov	r1, r5
 8002022:	024b      	lsls	r3, r1, #9
 8002024:	4621      	mov	r1, r4
 8002026:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800202a:	4621      	mov	r1, r4
 800202c:	024a      	lsls	r2, r1, #9
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002036:	2200      	movs	r2, #0
 8002038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800203a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800203c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002040:	f7fe f93e 	bl	80002c0 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800204e:	e065      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x420>
 8002050:	40023800 	.word	0x40023800
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b3d      	ldr	r3, [pc, #244]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x458>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	2200      	movs	r2, #0
 8002064:	4618      	mov	r0, r3
 8002066:	4611      	mov	r1, r2
 8002068:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800206c:	653b      	str	r3, [r7, #80]	@ 0x50
 800206e:	2300      	movs	r3, #0
 8002070:	657b      	str	r3, [r7, #84]	@ 0x54
 8002072:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002076:	4642      	mov	r2, r8
 8002078:	464b      	mov	r3, r9
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	0159      	lsls	r1, r3, #5
 8002084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002088:	0150      	lsls	r0, r2, #5
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4641      	mov	r1, r8
 8002090:	1a51      	subs	r1, r2, r1
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	4649      	mov	r1, r9
 8002096:	eb63 0301 	sbc.w	r3, r3, r1
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020a8:	4659      	mov	r1, fp
 80020aa:	018b      	lsls	r3, r1, #6
 80020ac:	4651      	mov	r1, sl
 80020ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020b2:	4651      	mov	r1, sl
 80020b4:	018a      	lsls	r2, r1, #6
 80020b6:	4651      	mov	r1, sl
 80020b8:	1a54      	subs	r4, r2, r1
 80020ba:	4659      	mov	r1, fp
 80020bc:	eb63 0501 	sbc.w	r5, r3, r1
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	00eb      	lsls	r3, r5, #3
 80020ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020ce:	00e2      	lsls	r2, r4, #3
 80020d0:	4614      	mov	r4, r2
 80020d2:	461d      	mov	r5, r3
 80020d4:	4643      	mov	r3, r8
 80020d6:	18e3      	adds	r3, r4, r3
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	464b      	mov	r3, r9
 80020dc:	eb45 0303 	adc.w	r3, r5, r3
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ee:	4629      	mov	r1, r5
 80020f0:	028b      	lsls	r3, r1, #10
 80020f2:	4621      	mov	r1, r4
 80020f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f8:	4621      	mov	r1, r4
 80020fa:	028a      	lsls	r2, r1, #10
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002104:	2200      	movs	r2, #0
 8002106:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002108:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800210a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800210e:	f7fe f8d7 	bl	80002c0 <__aeabi_uldivmod>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4613      	mov	r3, r2
 8002118:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800211c:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x458>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	0f1b      	lsrs	r3, r3, #28
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800212a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800212e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800213a:	e003      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x45c>)
 800213e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002144:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002148:	4618      	mov	r0, r3
 800214a:	37b8      	adds	r7, #184	@ 0xb8
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	00f42400 	.word	0x00f42400

0800215c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e28d      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	f000 8083 	beq.w	8002282 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800217c:	4b94      	ldr	r3, [pc, #592]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 030c 	and.w	r3, r3, #12
 8002184:	2b04      	cmp	r3, #4
 8002186:	d019      	beq.n	80021bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002188:	4b91      	ldr	r3, [pc, #580]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002190:	2b08      	cmp	r3, #8
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002194:	4b8e      	ldr	r3, [pc, #568]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021a0:	d00c      	beq.n	80021bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a2:	4b8b      	ldr	r3, [pc, #556]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d112      	bne.n	80021d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ae:	4b88      	ldr	r3, [pc, #544]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021ba:	d10b      	bne.n	80021d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021bc:	4b84      	ldr	r3, [pc, #528]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d05b      	beq.n	8002280 <HAL_RCC_OscConfig+0x124>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d157      	bne.n	8002280 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e25a      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x90>
 80021de:	4b7c      	ldr	r3, [pc, #496]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7b      	ldr	r2, [pc, #492]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	6013      	str	r3, [r2, #0]
 80021ea:	e01d      	b.n	8002228 <HAL_RCC_OscConfig+0xcc>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021f4:	d10c      	bne.n	8002210 <HAL_RCC_OscConfig+0xb4>
 80021f6:	4b76      	ldr	r3, [pc, #472]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a75      	ldr	r2, [pc, #468]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80021fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002200:	6013      	str	r3, [r2, #0]
 8002202:	4b73      	ldr	r3, [pc, #460]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a72      	ldr	r2, [pc, #456]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0xcc>
 8002210:	4b6f      	ldr	r3, [pc, #444]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a6e      	ldr	r2, [pc, #440]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b6c      	ldr	r3, [pc, #432]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6b      	ldr	r2, [pc, #428]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd10 	bl	8000c54 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7fe fd0c 	bl	8000c54 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e21f      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800224a:	4b61      	ldr	r3, [pc, #388]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0xdc>
 8002256:	e014      	b.n	8002282 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fcfc 	bl	8000c54 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe fcf8 	bl	8000c54 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e20b      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002272:	4b57      	ldr	r3, [pc, #348]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x104>
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d06f      	beq.n	800236e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800228e:	4b50      	ldr	r3, [pc, #320]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 030c 	and.w	r3, r3, #12
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800229a:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 030c 	and.w	r3, r3, #12
        || \
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d105      	bne.n	80022b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022a6:	4b4a      	ldr	r3, [pc, #296]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022b2:	4b47      	ldr	r3, [pc, #284]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	d11c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022be:	4b44      	ldr	r3, [pc, #272]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d116      	bne.n	80022f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	4b41      	ldr	r3, [pc, #260]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <HAL_RCC_OscConfig+0x186>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d001      	beq.n	80022e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e1d3      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4937      	ldr	r1, [pc, #220]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	e03a      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002300:	4b34      	ldr	r3, [pc, #208]	@ (80023d4 <HAL_RCC_OscConfig+0x278>)
 8002302:	2201      	movs	r2, #1
 8002304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fca5 	bl	8000c54 <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fca1 	bl	8000c54 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1b4      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002320:	4b2b      	ldr	r3, [pc, #172]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f0      	beq.n	800230e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232c:	4b28      	ldr	r3, [pc, #160]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4925      	ldr	r1, [pc, #148]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]
 8002340:	e015      	b.n	800236e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002342:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x278>)
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fc84 	bl	8000c54 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7fe fc80 	bl	8000c54 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e193      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d016      	beq.n	80023b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_RCC_OscConfig+0x27c>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe fc64 	bl	8000c54 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe fc60 	bl	8000c54 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e173      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <HAL_RCC_OscConfig+0x274>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x234>
 80023ae:	e01b      	b.n	80023e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_OscConfig+0x27c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe fc4d 	bl	8000c54 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023bc:	e00e      	b.n	80023dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023be:	f7fe fc49 	bl	8000c54 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d907      	bls.n	80023dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e15c      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
 80023d0:	40023800 	.word	0x40023800
 80023d4:	42470000 	.word	0x42470000
 80023d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80023de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ea      	bne.n	80023be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8097 	beq.w	8002524 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b83      	ldr	r3, [pc, #524]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b7f      	ldr	r3, [pc, #508]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	4a7e      	ldr	r2, [pc, #504]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002414:	6413      	str	r3, [r2, #64]	@ 0x40
 8002416:	4b7c      	ldr	r3, [pc, #496]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002426:	4b79      	ldr	r3, [pc, #484]	@ (800260c <HAL_RCC_OscConfig+0x4b0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d118      	bne.n	8002464 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002432:	4b76      	ldr	r3, [pc, #472]	@ (800260c <HAL_RCC_OscConfig+0x4b0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a75      	ldr	r2, [pc, #468]	@ (800260c <HAL_RCC_OscConfig+0x4b0>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800243e:	f7fe fc09 	bl	8000c54 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002446:	f7fe fc05 	bl	8000c54 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e118      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002458:	4b6c      	ldr	r3, [pc, #432]	@ (800260c <HAL_RCC_OscConfig+0x4b0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d106      	bne.n	800247a <HAL_RCC_OscConfig+0x31e>
 800246c:	4b66      	ldr	r3, [pc, #408]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	4a65      	ldr	r2, [pc, #404]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	6713      	str	r3, [r2, #112]	@ 0x70
 8002478:	e01c      	b.n	80024b4 <HAL_RCC_OscConfig+0x358>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2b05      	cmp	r3, #5
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0x340>
 8002482:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002486:	4a60      	ldr	r2, [pc, #384]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002488:	f043 0304 	orr.w	r3, r3, #4
 800248c:	6713      	str	r3, [r2, #112]	@ 0x70
 800248e:	4b5e      	ldr	r3, [pc, #376]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002492:	4a5d      	ldr	r2, [pc, #372]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6713      	str	r3, [r2, #112]	@ 0x70
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0x358>
 800249c:	4b5a      	ldr	r3, [pc, #360]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a0:	4a59      	ldr	r2, [pc, #356]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a8:	4b57      	ldr	r3, [pc, #348]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ac:	4a56      	ldr	r2, [pc, #344]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d015      	beq.n	80024e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7fe fbca 	bl	8000c54 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c2:	e00a      	b.n	80024da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c4:	f7fe fbc6 	bl	8000c54 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0d7      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024da:	4b4b      	ldr	r3, [pc, #300]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0ee      	beq.n	80024c4 <HAL_RCC_OscConfig+0x368>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7fe fbb4 	bl	8000c54 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7fe fbb0 	bl	8000c54 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0c1      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002506:	4b40      	ldr	r3, [pc, #256]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ee      	bne.n	80024f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d105      	bne.n	8002524 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002518:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4a3a      	ldr	r2, [pc, #232]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800251e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002522:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80ad 	beq.w	8002688 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800252e:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b08      	cmp	r3, #8
 8002538:	d060      	beq.n	80025fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d145      	bne.n	80025ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002542:	4b33      	ldr	r3, [pc, #204]	@ (8002610 <HAL_RCC_OscConfig+0x4b4>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fb84 	bl	8000c54 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe fb80 	bl	8000c54 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e093      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002562:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	019b      	lsls	r3, r3, #6
 800257e:	431a      	orrs	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	3b01      	subs	r3, #1
 8002588:	041b      	lsls	r3, r3, #16
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002598:	071b      	lsls	r3, r3, #28
 800259a:	491b      	ldr	r1, [pc, #108]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002610 <HAL_RCC_OscConfig+0x4b4>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fb55 	bl	8000c54 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fb51 	bl	8000c54 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e064      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x452>
 80025cc:	e05c      	b.n	8002688 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <HAL_RCC_OscConfig+0x4b4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fb3e 	bl	8000c54 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fb3a 	bl	8000c54 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e04d      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x480>
 80025fa:	e045      	b.n	8002688 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e040      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
 8002610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002614:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <HAL_RCC_OscConfig+0x538>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d030      	beq.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262c:	429a      	cmp	r2, r3
 800262e:	d129      	bne.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d122      	bne.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002644:	4013      	ands	r3, r2
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800264a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800264c:	4293      	cmp	r3, r2
 800264e:	d119      	bne.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	3b01      	subs	r3, #1
 800265e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d10f      	bne.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e042      	b.n	8002730 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe f97c 	bl	80009bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2224      	movs	r2, #36	@ 0x24
 80026c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68da      	ldr	r2, [r3, #12]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f973 	bl	80029c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002700:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002710:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2220      	movs	r2, #32
 800271c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	@ 0x28
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	4613      	mov	r3, r2
 8002746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b20      	cmp	r3, #32
 8002756:	d175      	bne.n	8002844 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_UART_Transmit+0x2c>
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e06e      	b.n	8002846 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2221      	movs	r2, #33	@ 0x21
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002776:	f7fe fa6d 	bl	8000c54 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	88fa      	ldrh	r2, [r7, #6]
 8002780:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002790:	d108      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e003      	b.n	80027ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ac:	e02e      	b.n	800280c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	@ 0x80
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f848 	bl	800284e <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2220      	movs	r2, #32
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e03a      	b.n	8002846 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10b      	bne.n	80027ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	3302      	adds	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
 80027ec:	e007      	b.n	80027fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	3301      	adds	r3, #1
 80027fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1cb      	bne.n	80027ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2140      	movs	r1, #64	@ 0x40
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f814 	bl	800284e <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e006      	b.n	8002846 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	60f8      	str	r0, [r7, #12]
 8002856:	60b9      	str	r1, [r7, #8]
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4613      	mov	r3, r2
 800285c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800285e:	e03b      	b.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002866:	d037      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fe f9f4 	bl	8000c54 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <UART_WaitOnFlagUntilTimeout+0x30>
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e03a      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b80      	cmp	r3, #128	@ 0x80
 8002894:	d020      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b40      	cmp	r3, #64	@ 0x40
 800289a:	d01d      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d116      	bne.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f81d 	bl	8002900 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2208      	movs	r2, #8
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e00f      	b.n	80028f8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	4013      	ands	r3, r2
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d0b4      	beq.n	8002860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002900:	b480      	push	{r7}
 8002902:	b095      	sub	sp, #84	@ 0x54
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002912:	e853 3f00 	ldrex	r3, [r3]
 8002916:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800291e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002928:	643a      	str	r2, [r7, #64]	@ 0x40
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800292e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002930:	e841 2300 	strex	r3, r2, [r1]
 8002934:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1e5      	bne.n	8002908 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	61fb      	str	r3, [r7, #28]
   return(result);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	3314      	adds	r3, #20
 800295a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800295c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002960:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002964:	e841 2300 	strex	r3, r2, [r1]
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800296a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e5      	bne.n	800293c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002974:	2b01      	cmp	r3, #1
 8002976:	d119      	bne.n	80029ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	e853 3f00 	ldrex	r3, [r3]
 8002986:	60bb      	str	r3, [r7, #8]
   return(result);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f023 0310 	bic.w	r3, r3, #16
 800298e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	330c      	adds	r3, #12
 8002996:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002998:	61ba      	str	r2, [r7, #24]
 800299a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6979      	ldr	r1, [r7, #20]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	613b      	str	r3, [r7, #16]
   return(result);
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e5      	bne.n	8002978 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029ba:	bf00      	nop
 80029bc:	3754      	adds	r7, #84	@ 0x54
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
	...

080029c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b0c0      	sub	sp, #256	@ 0x100
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80029e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e4:	68d9      	ldr	r1, [r3, #12]
 80029e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	ea40 0301 	orr.w	r3, r0, r1
 80029f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a20:	f021 010c 	bic.w	r1, r1, #12
 8002a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a42:	6999      	ldr	r1, [r3, #24]
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	ea40 0301 	orr.w	r3, r0, r1
 8002a4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b8f      	ldr	r3, [pc, #572]	@ (8002c94 <UART_SetConfig+0x2cc>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d005      	beq.n	8002a68 <UART_SetConfig+0xa0>
 8002a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4b8d      	ldr	r3, [pc, #564]	@ (8002c98 <UART_SetConfig+0x2d0>)
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d104      	bne.n	8002a72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff f934 	bl	8001cd4 <HAL_RCC_GetPCLK2Freq>
 8002a6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002a70:	e003      	b.n	8002a7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a72:	f7ff f91b 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 8002a76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a84:	f040 810c 	bne.w	8002ca0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a9a:	4622      	mov	r2, r4
 8002a9c:	462b      	mov	r3, r5
 8002a9e:	1891      	adds	r1, r2, r2
 8002aa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002aa2:	415b      	adcs	r3, r3
 8002aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002aa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002aaa:	4621      	mov	r1, r4
 8002aac:	eb12 0801 	adds.w	r8, r2, r1
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	eb43 0901 	adc.w	r9, r3, r1
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ac2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ac6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002aca:	4690      	mov	r8, r2
 8002acc:	4699      	mov	r9, r3
 8002ace:	4623      	mov	r3, r4
 8002ad0:	eb18 0303 	adds.w	r3, r8, r3
 8002ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ad8:	462b      	mov	r3, r5
 8002ada:	eb49 0303 	adc.w	r3, r9, r3
 8002ade:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002aee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002af6:	460b      	mov	r3, r1
 8002af8:	18db      	adds	r3, r3, r3
 8002afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8002afc:	4613      	mov	r3, r2
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b0c:	f7fd fbd8 	bl	80002c0 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4b61      	ldr	r3, [pc, #388]	@ (8002c9c <UART_SetConfig+0x2d4>)
 8002b16:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	011c      	lsls	r4, r3, #4
 8002b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002b2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002b30:	4642      	mov	r2, r8
 8002b32:	464b      	mov	r3, r9
 8002b34:	1891      	adds	r1, r2, r2
 8002b36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002b38:	415b      	adcs	r3, r3
 8002b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002b40:	4641      	mov	r1, r8
 8002b42:	eb12 0a01 	adds.w	sl, r2, r1
 8002b46:	4649      	mov	r1, r9
 8002b48:	eb43 0b01 	adc.w	fp, r3, r1
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b60:	4692      	mov	sl, r2
 8002b62:	469b      	mov	fp, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	eb1a 0303 	adds.w	r3, sl, r3
 8002b6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	eb4b 0303 	adc.w	r3, fp, r3
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	18db      	adds	r3, r3, r3
 8002b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b92:	4613      	mov	r3, r2
 8002b94:	eb42 0303 	adc.w	r3, r2, r3
 8002b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002ba2:	f7fd fb8d 	bl	80002c0 <__aeabi_uldivmod>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4611      	mov	r1, r2
 8002bac:	4b3b      	ldr	r3, [pc, #236]	@ (8002c9c <UART_SetConfig+0x2d4>)
 8002bae:	fba3 2301 	umull	r2, r3, r3, r1
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2264      	movs	r2, #100	@ 0x64
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	1acb      	subs	r3, r1, r3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002bc2:	4b36      	ldr	r3, [pc, #216]	@ (8002c9c <UART_SetConfig+0x2d4>)
 8002bc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002bd0:	441c      	add	r4, r3
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002be0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002bec:	415b      	adcs	r3, r3
 8002bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002c48:	460b      	mov	r3, r1
 8002c4a:	18db      	adds	r3, r3, r3
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4e:	4613      	mov	r3, r2
 8002c50:	eb42 0303 	adc.w	r3, r2, r3
 8002c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002c5e:	f7fd fb2f 	bl	80002c0 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <UART_SetConfig+0x2d4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	@ 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	3332      	adds	r3, #50	@ 0x32
 8002c7a:	4a08      	ldr	r2, [pc, #32]	@ (8002c9c <UART_SetConfig+0x2d4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 0207 	and.w	r2, r3, #7
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4422      	add	r2, r4
 8002c8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c90:	e106      	b.n	8002ea0 <UART_SetConfig+0x4d8>
 8002c92:	bf00      	nop
 8002c94:	40011000 	.word	0x40011000
 8002c98:	40011400 	.word	0x40011400
 8002c9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002caa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002cae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002cb2:	4642      	mov	r2, r8
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	1891      	adds	r1, r2, r2
 8002cb8:	6239      	str	r1, [r7, #32]
 8002cba:	415b      	adcs	r3, r3
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	1854      	adds	r4, r2, r1
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	eb43 0501 	adc.w	r5, r3, r1
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002ce8:	464b      	mov	r3, r9
 8002cea:	eb45 0303 	adc.w	r3, r5, r3
 8002cee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d0e:	4629      	mov	r1, r5
 8002d10:	008b      	lsls	r3, r1, #2
 8002d12:	4621      	mov	r1, r4
 8002d14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d18:	4621      	mov	r1, r4
 8002d1a:	008a      	lsls	r2, r1, #2
 8002d1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d20:	f7fd face 	bl	80002c0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4b60      	ldr	r3, [pc, #384]	@ (8002eac <UART_SetConfig+0x4e4>)
 8002d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	011c      	lsls	r4, r3, #4
 8002d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	1891      	adds	r1, r2, r2
 8002d4a:	61b9      	str	r1, [r7, #24]
 8002d4c:	415b      	adcs	r3, r3
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d54:	4641      	mov	r1, r8
 8002d56:	1851      	adds	r1, r2, r1
 8002d58:	6139      	str	r1, [r7, #16]
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	414b      	adcs	r3, r1
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	00cb      	lsls	r3, r1, #3
 8002d70:	4651      	mov	r1, sl
 8002d72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d76:	4651      	mov	r1, sl
 8002d78:	00ca      	lsls	r2, r1, #3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4642      	mov	r2, r8
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d88:	464b      	mov	r3, r9
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	eb42 0303 	adc.w	r3, r2, r3
 8002d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002dac:	4649      	mov	r1, r9
 8002dae:	008b      	lsls	r3, r1, #2
 8002db0:	4641      	mov	r1, r8
 8002db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002db6:	4641      	mov	r1, r8
 8002db8:	008a      	lsls	r2, r1, #2
 8002dba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002dbe:	f7fd fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4b38      	ldr	r3, [pc, #224]	@ (8002eac <UART_SetConfig+0x4e4>)
 8002dca:	fba3 2301 	umull	r2, r3, r3, r1
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2264      	movs	r2, #100	@ 0x64
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	1acb      	subs	r3, r1, r3
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	3332      	adds	r3, #50	@ 0x32
 8002ddc:	4a33      	ldr	r2, [pc, #204]	@ (8002eac <UART_SetConfig+0x4e4>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002de8:	441c      	add	r4, r3
 8002dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dee:	2200      	movs	r2, #0
 8002df0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002df2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002df4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002df8:	4642      	mov	r2, r8
 8002dfa:	464b      	mov	r3, r9
 8002dfc:	1891      	adds	r1, r2, r2
 8002dfe:	60b9      	str	r1, [r7, #8]
 8002e00:	415b      	adcs	r3, r3
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e08:	4641      	mov	r1, r8
 8002e0a:	1851      	adds	r1, r2, r1
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	4649      	mov	r1, r9
 8002e10:	414b      	adcs	r3, r1
 8002e12:	607b      	str	r3, [r7, #4]
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e20:	4659      	mov	r1, fp
 8002e22:	00cb      	lsls	r3, r1, #3
 8002e24:	4651      	mov	r1, sl
 8002e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e2a:	4651      	mov	r1, sl
 8002e2c:	00ca      	lsls	r2, r1, #3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	4619      	mov	r1, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	4642      	mov	r2, r8
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	eb42 0303 	adc.w	r3, r2, r3
 8002e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	008b      	lsls	r3, r1, #2
 8002e60:	4641      	mov	r1, r8
 8002e62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e66:	4641      	mov	r1, r8
 8002e68:	008a      	lsls	r2, r1, #2
 8002e6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002e6e:	f7fd fa27 	bl	80002c0 <__aeabi_uldivmod>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <UART_SetConfig+0x4e4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3332      	adds	r3, #50	@ 0x32
 8002e8a:	4a08      	ldr	r2, [pc, #32]	@ (8002eac <UART_SetConfig+0x4e4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4422      	add	r2, r4
 8002e9e:	609a      	str	r2, [r3, #8]
}
 8002ea0:	bf00      	nop
 8002ea2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eac:	51eb851f 	.word	0x51eb851f

08002eb0 <siprintf>:
 8002eb0:	b40e      	push	{r1, r2, r3}
 8002eb2:	b500      	push	{lr}
 8002eb4:	b09c      	sub	sp, #112	@ 0x70
 8002eb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8002eb8:	9002      	str	r0, [sp, #8]
 8002eba:	9006      	str	r0, [sp, #24]
 8002ebc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ec0:	4809      	ldr	r0, [pc, #36]	@ (8002ee8 <siprintf+0x38>)
 8002ec2:	9107      	str	r1, [sp, #28]
 8002ec4:	9104      	str	r1, [sp, #16]
 8002ec6:	4909      	ldr	r1, [pc, #36]	@ (8002eec <siprintf+0x3c>)
 8002ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ecc:	9105      	str	r1, [sp, #20]
 8002ece:	6800      	ldr	r0, [r0, #0]
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	a902      	add	r1, sp, #8
 8002ed4:	f000 f98c 	bl	80031f0 <_svfiprintf_r>
 8002ed8:	9b02      	ldr	r3, [sp, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	b01c      	add	sp, #112	@ 0x70
 8002ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ee4:	b003      	add	sp, #12
 8002ee6:	4770      	bx	lr
 8002ee8:	2000000c 	.word	0x2000000c
 8002eec:	ffff0208 	.word	0xffff0208

08002ef0 <__errno>:
 8002ef0:	4b01      	ldr	r3, [pc, #4]	@ (8002ef8 <__errno+0x8>)
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	@ (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	@ (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 fc66 	bl	80037e0 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08003884 	.word	0x08003884
 8002f38:	08003884 	.word	0x08003884
 8002f3c:	08003884 	.word	0x08003884
 8002f40:	08003888 	.word	0x08003888

08002f44 <__retarget_lock_acquire_recursive>:
 8002f44:	4770      	bx	lr

08002f46 <__retarget_lock_release_recursive>:
 8002f46:	4770      	bx	lr

08002f48 <_free_r>:
 8002f48:	b538      	push	{r3, r4, r5, lr}
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	2900      	cmp	r1, #0
 8002f4e:	d041      	beq.n	8002fd4 <_free_r+0x8c>
 8002f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f54:	1f0c      	subs	r4, r1, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bfb8      	it	lt
 8002f5a:	18e4      	addlt	r4, r4, r3
 8002f5c:	f000 f8e0 	bl	8003120 <__malloc_lock>
 8002f60:	4a1d      	ldr	r2, [pc, #116]	@ (8002fd8 <_free_r+0x90>)
 8002f62:	6813      	ldr	r3, [r2, #0]
 8002f64:	b933      	cbnz	r3, 8002f74 <_free_r+0x2c>
 8002f66:	6063      	str	r3, [r4, #4]
 8002f68:	6014      	str	r4, [r2, #0]
 8002f6a:	4628      	mov	r0, r5
 8002f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f70:	f000 b8dc 	b.w	800312c <__malloc_unlock>
 8002f74:	42a3      	cmp	r3, r4
 8002f76:	d908      	bls.n	8002f8a <_free_r+0x42>
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	1821      	adds	r1, r4, r0
 8002f7c:	428b      	cmp	r3, r1
 8002f7e:	bf01      	itttt	eq
 8002f80:	6819      	ldreq	r1, [r3, #0]
 8002f82:	685b      	ldreq	r3, [r3, #4]
 8002f84:	1809      	addeq	r1, r1, r0
 8002f86:	6021      	streq	r1, [r4, #0]
 8002f88:	e7ed      	b.n	8002f66 <_free_r+0x1e>
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	b10b      	cbz	r3, 8002f94 <_free_r+0x4c>
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	d9fa      	bls.n	8002f8a <_free_r+0x42>
 8002f94:	6811      	ldr	r1, [r2, #0]
 8002f96:	1850      	adds	r0, r2, r1
 8002f98:	42a0      	cmp	r0, r4
 8002f9a:	d10b      	bne.n	8002fb4 <_free_r+0x6c>
 8002f9c:	6820      	ldr	r0, [r4, #0]
 8002f9e:	4401      	add	r1, r0
 8002fa0:	1850      	adds	r0, r2, r1
 8002fa2:	4283      	cmp	r3, r0
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	d1e0      	bne.n	8002f6a <_free_r+0x22>
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	6053      	str	r3, [r2, #4]
 8002fae:	4408      	add	r0, r1
 8002fb0:	6010      	str	r0, [r2, #0]
 8002fb2:	e7da      	b.n	8002f6a <_free_r+0x22>
 8002fb4:	d902      	bls.n	8002fbc <_free_r+0x74>
 8002fb6:	230c      	movs	r3, #12
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	e7d6      	b.n	8002f6a <_free_r+0x22>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	1821      	adds	r1, r4, r0
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	bf04      	itt	eq
 8002fc4:	6819      	ldreq	r1, [r3, #0]
 8002fc6:	685b      	ldreq	r3, [r3, #4]
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	bf04      	itt	eq
 8002fcc:	1809      	addeq	r1, r1, r0
 8002fce:	6021      	streq	r1, [r4, #0]
 8002fd0:	6054      	str	r4, [r2, #4]
 8002fd2:	e7ca      	b.n	8002f6a <_free_r+0x22>
 8002fd4:	bd38      	pop	{r3, r4, r5, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000234 	.word	0x20000234

08002fdc <sbrk_aligned>:
 8002fdc:	b570      	push	{r4, r5, r6, lr}
 8002fde:	4e0f      	ldr	r6, [pc, #60]	@ (800301c <sbrk_aligned+0x40>)
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	6831      	ldr	r1, [r6, #0]
 8002fe4:	4605      	mov	r5, r0
 8002fe6:	b911      	cbnz	r1, 8002fee <sbrk_aligned+0x12>
 8002fe8:	f000 fba6 	bl	8003738 <_sbrk_r>
 8002fec:	6030      	str	r0, [r6, #0]
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f000 fba1 	bl	8003738 <_sbrk_r>
 8002ff6:	1c43      	adds	r3, r0, #1
 8002ff8:	d103      	bne.n	8003002 <sbrk_aligned+0x26>
 8002ffa:	f04f 34ff 	mov.w	r4, #4294967295
 8002ffe:	4620      	mov	r0, r4
 8003000:	bd70      	pop	{r4, r5, r6, pc}
 8003002:	1cc4      	adds	r4, r0, #3
 8003004:	f024 0403 	bic.w	r4, r4, #3
 8003008:	42a0      	cmp	r0, r4
 800300a:	d0f8      	beq.n	8002ffe <sbrk_aligned+0x22>
 800300c:	1a21      	subs	r1, r4, r0
 800300e:	4628      	mov	r0, r5
 8003010:	f000 fb92 	bl	8003738 <_sbrk_r>
 8003014:	3001      	adds	r0, #1
 8003016:	d1f2      	bne.n	8002ffe <sbrk_aligned+0x22>
 8003018:	e7ef      	b.n	8002ffa <sbrk_aligned+0x1e>
 800301a:	bf00      	nop
 800301c:	20000230 	.word	0x20000230

08003020 <_malloc_r>:
 8003020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003024:	1ccd      	adds	r5, r1, #3
 8003026:	f025 0503 	bic.w	r5, r5, #3
 800302a:	3508      	adds	r5, #8
 800302c:	2d0c      	cmp	r5, #12
 800302e:	bf38      	it	cc
 8003030:	250c      	movcc	r5, #12
 8003032:	2d00      	cmp	r5, #0
 8003034:	4606      	mov	r6, r0
 8003036:	db01      	blt.n	800303c <_malloc_r+0x1c>
 8003038:	42a9      	cmp	r1, r5
 800303a:	d904      	bls.n	8003046 <_malloc_r+0x26>
 800303c:	230c      	movs	r3, #12
 800303e:	6033      	str	r3, [r6, #0]
 8003040:	2000      	movs	r0, #0
 8003042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800311c <_malloc_r+0xfc>
 800304a:	f000 f869 	bl	8003120 <__malloc_lock>
 800304e:	f8d8 3000 	ldr.w	r3, [r8]
 8003052:	461c      	mov	r4, r3
 8003054:	bb44      	cbnz	r4, 80030a8 <_malloc_r+0x88>
 8003056:	4629      	mov	r1, r5
 8003058:	4630      	mov	r0, r6
 800305a:	f7ff ffbf 	bl	8002fdc <sbrk_aligned>
 800305e:	1c43      	adds	r3, r0, #1
 8003060:	4604      	mov	r4, r0
 8003062:	d158      	bne.n	8003116 <_malloc_r+0xf6>
 8003064:	f8d8 4000 	ldr.w	r4, [r8]
 8003068:	4627      	mov	r7, r4
 800306a:	2f00      	cmp	r7, #0
 800306c:	d143      	bne.n	80030f6 <_malloc_r+0xd6>
 800306e:	2c00      	cmp	r4, #0
 8003070:	d04b      	beq.n	800310a <_malloc_r+0xea>
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	4639      	mov	r1, r7
 8003076:	4630      	mov	r0, r6
 8003078:	eb04 0903 	add.w	r9, r4, r3
 800307c:	f000 fb5c 	bl	8003738 <_sbrk_r>
 8003080:	4581      	cmp	r9, r0
 8003082:	d142      	bne.n	800310a <_malloc_r+0xea>
 8003084:	6821      	ldr	r1, [r4, #0]
 8003086:	1a6d      	subs	r5, r5, r1
 8003088:	4629      	mov	r1, r5
 800308a:	4630      	mov	r0, r6
 800308c:	f7ff ffa6 	bl	8002fdc <sbrk_aligned>
 8003090:	3001      	adds	r0, #1
 8003092:	d03a      	beq.n	800310a <_malloc_r+0xea>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	442b      	add	r3, r5
 8003098:	6023      	str	r3, [r4, #0]
 800309a:	f8d8 3000 	ldr.w	r3, [r8]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	bb62      	cbnz	r2, 80030fc <_malloc_r+0xdc>
 80030a2:	f8c8 7000 	str.w	r7, [r8]
 80030a6:	e00f      	b.n	80030c8 <_malloc_r+0xa8>
 80030a8:	6822      	ldr	r2, [r4, #0]
 80030aa:	1b52      	subs	r2, r2, r5
 80030ac:	d420      	bmi.n	80030f0 <_malloc_r+0xd0>
 80030ae:	2a0b      	cmp	r2, #11
 80030b0:	d917      	bls.n	80030e2 <_malloc_r+0xc2>
 80030b2:	1961      	adds	r1, r4, r5
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	6025      	str	r5, [r4, #0]
 80030b8:	bf18      	it	ne
 80030ba:	6059      	strne	r1, [r3, #4]
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	bf08      	it	eq
 80030c0:	f8c8 1000 	streq.w	r1, [r8]
 80030c4:	5162      	str	r2, [r4, r5]
 80030c6:	604b      	str	r3, [r1, #4]
 80030c8:	4630      	mov	r0, r6
 80030ca:	f000 f82f 	bl	800312c <__malloc_unlock>
 80030ce:	f104 000b 	add.w	r0, r4, #11
 80030d2:	1d23      	adds	r3, r4, #4
 80030d4:	f020 0007 	bic.w	r0, r0, #7
 80030d8:	1ac2      	subs	r2, r0, r3
 80030da:	bf1c      	itt	ne
 80030dc:	1a1b      	subne	r3, r3, r0
 80030de:	50a3      	strne	r3, [r4, r2]
 80030e0:	e7af      	b.n	8003042 <_malloc_r+0x22>
 80030e2:	6862      	ldr	r2, [r4, #4]
 80030e4:	42a3      	cmp	r3, r4
 80030e6:	bf0c      	ite	eq
 80030e8:	f8c8 2000 	streq.w	r2, [r8]
 80030ec:	605a      	strne	r2, [r3, #4]
 80030ee:	e7eb      	b.n	80030c8 <_malloc_r+0xa8>
 80030f0:	4623      	mov	r3, r4
 80030f2:	6864      	ldr	r4, [r4, #4]
 80030f4:	e7ae      	b.n	8003054 <_malloc_r+0x34>
 80030f6:	463c      	mov	r4, r7
 80030f8:	687f      	ldr	r7, [r7, #4]
 80030fa:	e7b6      	b.n	800306a <_malloc_r+0x4a>
 80030fc:	461a      	mov	r2, r3
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	42a3      	cmp	r3, r4
 8003102:	d1fb      	bne.n	80030fc <_malloc_r+0xdc>
 8003104:	2300      	movs	r3, #0
 8003106:	6053      	str	r3, [r2, #4]
 8003108:	e7de      	b.n	80030c8 <_malloc_r+0xa8>
 800310a:	230c      	movs	r3, #12
 800310c:	6033      	str	r3, [r6, #0]
 800310e:	4630      	mov	r0, r6
 8003110:	f000 f80c 	bl	800312c <__malloc_unlock>
 8003114:	e794      	b.n	8003040 <_malloc_r+0x20>
 8003116:	6005      	str	r5, [r0, #0]
 8003118:	e7d6      	b.n	80030c8 <_malloc_r+0xa8>
 800311a:	bf00      	nop
 800311c:	20000234 	.word	0x20000234

08003120 <__malloc_lock>:
 8003120:	4801      	ldr	r0, [pc, #4]	@ (8003128 <__malloc_lock+0x8>)
 8003122:	f7ff bf0f 	b.w	8002f44 <__retarget_lock_acquire_recursive>
 8003126:	bf00      	nop
 8003128:	2000022c 	.word	0x2000022c

0800312c <__malloc_unlock>:
 800312c:	4801      	ldr	r0, [pc, #4]	@ (8003134 <__malloc_unlock+0x8>)
 800312e:	f7ff bf0a 	b.w	8002f46 <__retarget_lock_release_recursive>
 8003132:	bf00      	nop
 8003134:	2000022c 	.word	0x2000022c

08003138 <__ssputs_r>:
 8003138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	688e      	ldr	r6, [r1, #8]
 800313e:	461f      	mov	r7, r3
 8003140:	42be      	cmp	r6, r7
 8003142:	680b      	ldr	r3, [r1, #0]
 8003144:	4682      	mov	sl, r0
 8003146:	460c      	mov	r4, r1
 8003148:	4690      	mov	r8, r2
 800314a:	d82d      	bhi.n	80031a8 <__ssputs_r+0x70>
 800314c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003150:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003154:	d026      	beq.n	80031a4 <__ssputs_r+0x6c>
 8003156:	6965      	ldr	r5, [r4, #20]
 8003158:	6909      	ldr	r1, [r1, #16]
 800315a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800315e:	eba3 0901 	sub.w	r9, r3, r1
 8003162:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003166:	1c7b      	adds	r3, r7, #1
 8003168:	444b      	add	r3, r9
 800316a:	106d      	asrs	r5, r5, #1
 800316c:	429d      	cmp	r5, r3
 800316e:	bf38      	it	cc
 8003170:	461d      	movcc	r5, r3
 8003172:	0553      	lsls	r3, r2, #21
 8003174:	d527      	bpl.n	80031c6 <__ssputs_r+0x8e>
 8003176:	4629      	mov	r1, r5
 8003178:	f7ff ff52 	bl	8003020 <_malloc_r>
 800317c:	4606      	mov	r6, r0
 800317e:	b360      	cbz	r0, 80031da <__ssputs_r+0xa2>
 8003180:	6921      	ldr	r1, [r4, #16]
 8003182:	464a      	mov	r2, r9
 8003184:	f000 fae8 	bl	8003758 <memcpy>
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800318e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003192:	81a3      	strh	r3, [r4, #12]
 8003194:	6126      	str	r6, [r4, #16]
 8003196:	6165      	str	r5, [r4, #20]
 8003198:	444e      	add	r6, r9
 800319a:	eba5 0509 	sub.w	r5, r5, r9
 800319e:	6026      	str	r6, [r4, #0]
 80031a0:	60a5      	str	r5, [r4, #8]
 80031a2:	463e      	mov	r6, r7
 80031a4:	42be      	cmp	r6, r7
 80031a6:	d900      	bls.n	80031aa <__ssputs_r+0x72>
 80031a8:	463e      	mov	r6, r7
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	4632      	mov	r2, r6
 80031ae:	4641      	mov	r1, r8
 80031b0:	f000 faa8 	bl	8003704 <memmove>
 80031b4:	68a3      	ldr	r3, [r4, #8]
 80031b6:	1b9b      	subs	r3, r3, r6
 80031b8:	60a3      	str	r3, [r4, #8]
 80031ba:	6823      	ldr	r3, [r4, #0]
 80031bc:	4433      	add	r3, r6
 80031be:	6023      	str	r3, [r4, #0]
 80031c0:	2000      	movs	r0, #0
 80031c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c6:	462a      	mov	r2, r5
 80031c8:	f000 fad4 	bl	8003774 <_realloc_r>
 80031cc:	4606      	mov	r6, r0
 80031ce:	2800      	cmp	r0, #0
 80031d0:	d1e0      	bne.n	8003194 <__ssputs_r+0x5c>
 80031d2:	6921      	ldr	r1, [r4, #16]
 80031d4:	4650      	mov	r0, sl
 80031d6:	f7ff feb7 	bl	8002f48 <_free_r>
 80031da:	230c      	movs	r3, #12
 80031dc:	f8ca 3000 	str.w	r3, [sl]
 80031e0:	89a3      	ldrh	r3, [r4, #12]
 80031e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031e6:	81a3      	strh	r3, [r4, #12]
 80031e8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ec:	e7e9      	b.n	80031c2 <__ssputs_r+0x8a>
	...

080031f0 <_svfiprintf_r>:
 80031f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f4:	4698      	mov	r8, r3
 80031f6:	898b      	ldrh	r3, [r1, #12]
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	b09d      	sub	sp, #116	@ 0x74
 80031fc:	4607      	mov	r7, r0
 80031fe:	460d      	mov	r5, r1
 8003200:	4614      	mov	r4, r2
 8003202:	d510      	bpl.n	8003226 <_svfiprintf_r+0x36>
 8003204:	690b      	ldr	r3, [r1, #16]
 8003206:	b973      	cbnz	r3, 8003226 <_svfiprintf_r+0x36>
 8003208:	2140      	movs	r1, #64	@ 0x40
 800320a:	f7ff ff09 	bl	8003020 <_malloc_r>
 800320e:	6028      	str	r0, [r5, #0]
 8003210:	6128      	str	r0, [r5, #16]
 8003212:	b930      	cbnz	r0, 8003222 <_svfiprintf_r+0x32>
 8003214:	230c      	movs	r3, #12
 8003216:	603b      	str	r3, [r7, #0]
 8003218:	f04f 30ff 	mov.w	r0, #4294967295
 800321c:	b01d      	add	sp, #116	@ 0x74
 800321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003222:	2340      	movs	r3, #64	@ 0x40
 8003224:	616b      	str	r3, [r5, #20]
 8003226:	2300      	movs	r3, #0
 8003228:	9309      	str	r3, [sp, #36]	@ 0x24
 800322a:	2320      	movs	r3, #32
 800322c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003230:	f8cd 800c 	str.w	r8, [sp, #12]
 8003234:	2330      	movs	r3, #48	@ 0x30
 8003236:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80033d4 <_svfiprintf_r+0x1e4>
 800323a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800323e:	f04f 0901 	mov.w	r9, #1
 8003242:	4623      	mov	r3, r4
 8003244:	469a      	mov	sl, r3
 8003246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800324a:	b10a      	cbz	r2, 8003250 <_svfiprintf_r+0x60>
 800324c:	2a25      	cmp	r2, #37	@ 0x25
 800324e:	d1f9      	bne.n	8003244 <_svfiprintf_r+0x54>
 8003250:	ebba 0b04 	subs.w	fp, sl, r4
 8003254:	d00b      	beq.n	800326e <_svfiprintf_r+0x7e>
 8003256:	465b      	mov	r3, fp
 8003258:	4622      	mov	r2, r4
 800325a:	4629      	mov	r1, r5
 800325c:	4638      	mov	r0, r7
 800325e:	f7ff ff6b 	bl	8003138 <__ssputs_r>
 8003262:	3001      	adds	r0, #1
 8003264:	f000 80a7 	beq.w	80033b6 <_svfiprintf_r+0x1c6>
 8003268:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800326a:	445a      	add	r2, fp
 800326c:	9209      	str	r2, [sp, #36]	@ 0x24
 800326e:	f89a 3000 	ldrb.w	r3, [sl]
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 809f 	beq.w	80033b6 <_svfiprintf_r+0x1c6>
 8003278:	2300      	movs	r3, #0
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003282:	f10a 0a01 	add.w	sl, sl, #1
 8003286:	9304      	str	r3, [sp, #16]
 8003288:	9307      	str	r3, [sp, #28]
 800328a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800328e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003290:	4654      	mov	r4, sl
 8003292:	2205      	movs	r2, #5
 8003294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003298:	484e      	ldr	r0, [pc, #312]	@ (80033d4 <_svfiprintf_r+0x1e4>)
 800329a:	f7fc ffc1 	bl	8000220 <memchr>
 800329e:	9a04      	ldr	r2, [sp, #16]
 80032a0:	b9d8      	cbnz	r0, 80032da <_svfiprintf_r+0xea>
 80032a2:	06d0      	lsls	r0, r2, #27
 80032a4:	bf44      	itt	mi
 80032a6:	2320      	movmi	r3, #32
 80032a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ac:	0711      	lsls	r1, r2, #28
 80032ae:	bf44      	itt	mi
 80032b0:	232b      	movmi	r3, #43	@ 0x2b
 80032b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032b6:	f89a 3000 	ldrb.w	r3, [sl]
 80032ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80032bc:	d015      	beq.n	80032ea <_svfiprintf_r+0xfa>
 80032be:	9a07      	ldr	r2, [sp, #28]
 80032c0:	4654      	mov	r4, sl
 80032c2:	2000      	movs	r0, #0
 80032c4:	f04f 0c0a 	mov.w	ip, #10
 80032c8:	4621      	mov	r1, r4
 80032ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032ce:	3b30      	subs	r3, #48	@ 0x30
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d94b      	bls.n	800336c <_svfiprintf_r+0x17c>
 80032d4:	b1b0      	cbz	r0, 8003304 <_svfiprintf_r+0x114>
 80032d6:	9207      	str	r2, [sp, #28]
 80032d8:	e014      	b.n	8003304 <_svfiprintf_r+0x114>
 80032da:	eba0 0308 	sub.w	r3, r0, r8
 80032de:	fa09 f303 	lsl.w	r3, r9, r3
 80032e2:	4313      	orrs	r3, r2
 80032e4:	9304      	str	r3, [sp, #16]
 80032e6:	46a2      	mov	sl, r4
 80032e8:	e7d2      	b.n	8003290 <_svfiprintf_r+0xa0>
 80032ea:	9b03      	ldr	r3, [sp, #12]
 80032ec:	1d19      	adds	r1, r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	9103      	str	r1, [sp, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	bfbb      	ittet	lt
 80032f6:	425b      	neglt	r3, r3
 80032f8:	f042 0202 	orrlt.w	r2, r2, #2
 80032fc:	9307      	strge	r3, [sp, #28]
 80032fe:	9307      	strlt	r3, [sp, #28]
 8003300:	bfb8      	it	lt
 8003302:	9204      	strlt	r2, [sp, #16]
 8003304:	7823      	ldrb	r3, [r4, #0]
 8003306:	2b2e      	cmp	r3, #46	@ 0x2e
 8003308:	d10a      	bne.n	8003320 <_svfiprintf_r+0x130>
 800330a:	7863      	ldrb	r3, [r4, #1]
 800330c:	2b2a      	cmp	r3, #42	@ 0x2a
 800330e:	d132      	bne.n	8003376 <_svfiprintf_r+0x186>
 8003310:	9b03      	ldr	r3, [sp, #12]
 8003312:	1d1a      	adds	r2, r3, #4
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9203      	str	r2, [sp, #12]
 8003318:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800331c:	3402      	adds	r4, #2
 800331e:	9305      	str	r3, [sp, #20]
 8003320:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80033e4 <_svfiprintf_r+0x1f4>
 8003324:	7821      	ldrb	r1, [r4, #0]
 8003326:	2203      	movs	r2, #3
 8003328:	4650      	mov	r0, sl
 800332a:	f7fc ff79 	bl	8000220 <memchr>
 800332e:	b138      	cbz	r0, 8003340 <_svfiprintf_r+0x150>
 8003330:	9b04      	ldr	r3, [sp, #16]
 8003332:	eba0 000a 	sub.w	r0, r0, sl
 8003336:	2240      	movs	r2, #64	@ 0x40
 8003338:	4082      	lsls	r2, r0
 800333a:	4313      	orrs	r3, r2
 800333c:	3401      	adds	r4, #1
 800333e:	9304      	str	r3, [sp, #16]
 8003340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003344:	4824      	ldr	r0, [pc, #144]	@ (80033d8 <_svfiprintf_r+0x1e8>)
 8003346:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800334a:	2206      	movs	r2, #6
 800334c:	f7fc ff68 	bl	8000220 <memchr>
 8003350:	2800      	cmp	r0, #0
 8003352:	d036      	beq.n	80033c2 <_svfiprintf_r+0x1d2>
 8003354:	4b21      	ldr	r3, [pc, #132]	@ (80033dc <_svfiprintf_r+0x1ec>)
 8003356:	bb1b      	cbnz	r3, 80033a0 <_svfiprintf_r+0x1b0>
 8003358:	9b03      	ldr	r3, [sp, #12]
 800335a:	3307      	adds	r3, #7
 800335c:	f023 0307 	bic.w	r3, r3, #7
 8003360:	3308      	adds	r3, #8
 8003362:	9303      	str	r3, [sp, #12]
 8003364:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003366:	4433      	add	r3, r6
 8003368:	9309      	str	r3, [sp, #36]	@ 0x24
 800336a:	e76a      	b.n	8003242 <_svfiprintf_r+0x52>
 800336c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003370:	460c      	mov	r4, r1
 8003372:	2001      	movs	r0, #1
 8003374:	e7a8      	b.n	80032c8 <_svfiprintf_r+0xd8>
 8003376:	2300      	movs	r3, #0
 8003378:	3401      	adds	r4, #1
 800337a:	9305      	str	r3, [sp, #20]
 800337c:	4619      	mov	r1, r3
 800337e:	f04f 0c0a 	mov.w	ip, #10
 8003382:	4620      	mov	r0, r4
 8003384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003388:	3a30      	subs	r2, #48	@ 0x30
 800338a:	2a09      	cmp	r2, #9
 800338c:	d903      	bls.n	8003396 <_svfiprintf_r+0x1a6>
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0c6      	beq.n	8003320 <_svfiprintf_r+0x130>
 8003392:	9105      	str	r1, [sp, #20]
 8003394:	e7c4      	b.n	8003320 <_svfiprintf_r+0x130>
 8003396:	fb0c 2101 	mla	r1, ip, r1, r2
 800339a:	4604      	mov	r4, r0
 800339c:	2301      	movs	r3, #1
 800339e:	e7f0      	b.n	8003382 <_svfiprintf_r+0x192>
 80033a0:	ab03      	add	r3, sp, #12
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	462a      	mov	r2, r5
 80033a6:	4b0e      	ldr	r3, [pc, #56]	@ (80033e0 <_svfiprintf_r+0x1f0>)
 80033a8:	a904      	add	r1, sp, #16
 80033aa:	4638      	mov	r0, r7
 80033ac:	f3af 8000 	nop.w
 80033b0:	1c42      	adds	r2, r0, #1
 80033b2:	4606      	mov	r6, r0
 80033b4:	d1d6      	bne.n	8003364 <_svfiprintf_r+0x174>
 80033b6:	89ab      	ldrh	r3, [r5, #12]
 80033b8:	065b      	lsls	r3, r3, #25
 80033ba:	f53f af2d 	bmi.w	8003218 <_svfiprintf_r+0x28>
 80033be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033c0:	e72c      	b.n	800321c <_svfiprintf_r+0x2c>
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <_svfiprintf_r+0x1f0>)
 80033ca:	a904      	add	r1, sp, #16
 80033cc:	4638      	mov	r0, r7
 80033ce:	f000 f879 	bl	80034c4 <_printf_i>
 80033d2:	e7ed      	b.n	80033b0 <_svfiprintf_r+0x1c0>
 80033d4:	08003848 	.word	0x08003848
 80033d8:	08003852 	.word	0x08003852
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003139 	.word	0x08003139
 80033e4:	0800384e 	.word	0x0800384e

080033e8 <_printf_common>:
 80033e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ec:	4616      	mov	r6, r2
 80033ee:	4698      	mov	r8, r3
 80033f0:	688a      	ldr	r2, [r1, #8]
 80033f2:	690b      	ldr	r3, [r1, #16]
 80033f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bfb8      	it	lt
 80033fc:	4613      	movlt	r3, r2
 80033fe:	6033      	str	r3, [r6, #0]
 8003400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003404:	4607      	mov	r7, r0
 8003406:	460c      	mov	r4, r1
 8003408:	b10a      	cbz	r2, 800340e <_printf_common+0x26>
 800340a:	3301      	adds	r3, #1
 800340c:	6033      	str	r3, [r6, #0]
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	0699      	lsls	r1, r3, #26
 8003412:	bf42      	ittt	mi
 8003414:	6833      	ldrmi	r3, [r6, #0]
 8003416:	3302      	addmi	r3, #2
 8003418:	6033      	strmi	r3, [r6, #0]
 800341a:	6825      	ldr	r5, [r4, #0]
 800341c:	f015 0506 	ands.w	r5, r5, #6
 8003420:	d106      	bne.n	8003430 <_printf_common+0x48>
 8003422:	f104 0a19 	add.w	sl, r4, #25
 8003426:	68e3      	ldr	r3, [r4, #12]
 8003428:	6832      	ldr	r2, [r6, #0]
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	42ab      	cmp	r3, r5
 800342e:	dc26      	bgt.n	800347e <_printf_common+0x96>
 8003430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003434:	6822      	ldr	r2, [r4, #0]
 8003436:	3b00      	subs	r3, #0
 8003438:	bf18      	it	ne
 800343a:	2301      	movne	r3, #1
 800343c:	0692      	lsls	r2, r2, #26
 800343e:	d42b      	bmi.n	8003498 <_printf_common+0xb0>
 8003440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003444:	4641      	mov	r1, r8
 8003446:	4638      	mov	r0, r7
 8003448:	47c8      	blx	r9
 800344a:	3001      	adds	r0, #1
 800344c:	d01e      	beq.n	800348c <_printf_common+0xa4>
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	6922      	ldr	r2, [r4, #16]
 8003452:	f003 0306 	and.w	r3, r3, #6
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf02      	ittt	eq
 800345a:	68e5      	ldreq	r5, [r4, #12]
 800345c:	6833      	ldreq	r3, [r6, #0]
 800345e:	1aed      	subeq	r5, r5, r3
 8003460:	68a3      	ldr	r3, [r4, #8]
 8003462:	bf0c      	ite	eq
 8003464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003468:	2500      	movne	r5, #0
 800346a:	4293      	cmp	r3, r2
 800346c:	bfc4      	itt	gt
 800346e:	1a9b      	subgt	r3, r3, r2
 8003470:	18ed      	addgt	r5, r5, r3
 8003472:	2600      	movs	r6, #0
 8003474:	341a      	adds	r4, #26
 8003476:	42b5      	cmp	r5, r6
 8003478:	d11a      	bne.n	80034b0 <_printf_common+0xc8>
 800347a:	2000      	movs	r0, #0
 800347c:	e008      	b.n	8003490 <_printf_common+0xa8>
 800347e:	2301      	movs	r3, #1
 8003480:	4652      	mov	r2, sl
 8003482:	4641      	mov	r1, r8
 8003484:	4638      	mov	r0, r7
 8003486:	47c8      	blx	r9
 8003488:	3001      	adds	r0, #1
 800348a:	d103      	bne.n	8003494 <_printf_common+0xac>
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003494:	3501      	adds	r5, #1
 8003496:	e7c6      	b.n	8003426 <_printf_common+0x3e>
 8003498:	18e1      	adds	r1, r4, r3
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	2030      	movs	r0, #48	@ 0x30
 800349e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034a2:	4422      	add	r2, r4
 80034a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034ac:	3302      	adds	r3, #2
 80034ae:	e7c7      	b.n	8003440 <_printf_common+0x58>
 80034b0:	2301      	movs	r3, #1
 80034b2:	4622      	mov	r2, r4
 80034b4:	4641      	mov	r1, r8
 80034b6:	4638      	mov	r0, r7
 80034b8:	47c8      	blx	r9
 80034ba:	3001      	adds	r0, #1
 80034bc:	d0e6      	beq.n	800348c <_printf_common+0xa4>
 80034be:	3601      	adds	r6, #1
 80034c0:	e7d9      	b.n	8003476 <_printf_common+0x8e>
	...

080034c4 <_printf_i>:
 80034c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	7e0f      	ldrb	r7, [r1, #24]
 80034ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80034cc:	2f78      	cmp	r7, #120	@ 0x78
 80034ce:	4691      	mov	r9, r2
 80034d0:	4680      	mov	r8, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	469a      	mov	sl, r3
 80034d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80034da:	d807      	bhi.n	80034ec <_printf_i+0x28>
 80034dc:	2f62      	cmp	r7, #98	@ 0x62
 80034de:	d80a      	bhi.n	80034f6 <_printf_i+0x32>
 80034e0:	2f00      	cmp	r7, #0
 80034e2:	f000 80d2 	beq.w	800368a <_printf_i+0x1c6>
 80034e6:	2f58      	cmp	r7, #88	@ 0x58
 80034e8:	f000 80b9 	beq.w	800365e <_printf_i+0x19a>
 80034ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80034f4:	e03a      	b.n	800356c <_printf_i+0xa8>
 80034f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80034fa:	2b15      	cmp	r3, #21
 80034fc:	d8f6      	bhi.n	80034ec <_printf_i+0x28>
 80034fe:	a101      	add	r1, pc, #4	@ (adr r1, 8003504 <_printf_i+0x40>)
 8003500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003504:	0800355d 	.word	0x0800355d
 8003508:	08003571 	.word	0x08003571
 800350c:	080034ed 	.word	0x080034ed
 8003510:	080034ed 	.word	0x080034ed
 8003514:	080034ed 	.word	0x080034ed
 8003518:	080034ed 	.word	0x080034ed
 800351c:	08003571 	.word	0x08003571
 8003520:	080034ed 	.word	0x080034ed
 8003524:	080034ed 	.word	0x080034ed
 8003528:	080034ed 	.word	0x080034ed
 800352c:	080034ed 	.word	0x080034ed
 8003530:	08003671 	.word	0x08003671
 8003534:	0800359b 	.word	0x0800359b
 8003538:	0800362b 	.word	0x0800362b
 800353c:	080034ed 	.word	0x080034ed
 8003540:	080034ed 	.word	0x080034ed
 8003544:	08003693 	.word	0x08003693
 8003548:	080034ed 	.word	0x080034ed
 800354c:	0800359b 	.word	0x0800359b
 8003550:	080034ed 	.word	0x080034ed
 8003554:	080034ed 	.word	0x080034ed
 8003558:	08003633 	.word	0x08003633
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6032      	str	r2, [r6, #0]
 8003564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800356c:	2301      	movs	r3, #1
 800356e:	e09d      	b.n	80036ac <_printf_i+0x1e8>
 8003570:	6833      	ldr	r3, [r6, #0]
 8003572:	6820      	ldr	r0, [r4, #0]
 8003574:	1d19      	adds	r1, r3, #4
 8003576:	6031      	str	r1, [r6, #0]
 8003578:	0606      	lsls	r6, r0, #24
 800357a:	d501      	bpl.n	8003580 <_printf_i+0xbc>
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	e003      	b.n	8003588 <_printf_i+0xc4>
 8003580:	0645      	lsls	r5, r0, #25
 8003582:	d5fb      	bpl.n	800357c <_printf_i+0xb8>
 8003584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003588:	2d00      	cmp	r5, #0
 800358a:	da03      	bge.n	8003594 <_printf_i+0xd0>
 800358c:	232d      	movs	r3, #45	@ 0x2d
 800358e:	426d      	negs	r5, r5
 8003590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003594:	4859      	ldr	r0, [pc, #356]	@ (80036fc <_printf_i+0x238>)
 8003596:	230a      	movs	r3, #10
 8003598:	e011      	b.n	80035be <_printf_i+0xfa>
 800359a:	6821      	ldr	r1, [r4, #0]
 800359c:	6833      	ldr	r3, [r6, #0]
 800359e:	0608      	lsls	r0, r1, #24
 80035a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80035a4:	d402      	bmi.n	80035ac <_printf_i+0xe8>
 80035a6:	0649      	lsls	r1, r1, #25
 80035a8:	bf48      	it	mi
 80035aa:	b2ad      	uxthmi	r5, r5
 80035ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ae:	4853      	ldr	r0, [pc, #332]	@ (80036fc <_printf_i+0x238>)
 80035b0:	6033      	str	r3, [r6, #0]
 80035b2:	bf14      	ite	ne
 80035b4:	230a      	movne	r3, #10
 80035b6:	2308      	moveq	r3, #8
 80035b8:	2100      	movs	r1, #0
 80035ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035be:	6866      	ldr	r6, [r4, #4]
 80035c0:	60a6      	str	r6, [r4, #8]
 80035c2:	2e00      	cmp	r6, #0
 80035c4:	bfa2      	ittt	ge
 80035c6:	6821      	ldrge	r1, [r4, #0]
 80035c8:	f021 0104 	bicge.w	r1, r1, #4
 80035cc:	6021      	strge	r1, [r4, #0]
 80035ce:	b90d      	cbnz	r5, 80035d4 <_printf_i+0x110>
 80035d0:	2e00      	cmp	r6, #0
 80035d2:	d04b      	beq.n	800366c <_printf_i+0x1a8>
 80035d4:	4616      	mov	r6, r2
 80035d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80035da:	fb03 5711 	mls	r7, r3, r1, r5
 80035de:	5dc7      	ldrb	r7, [r0, r7]
 80035e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80035e4:	462f      	mov	r7, r5
 80035e6:	42bb      	cmp	r3, r7
 80035e8:	460d      	mov	r5, r1
 80035ea:	d9f4      	bls.n	80035d6 <_printf_i+0x112>
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d10b      	bne.n	8003608 <_printf_i+0x144>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	07df      	lsls	r7, r3, #31
 80035f4:	d508      	bpl.n	8003608 <_printf_i+0x144>
 80035f6:	6923      	ldr	r3, [r4, #16]
 80035f8:	6861      	ldr	r1, [r4, #4]
 80035fa:	4299      	cmp	r1, r3
 80035fc:	bfde      	ittt	le
 80035fe:	2330      	movle	r3, #48	@ 0x30
 8003600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003608:	1b92      	subs	r2, r2, r6
 800360a:	6122      	str	r2, [r4, #16]
 800360c:	f8cd a000 	str.w	sl, [sp]
 8003610:	464b      	mov	r3, r9
 8003612:	aa03      	add	r2, sp, #12
 8003614:	4621      	mov	r1, r4
 8003616:	4640      	mov	r0, r8
 8003618:	f7ff fee6 	bl	80033e8 <_printf_common>
 800361c:	3001      	adds	r0, #1
 800361e:	d14a      	bne.n	80036b6 <_printf_i+0x1f2>
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	b004      	add	sp, #16
 8003626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	4833      	ldr	r0, [pc, #204]	@ (8003700 <_printf_i+0x23c>)
 8003634:	2778      	movs	r7, #120	@ 0x78
 8003636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	6831      	ldr	r1, [r6, #0]
 800363e:	061f      	lsls	r7, r3, #24
 8003640:	f851 5b04 	ldr.w	r5, [r1], #4
 8003644:	d402      	bmi.n	800364c <_printf_i+0x188>
 8003646:	065f      	lsls	r7, r3, #25
 8003648:	bf48      	it	mi
 800364a:	b2ad      	uxthmi	r5, r5
 800364c:	6031      	str	r1, [r6, #0]
 800364e:	07d9      	lsls	r1, r3, #31
 8003650:	bf44      	itt	mi
 8003652:	f043 0320 	orrmi.w	r3, r3, #32
 8003656:	6023      	strmi	r3, [r4, #0]
 8003658:	b11d      	cbz	r5, 8003662 <_printf_i+0x19e>
 800365a:	2310      	movs	r3, #16
 800365c:	e7ac      	b.n	80035b8 <_printf_i+0xf4>
 800365e:	4827      	ldr	r0, [pc, #156]	@ (80036fc <_printf_i+0x238>)
 8003660:	e7e9      	b.n	8003636 <_printf_i+0x172>
 8003662:	6823      	ldr	r3, [r4, #0]
 8003664:	f023 0320 	bic.w	r3, r3, #32
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	e7f6      	b.n	800365a <_printf_i+0x196>
 800366c:	4616      	mov	r6, r2
 800366e:	e7bd      	b.n	80035ec <_printf_i+0x128>
 8003670:	6833      	ldr	r3, [r6, #0]
 8003672:	6825      	ldr	r5, [r4, #0]
 8003674:	6961      	ldr	r1, [r4, #20]
 8003676:	1d18      	adds	r0, r3, #4
 8003678:	6030      	str	r0, [r6, #0]
 800367a:	062e      	lsls	r6, r5, #24
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	d501      	bpl.n	8003684 <_printf_i+0x1c0>
 8003680:	6019      	str	r1, [r3, #0]
 8003682:	e002      	b.n	800368a <_printf_i+0x1c6>
 8003684:	0668      	lsls	r0, r5, #25
 8003686:	d5fb      	bpl.n	8003680 <_printf_i+0x1bc>
 8003688:	8019      	strh	r1, [r3, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	6123      	str	r3, [r4, #16]
 800368e:	4616      	mov	r6, r2
 8003690:	e7bc      	b.n	800360c <_printf_i+0x148>
 8003692:	6833      	ldr	r3, [r6, #0]
 8003694:	1d1a      	adds	r2, r3, #4
 8003696:	6032      	str	r2, [r6, #0]
 8003698:	681e      	ldr	r6, [r3, #0]
 800369a:	6862      	ldr	r2, [r4, #4]
 800369c:	2100      	movs	r1, #0
 800369e:	4630      	mov	r0, r6
 80036a0:	f7fc fdbe 	bl	8000220 <memchr>
 80036a4:	b108      	cbz	r0, 80036aa <_printf_i+0x1e6>
 80036a6:	1b80      	subs	r0, r0, r6
 80036a8:	6060      	str	r0, [r4, #4]
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	6123      	str	r3, [r4, #16]
 80036ae:	2300      	movs	r3, #0
 80036b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036b4:	e7aa      	b.n	800360c <_printf_i+0x148>
 80036b6:	6923      	ldr	r3, [r4, #16]
 80036b8:	4632      	mov	r2, r6
 80036ba:	4649      	mov	r1, r9
 80036bc:	4640      	mov	r0, r8
 80036be:	47d0      	blx	sl
 80036c0:	3001      	adds	r0, #1
 80036c2:	d0ad      	beq.n	8003620 <_printf_i+0x15c>
 80036c4:	6823      	ldr	r3, [r4, #0]
 80036c6:	079b      	lsls	r3, r3, #30
 80036c8:	d413      	bmi.n	80036f2 <_printf_i+0x22e>
 80036ca:	68e0      	ldr	r0, [r4, #12]
 80036cc:	9b03      	ldr	r3, [sp, #12]
 80036ce:	4298      	cmp	r0, r3
 80036d0:	bfb8      	it	lt
 80036d2:	4618      	movlt	r0, r3
 80036d4:	e7a6      	b.n	8003624 <_printf_i+0x160>
 80036d6:	2301      	movs	r3, #1
 80036d8:	4632      	mov	r2, r6
 80036da:	4649      	mov	r1, r9
 80036dc:	4640      	mov	r0, r8
 80036de:	47d0      	blx	sl
 80036e0:	3001      	adds	r0, #1
 80036e2:	d09d      	beq.n	8003620 <_printf_i+0x15c>
 80036e4:	3501      	adds	r5, #1
 80036e6:	68e3      	ldr	r3, [r4, #12]
 80036e8:	9903      	ldr	r1, [sp, #12]
 80036ea:	1a5b      	subs	r3, r3, r1
 80036ec:	42ab      	cmp	r3, r5
 80036ee:	dcf2      	bgt.n	80036d6 <_printf_i+0x212>
 80036f0:	e7eb      	b.n	80036ca <_printf_i+0x206>
 80036f2:	2500      	movs	r5, #0
 80036f4:	f104 0619 	add.w	r6, r4, #25
 80036f8:	e7f5      	b.n	80036e6 <_printf_i+0x222>
 80036fa:	bf00      	nop
 80036fc:	08003859 	.word	0x08003859
 8003700:	0800386a 	.word	0x0800386a

08003704 <memmove>:
 8003704:	4288      	cmp	r0, r1
 8003706:	b510      	push	{r4, lr}
 8003708:	eb01 0402 	add.w	r4, r1, r2
 800370c:	d902      	bls.n	8003714 <memmove+0x10>
 800370e:	4284      	cmp	r4, r0
 8003710:	4623      	mov	r3, r4
 8003712:	d807      	bhi.n	8003724 <memmove+0x20>
 8003714:	1e43      	subs	r3, r0, #1
 8003716:	42a1      	cmp	r1, r4
 8003718:	d008      	beq.n	800372c <memmove+0x28>
 800371a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800371e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003722:	e7f8      	b.n	8003716 <memmove+0x12>
 8003724:	4402      	add	r2, r0
 8003726:	4601      	mov	r1, r0
 8003728:	428a      	cmp	r2, r1
 800372a:	d100      	bne.n	800372e <memmove+0x2a>
 800372c:	bd10      	pop	{r4, pc}
 800372e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003736:	e7f7      	b.n	8003728 <memmove+0x24>

08003738 <_sbrk_r>:
 8003738:	b538      	push	{r3, r4, r5, lr}
 800373a:	4d06      	ldr	r5, [pc, #24]	@ (8003754 <_sbrk_r+0x1c>)
 800373c:	2300      	movs	r3, #0
 800373e:	4604      	mov	r4, r0
 8003740:	4608      	mov	r0, r1
 8003742:	602b      	str	r3, [r5, #0]
 8003744:	f7fd f9ae 	bl	8000aa4 <_sbrk>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d102      	bne.n	8003752 <_sbrk_r+0x1a>
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	b103      	cbz	r3, 8003752 <_sbrk_r+0x1a>
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	bd38      	pop	{r3, r4, r5, pc}
 8003754:	20000228 	.word	0x20000228

08003758 <memcpy>:
 8003758:	440a      	add	r2, r1
 800375a:	4291      	cmp	r1, r2
 800375c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003760:	d100      	bne.n	8003764 <memcpy+0xc>
 8003762:	4770      	bx	lr
 8003764:	b510      	push	{r4, lr}
 8003766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800376a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800376e:	4291      	cmp	r1, r2
 8003770:	d1f9      	bne.n	8003766 <memcpy+0xe>
 8003772:	bd10      	pop	{r4, pc}

08003774 <_realloc_r>:
 8003774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003778:	4680      	mov	r8, r0
 800377a:	4615      	mov	r5, r2
 800377c:	460c      	mov	r4, r1
 800377e:	b921      	cbnz	r1, 800378a <_realloc_r+0x16>
 8003780:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003784:	4611      	mov	r1, r2
 8003786:	f7ff bc4b 	b.w	8003020 <_malloc_r>
 800378a:	b92a      	cbnz	r2, 8003798 <_realloc_r+0x24>
 800378c:	f7ff fbdc 	bl	8002f48 <_free_r>
 8003790:	2400      	movs	r4, #0
 8003792:	4620      	mov	r0, r4
 8003794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003798:	f000 f81a 	bl	80037d0 <_malloc_usable_size_r>
 800379c:	4285      	cmp	r5, r0
 800379e:	4606      	mov	r6, r0
 80037a0:	d802      	bhi.n	80037a8 <_realloc_r+0x34>
 80037a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80037a6:	d8f4      	bhi.n	8003792 <_realloc_r+0x1e>
 80037a8:	4629      	mov	r1, r5
 80037aa:	4640      	mov	r0, r8
 80037ac:	f7ff fc38 	bl	8003020 <_malloc_r>
 80037b0:	4607      	mov	r7, r0
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d0ec      	beq.n	8003790 <_realloc_r+0x1c>
 80037b6:	42b5      	cmp	r5, r6
 80037b8:	462a      	mov	r2, r5
 80037ba:	4621      	mov	r1, r4
 80037bc:	bf28      	it	cs
 80037be:	4632      	movcs	r2, r6
 80037c0:	f7ff ffca 	bl	8003758 <memcpy>
 80037c4:	4621      	mov	r1, r4
 80037c6:	4640      	mov	r0, r8
 80037c8:	f7ff fbbe 	bl	8002f48 <_free_r>
 80037cc:	463c      	mov	r4, r7
 80037ce:	e7e0      	b.n	8003792 <_realloc_r+0x1e>

080037d0 <_malloc_usable_size_r>:
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f18      	subs	r0, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfbc      	itt	lt
 80037da:	580b      	ldrlt	r3, [r1, r0]
 80037dc:	18c0      	addlt	r0, r0, r3
 80037de:	4770      	bx	lr

080037e0 <_init>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	bf00      	nop
 80037e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e6:	bc08      	pop	{r3}
 80037e8:	469e      	mov	lr, r3
 80037ea:	4770      	bx	lr

080037ec <_fini>:
 80037ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ee:	bf00      	nop
 80037f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f2:	bc08      	pop	{r3}
 80037f4:	469e      	mov	lr, r3
 80037f6:	4770      	bx	lr
