
timer_output_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08006280  08006280  00007280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006608  08006608  000081e4  2**0
                  CONTENTS
  4 .ARM          00000008  08006608  08006608  00007608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006610  08006610  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006610  08006610  00007610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006614  08006614  00007614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006618  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  200001e4  080067fc  000081e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e8  080067fc  000083e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d370  00000000  00000000  00008214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d33  00000000  00000000  00015584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  000172b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c0  00000000  00000000  00017f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229af  00000000  00000000  000188f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f018  00000000  00000000  0003b29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d27ab  00000000  00000000  0004a2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ca62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004464  00000000  00000000  0011caa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00120f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006268 	.word	0x08006268

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08006268 	.word	0x08006268

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <SysTick_Handler>:
#include "it.h"

extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void) //systick interrupt handler
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000edc:	f000 fbf4 	bl	80016c8 <HAL_IncTick>

	HAL_SYSTICK_IRQHandler();
 8000ee0:	f000 fd40 	bl	8001964 <HAL_SYSTICK_IRQHandler>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <TIM2_IRQHandler+0x10>)
 8000eee:	f001 fe29 	bl	8002b44 <HAL_TIM_IRQHandler>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000200 	.word	0x20000200

08000efc <main>:
uint32_t pulse2_value = 12500;
uint32_t pulse3_value = 6250;
uint32_t pulse4_value = 3125;

int main(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_Init();
 8000f00:	f000 fb90 	bl	8001624 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000f04:	2032      	movs	r0, #50	@ 0x32
 8000f06:	f000 f82f 	bl	8000f68 <SystemClock_Config_HSE>

	Gpio_Init();
 8000f0a:	f000 f8bf 	bl	800108c <Gpio_Init>

	UART2_Init();
 8000f0e:	f000 f8e1 	bl	80010d4 <UART2_Init>

	Timer2_init();
 8000f12:	f000 f905 	bl	8001120 <Timer2_init>

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_1) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4812      	ldr	r0, [pc, #72]	@ (8000f64 <main+0x68>)
 8000f1a:	f001 fcfd 	bl	8002918 <HAL_TIM_OC_Start_IT>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <main+0x2c>
	{
		Error_handler();
 8000f24:	f000 f9ba 	bl	800129c <Error_handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK)
 8000f28:	2104      	movs	r1, #4
 8000f2a:	480e      	ldr	r0, [pc, #56]	@ (8000f64 <main+0x68>)
 8000f2c:	f001 fcf4 	bl	8002918 <HAL_TIM_OC_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <main+0x3e>
	{
		Error_handler();
 8000f36:	f000 f9b1 	bl	800129c <Error_handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_3) != HAL_OK)
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <main+0x68>)
 8000f3e:	f001 fceb 	bl	8002918 <HAL_TIM_OC_Start_IT>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <main+0x50>
	{
		Error_handler();
 8000f48:	f000 f9a8 	bl	800129c <Error_handler>
	}

	if(HAL_TIM_OC_Start_IT(&htimer2, TIM_CHANNEL_4) != HAL_OK)
 8000f4c:	210c      	movs	r1, #12
 8000f4e:	4805      	ldr	r0, [pc, #20]	@ (8000f64 <main+0x68>)
 8000f50:	f001 fce2 	bl	8002918 <HAL_TIM_OC_Start_IT>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <main+0x64>
	{
		Error_handler();
 8000f5a:	f000 f99f 	bl	800129c <Error_handler>
	}

	while(1);
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <main+0x64>
 8000f64:	20000200 	.word	0x20000200

08000f68 <SystemClock_Config_HSE>:
	return 0;
}


void SystemClock_Config_HSE(uint8_t clock_freq)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b096      	sub	sp, #88	@ 0x58
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;

	RCC_ClkInitTypeDef clk_init;

	uint32_t Flatency = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	657b      	str	r3, [r7, #84]	@ 0x54


	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
 8000f76:	2305      	movs	r3, #5
 8000f78:	623b      	str	r3, [r7, #32]
	osc_init.HSEState = RCC_HSE_ON;
 8000f7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f7e:	627b      	str	r3, [r7, #36]	@ 0x24
	osc_init.LSEState = RCC_LSE_ON;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	@ 0x28
	//osc_init.HSICalibrationValue = 16;
	osc_init.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c


	switch(clock_freq)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b78      	cmp	r3, #120	@ 0x78
 8000f92:	d038      	beq.n	8001006 <SystemClock_Config_HSE+0x9e>
 8000f94:	2b78      	cmp	r3, #120	@ 0x78
 8000f96:	dc72      	bgt.n	800107e <SystemClock_Config_HSE+0x116>
 8000f98:	2b32      	cmp	r3, #50	@ 0x32
 8000f9a:	d002      	beq.n	8000fa2 <SystemClock_Config_HSE+0x3a>
 8000f9c:	2b54      	cmp	r3, #84	@ 0x54
 8000f9e:	d019      	beq.n	8000fd4 <SystemClock_Config_HSE+0x6c>

			break;
		}

		default:
			return;
 8000fa0:	e06d      	b.n	800107e <SystemClock_Config_HSE+0x116>
			osc_init.PLL.PLLM = 16;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 100;
 8000fa6:	2364      	movs	r3, #100	@ 0x64
 8000fa8:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc6:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_1WS;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8000fd2:	e031      	b.n	8001038 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 16;
 8000fd4:	2310      	movs	r3, #16
 8000fd6:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 168;
 8000fd8:	23a8      	movs	r3, #168	@ 0xa8
 8000fda:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff8:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_2WS;
 8001000:	2302      	movs	r3, #2
 8001002:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8001004:	e018      	b.n	8001038 <SystemClock_Config_HSE+0xd0>
			osc_init.PLL.PLLM = 16;
 8001006:	2310      	movs	r3, #16
 8001008:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 240;
 800100a:	23f0      	movs	r3, #240	@ 0xf0
 800100c:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 800100e:	2302      	movs	r3, #2
 8001010:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8001012:	2302      	movs	r3, #2
 8001014:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 8001016:	2302      	movs	r3, #2
 8001018:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800101a:	230f      	movs	r3, #15
 800101c:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101e:	2302      	movs	r3, #2
 8001020:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 8001026:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800102a:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	61fb      	str	r3, [r7, #28]
			Flatency = FLASH_ACR_LATENCY_3WS;
 8001032:	2303      	movs	r3, #3
 8001034:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8001036:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f001 f97d 	bl	800233c <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config_HSE+0xe4>
	{
		Error_handler();
 8001048:	f000 f928 	bl	800129c <Error_handler>
	}

	if(HAL_RCC_ClockConfig(&clk_init, Flatency) != HAL_OK)
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fe28 	bl	8001ca8 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config_HSE+0xfa>
	{
		Error_handler();
 800105e:	f000 f91d 	bl	800129c <Error_handler>
	}

	//Systick configuration
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001062:	f000 ff07 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001066:	4603      	mov	r3, r0
 8001068:	4a07      	ldr	r2, [pc, #28]	@ (8001088 <SystemClock_Config_HSE+0x120>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	099b      	lsrs	r3, r3, #6
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc4e 	bl	8001912 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001076:	2004      	movs	r0, #4
 8001078:	f000 fc58 	bl	800192c <HAL_SYSTICK_CLKSourceConfig>
 800107c:	e000      	b.n	8001080 <SystemClock_Config_HSE+0x118>
			return;
 800107e:	bf00      	nop
}
 8001080:	3758      	adds	r7, #88	@ 0x58
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	10624dd3 	.word	0x10624dd3

0800108c <Gpio_Init>:

void Gpio_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpioLed;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <Gpio_Init+0x40>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <Gpio_Init+0x40>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <Gpio_Init+0x40>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]

	gpioLed.Pin = GPIO_PIN_5;
 80010ae:	2320      	movs	r3, #32
 80010b0:	607b      	str	r3, [r7, #4]
	gpioLed.Mode = GPIO_MODE_OUTPUT_PP;
 80010b2:	2301      	movs	r3, #1
 80010b4:	60bb      	str	r3, [r7, #8]
	gpioLed.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_Init(GPIOA, &gpioLed);
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	4619      	mov	r1, r3
 80010be:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <Gpio_Init+0x44>)
 80010c0:	f000 fc5e 	bl	8001980 <HAL_GPIO_Init>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000

080010d4 <UART2_Init>:


void UART2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <UART2_Init+0x44>)
 80010da:	4a10      	ldr	r2, [pc, #64]	@ (800111c <UART2_Init+0x48>)
 80010dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80010de:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <UART2_Init+0x44>)
 80010e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <UART2_Init+0x44>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <UART2_Init+0x44>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <UART2_Init+0x44>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <UART2_Init+0x44>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <UART2_Init+0x44>)
 8001100:	220c      	movs	r2, #12
 8001102:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	@ (8001118 <UART2_Init+0x44>)
 8001106:	f002 f96a 	bl	80033de <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <UART2_Init+0x40>
	{
		//there is a problem
		Error_handler();
 8001110:	f000 f8c4 	bl	800129c <Error_handler>
	}
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000248 	.word	0x20000248
 800111c:	40004400 	.word	0x40004400

08001120 <Timer2_init>:


void Timer2_init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
	TIM_OC_InitTypeDef tim2_OC_init;

	htimer2.Instance = TIM2;
 8001126:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <Timer2_init+0xac>)
 8001128:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800112c:	601a      	str	r2, [r3, #0]
	htimer2.Init.Period = 0xFFFFFFFF;
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <Timer2_init+0xac>)
 8001130:	f04f 32ff 	mov.w	r2, #4294967295
 8001134:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <Timer2_init+0xac>)
 8001138:	2201      	movs	r2, #1
 800113a:	605a      	str	r2, [r3, #4]

	if(HAL_TIM_OC_Init(&htimer2) != HAL_OK)
 800113c:	4823      	ldr	r0, [pc, #140]	@ (80011cc <Timer2_init+0xac>)
 800113e:	f001 fb9b 	bl	8002878 <HAL_TIM_OC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <Timer2_init+0x2c>
	{
		Error_handler();
 8001148:	f000 f8a8 	bl	800129c <Error_handler>
	}

	tim2_OC_init.OCMode = TIM_OCMODE_TOGGLE;
 800114c:	2330      	movs	r3, #48	@ 0x30
 800114e:	607b      	str	r3, [r7, #4]
	tim2_OC_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]

	tim2_OC_init.Pulse = pulse1_value;
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <Timer2_init+0xb0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2_OC_init, TIM_CHANNEL_1) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	481a      	ldr	r0, [pc, #104]	@ (80011cc <Timer2_init+0xac>)
 8001162:	f001 fddf 	bl	8002d24 <HAL_TIM_OC_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <Timer2_init+0x50>
	{
		Error_handler();
 800116c:	f000 f896 	bl	800129c <Error_handler>
	}

	tim2_OC_init.Pulse = pulse2_value;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <Timer2_init+0xb4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2_OC_init, TIM_CHANNEL_2) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2204      	movs	r2, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4813      	ldr	r0, [pc, #76]	@ (80011cc <Timer2_init+0xac>)
 800117e:	f001 fdd1 	bl	8002d24 <HAL_TIM_OC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <Timer2_init+0x6c>
	{
		Error_handler();
 8001188:	f000 f888 	bl	800129c <Error_handler>
	}

	tim2_OC_init.Pulse = pulse3_value;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <Timer2_init+0xb8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2_OC_init, TIM_CHANNEL_3) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	480c      	ldr	r0, [pc, #48]	@ (80011cc <Timer2_init+0xac>)
 800119a:	f001 fdc3 	bl	8002d24 <HAL_TIM_OC_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <Timer2_init+0x88>
	{
		Error_handler();
 80011a4:	f000 f87a 	bl	800129c <Error_handler>
	}

	tim2_OC_init.Pulse = pulse4_value;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <Timer2_init+0xbc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	60bb      	str	r3, [r7, #8]
	if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2_OC_init, TIM_CHANNEL_4) != HAL_OK)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	220c      	movs	r2, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4805      	ldr	r0, [pc, #20]	@ (80011cc <Timer2_init+0xac>)
 80011b6:	f001 fdb5 	bl	8002d24 <HAL_TIM_OC_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <Timer2_init+0xa4>
	{
		Error_handler();
 80011c0:	f000 f86c 	bl	800129c <Error_handler>
	}
}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000200 	.word	0x20000200
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004
 80011d8:	20000008 	.word	0x20000008
 80011dc:	2000000c 	.word	0x2000000c

080011e0 <HAL_TIM_OC_DelayElapsedCallback>:

uint32_t ccr_content;

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	/*TIM2 CH1 toggling with frequency 500Hz*/
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7f1b      	ldrb	r3, [r3, #28]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10e      	bne.n	800120e <HAL_TIM_OC_DelayElapsedCallback+0x2e>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011f0:	2100      	movs	r1, #0
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f001 fdf2 	bl	8002ddc <HAL_TIM_ReadCapturedValue>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 80011fc:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim , TIM_CHANNEL_1 , ccr_content + pulse1_value);
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	440a      	add	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	/*TIM2 CH2 toggling with frequency 1000Hz*/
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7f1b      	ldrb	r3, [r3, #28]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d10e      	bne.n	8001234 <HAL_TIM_OC_DelayElapsedCallback+0x54>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001216:	2104      	movs	r1, #4
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f001 fddf 	bl	8002ddc <HAL_TIM_ReadCapturedValue>
 800121e:	4603      	mov	r3, r0
 8001220:	4a19      	ldr	r2, [pc, #100]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001222:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim , TIM_CHANNEL_2 , ccr_content + pulse2_value);
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	440a      	add	r2, r1
 8001232:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	/*TIM2 CH3 toggling with frequency 2000Hz*/
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7f1b      	ldrb	r3, [r3, #28]
 8001238:	2b04      	cmp	r3, #4
 800123a:	d10e      	bne.n	800125a <HAL_TIM_OC_DelayElapsedCallback+0x7a>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800123c:	2108      	movs	r1, #8
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fdcc 	bl	8002ddc <HAL_TIM_ReadCapturedValue>
 8001244:	4603      	mov	r3, r0
 8001246:	4a10      	ldr	r2, [pc, #64]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001248:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim , TIM_CHANNEL_3 , ccr_content + pulse3_value);
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	440a      	add	r2, r1
 8001258:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	/*TIM2 CH4 toggling with frequency 4000Hz*/
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7f1b      	ldrb	r3, [r3, #28]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d10e      	bne.n	8001280 <HAL_TIM_OC_DelayElapsedCallback+0xa0>
	{
		ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001262:	210c      	movs	r1, #12
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f001 fdb9 	bl	8002ddc <HAL_TIM_ReadCapturedValue>
 800126a:	4603      	mov	r3, r0
 800126c:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 800126e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(htim , TIM_CHANNEL_4 , ccr_content + pulse4_value);
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8001272:	6819      	ldr	r1, [r3, #0]
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	440a      	add	r2, r1
 800127e:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000290 	.word	0x20000290
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004
 8001294:	20000008 	.word	0x20000008
 8001298:	2000000c 	.word	0x2000000c

0800129c <Error_handler>:

void Error_handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	while(1);
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <Error_handler+0x4>

080012a4 <HAL_MspInit>:
 */

#include "main.h"

void HAL_MspInit(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  //here will do low level processor specific init

	//1- set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 fafd 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

	//2- enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x07 << 16; // usg fault , memory fault and bus fault system exceptions
 80012ae:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_MspInit+0x40>)
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <HAL_MspInit+0x40>)
 80012b4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80012b8:	6253      	str	r3, [r2, #36]	@ 0x24

	//3- configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn , 0 , 0);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	f06f 000b 	mvn.w	r0, #11
 80012c2:	f000 fafc 	bl	80018be <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn , 0 , 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	f06f 000a 	mvn.w	r0, #10
 80012ce:	f000 faf6 	bl	80018be <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn , 0 , 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	f06f 0009 	mvn.w	r0, #9
 80012da:	f000 faf0 	bl	80018be <HAL_NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	@ 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpio_uart;
	//here we are going to do the low level Inits of the USART2 peripheral

	//1- enable the clock for tha USART2 peripheral as well as for GPIOA peripheral
	__HAL_RCC_USART2_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <HAL_UART_MspInit+0x88>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001370 <HAL_UART_MspInit+0x88>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001314:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <HAL_UART_MspInit+0x88>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6313      	str	r3, [r2, #48]	@ 0x30
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <HAL_UART_MspInit+0x88>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
	//2- Do the pin muxing configuration
	gpio_uart.Pin = GPIO_PIN_2;
 8001328:	2304      	movs	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2; //UART2_Tx
 8001338:	2307      	movs	r3, #7
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480c      	ldr	r0, [pc, #48]	@ (8001374 <HAL_UART_MspInit+0x8c>)
 8001344:	f000 fb1c 	bl	8001980 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3; //UART2_Rx
 8001348:	2308      	movs	r3, #8
 800134a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4808      	ldr	r0, [pc, #32]	@ (8001374 <HAL_UART_MspInit+0x8c>)
 8001354:	f000 fb14 	bl	8001980 <HAL_GPIO_Init>
	//3- enable the IRQ and set up the priority(NVIC setting)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001358:	2026      	movs	r0, #38	@ 0x26
 800135a:	f000 facc 	bl	80018f6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	210f      	movs	r1, #15
 8001362:	2026      	movs	r0, #38	@ 0x26
 8001364:	f000 faab 	bl	80018be <HAL_NVIC_SetPriority>
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	@ 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpios;

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	4b23      	ldr	r3, [pc, #140]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	4a22      	ldr	r2, [pc, #136]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001390:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 80013a6:	f043 0302 	orr.w	r3, r3, #2
 80013aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <HAL_TIM_OC_MspInit+0x9c>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]

	//configure gpios to behave as timer2 channels 1,2,3,4

	tim2OC_ch_gpios.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80013b8:	2303      	movs	r3, #3
 80013ba:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 80013c8:	2301      	movs	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpios);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	4811      	ldr	r0, [pc, #68]	@ (8001418 <HAL_TIM_OC_MspInit+0xa0>)
 80013d4:	f000 fad4 	bl	8001980 <HAL_GPIO_Init>

	tim2OC_ch_gpios.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 80013d8:	f240 4304 	movw	r3, #1028	@ 0x404
 80013dc:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpios.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpios.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpios.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpios.Alternate = GPIO_AF1_TIM2;
 80013ea:	2301      	movs	r3, #1
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpios);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	4809      	ldr	r0, [pc, #36]	@ (800141c <HAL_TIM_OC_MspInit+0xa4>)
 80013f6:	f000 fac3 	bl	8001980 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	210f      	movs	r1, #15
 80013fe:	201c      	movs	r0, #28
 8001400:	f000 fa5d 	bl	80018be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001404:	201c      	movs	r0, #28
 8001406:	f000 fa76 	bl	80018f6 <HAL_NVIC_EnableIRQ>
}
 800140a:	bf00      	nop
 800140c:	3728      	adds	r7, #40	@ 0x28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	40020000 	.word	0x40020000
 800141c:	40020400 	.word	0x40020400

08001420 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return 1;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_kill>:

int _kill(int pid, int sig)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800143a:	f003 f845 	bl	80044c8 <__errno>
 800143e:	4603      	mov	r3, r0
 8001440:	2216      	movs	r2, #22
 8001442:	601a      	str	r2, [r3, #0]
  return -1;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_exit>:

void _exit (int status)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ffe7 	bl	8001430 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001462:	bf00      	nop
 8001464:	e7fd      	b.n	8001462 <_exit+0x12>

08001466 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e00a      	b.n	800148e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001478:	f3af 8000 	nop.w
 800147c:	4601      	mov	r1, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1c5a      	adds	r2, r3, #1
 8001482:	60ba      	str	r2, [r7, #8]
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf0      	blt.n	8001478 <_read+0x12>
  }

  return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	e009      	b.n	80014c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	60ba      	str	r2, [r7, #8]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbf1      	blt.n	80014b2 <_write+0x12>
  }
  return len;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_close>:

int _close(int file)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001500:	605a      	str	r2, [r3, #4]
  return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <_isatty>:

int _isatty(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	60f8      	str	r0, [r7, #12]
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3714      	adds	r7, #20
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001548:	4a14      	ldr	r2, [pc, #80]	@ (800159c <_sbrk+0x5c>)
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <_sbrk+0x60>)
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001554:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800155c:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <_sbrk+0x64>)
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <_sbrk+0x68>)
 8001560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001562:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <_sbrk+0x64>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	429a      	cmp	r2, r3
 800156e:	d207      	bcs.n	8001580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001570:	f002 ffaa 	bl	80044c8 <__errno>
 8001574:	4603      	mov	r3, r0
 8001576:	220c      	movs	r2, #12
 8001578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	e009      	b.n	8001594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001580:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <_sbrk+0x64>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_sbrk+0x64>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <_sbrk+0x64>)
 8001590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20020000 	.word	0x20020000
 80015a0:	00000400 	.word	0x00000400
 80015a4:	20000294 	.word	0x20000294
 80015a8:	200003e8 	.word	0x200003e8

080015ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <SystemInit+0x20>)
 80015b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b6:	4a05      	ldr	r2, [pc, #20]	@ (80015cc <SystemInit+0x20>)
 80015b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001608 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015d4:	f7ff ffea 	bl	80015ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015da:	490d      	ldr	r1, [pc, #52]	@ (8001610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e0:	e002      	b.n	80015e8 <LoopCopyDataInit>

080015e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e6:	3304      	adds	r3, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ec:	d3f9      	bcc.n	80015e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015f0:	4c0a      	ldr	r4, [pc, #40]	@ (800161c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f4:	e001      	b.n	80015fa <LoopFillZerobss>

080015f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f8:	3204      	adds	r2, #4

080015fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015fc:	d3fb      	bcc.n	80015f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f002 ff69 	bl	80044d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001602:	f7ff fc7b 	bl	8000efc <main>
  bx  lr    
 8001606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001608:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001610:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001614:	08006618 	.word	0x08006618
  ldr r2, =_sbss
 8001618:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800161c:	200003e8 	.word	0x200003e8

08001620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001620:	e7fe      	b.n	8001620 <ADC_IRQHandler>
	...

08001624 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0d      	ldr	r2, [pc, #52]	@ (8001664 <HAL_Init+0x40>)
 800162e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001632:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a0a      	ldr	r2, [pc, #40]	@ (8001664 <HAL_Init+0x40>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800163e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001640:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <HAL_Init+0x40>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_Init+0x40>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800164a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164c:	2003      	movs	r0, #3
 800164e:	f000 f92b 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001652:	2000      	movs	r0, #0
 8001654:	f000 f808 	bl	8001668 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001658:	f7ff fe24 	bl	80012a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001670:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_InitTick+0x54>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b12      	ldr	r3, [pc, #72]	@ (80016c0 <HAL_InitTick+0x58>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4619      	mov	r1, r3
 800167a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f000 f943 	bl	8001912 <HAL_SYSTICK_Config>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00e      	b.n	80016b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b0f      	cmp	r3, #15
 800169a:	d80a      	bhi.n	80016b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169c:	2200      	movs	r2, #0
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295
 80016a4:	f000 f90b 	bl	80018be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a8:	4a06      	ldr	r2, [pc, #24]	@ (80016c4 <HAL_InitTick+0x5c>)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000010 	.word	0x20000010
 80016c0:	20000018 	.word	0x20000018
 80016c4:	20000014 	.word	0x20000014

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000018 	.word	0x20000018
 80016ec:	20000298 	.word	0x20000298

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	@ (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000298 	.word	0x20000298

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177a:	2b00      	cmp	r3, #0
 800177c:	db0b      	blt.n	8001796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 021f 	and.w	r2, r3, #31
 8001784:	4907      	ldr	r1, [pc, #28]	@ (80017a4 <__NVIC_EnableIRQ+0x38>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	2001      	movs	r0, #1
 800178e:	fa00 f202 	lsl.w	r2, r0, r2
 8001792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	@ (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	@ (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	@ (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff29 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff3e 	bl	8001750 <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff31 	bl	800176c <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff ffa2 	bl	8001864 <SysTick_Config>
 8001920:	4603      	mov	r3, r0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d106      	bne.n	8001948 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800193a:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001946:	e005      	b.n	8001954 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001968:	f000 f802 	bl	8001970 <HAL_SYSTICK_Callback>
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e165      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 8154 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80ae 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b5a      	ldr	r3, [pc, #360]	@ (8001c80 <HAL_GPIO_Init+0x300>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a58      	ldr	r2, [pc, #352]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4f      	ldr	r2, [pc, #316]	@ (8001c88 <HAL_GPIO_Init+0x308>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d025      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a4e      	ldr	r2, [pc, #312]	@ (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01f      	beq.n	8001b96 <HAL_GPIO_Init+0x216>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a4d      	ldr	r2, [pc, #308]	@ (8001c90 <HAL_GPIO_Init+0x310>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x212>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4c      	ldr	r2, [pc, #304]	@ (8001c94 <HAL_GPIO_Init+0x314>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x20e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4b      	ldr	r2, [pc, #300]	@ (8001c98 <HAL_GPIO_Init+0x318>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x20a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4a      	ldr	r2, [pc, #296]	@ (8001c9c <HAL_GPIO_Init+0x31c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x206>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a49      	ldr	r2, [pc, #292]	@ (8001ca0 <HAL_GPIO_Init+0x320>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x202>
 8001b7e:	2306      	movs	r3, #6
 8001b80:	e00c      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e00a      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b86:	2305      	movs	r3, #5
 8001b88:	e008      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x21c>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f002 0203 	and.w	r2, r2, #3
 8001ba2:	0092      	lsls	r2, r2, #2
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bac:	4935      	ldr	r1, [pc, #212]	@ (8001c84 <HAL_GPIO_Init+0x304>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bde:	4a31      	ldr	r2, [pc, #196]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c08:	4a26      	ldr	r2, [pc, #152]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d003      	beq.n	8001c5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c5c:	4a11      	ldr	r2, [pc, #68]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3301      	adds	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2b0f      	cmp	r3, #15
 8001c6c:	f67f ae96 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40013800 	.word	0x40013800
 8001c88:	40020000 	.word	0x40020000
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020c00 	.word	0x40020c00
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40021400 	.word	0x40021400
 8001ca0:	40021800 	.word	0x40021800
 8001ca4:	40013c00 	.word	0x40013c00

08001ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d101      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0cc      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b68      	ldr	r3, [pc, #416]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d90c      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b65      	ldr	r3, [pc, #404]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	4b63      	ldr	r3, [pc, #396]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d001      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0b8      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cfc:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a58      	ldr	r2, [pc, #352]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0308 	and.w	r3, r3, #8
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d14:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4a52      	ldr	r2, [pc, #328]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b50      	ldr	r3, [pc, #320]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	494d      	ldr	r1, [pc, #308]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d044      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b3f      	ldr	r3, [pc, #252]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d109      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e06f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d76:	4b3b      	ldr	r3, [pc, #236]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e067      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	4934      	ldr	r1, [pc, #208]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d98:	f7ff fcaa 	bl	80016f0 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	e00a      	b.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da0:	f7ff fca6 	bl	80016f0 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e04f      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 020c 	and.w	r2, r3, #12
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d1eb      	bne.n	8001da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b25      	ldr	r3, [pc, #148]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d20c      	bcs.n	8001df0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e032      	b.n	8001e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d008      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dfc:	4b19      	ldr	r3, [pc, #100]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4916      	ldr	r1, [pc, #88]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d009      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	490e      	ldr	r1, [pc, #56]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e2e:	f000 f855 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	490a      	ldr	r1, [pc, #40]	@ (8001e68 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	5ccb      	ldrb	r3, [r1, r3]
 8001e42:	fa22 f303 	lsr.w	r3, r2, r3
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e4a:	4b09      	ldr	r3, [pc, #36]	@ (8001e70 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fc0a 	bl	8001668 <HAL_InitTick>

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	08006280 	.word	0x08006280
 8001e6c:	20000010 	.word	0x20000010
 8001e70:	20000014 	.word	0x20000014

08001e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e78:	4b03      	ldr	r3, [pc, #12]	@ (8001e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	20000010 	.word	0x20000010

08001e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0a9b      	lsrs	r3, r3, #10
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	@ (8001eb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08006290 	.word	0x08006290

08001eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb8:	f7ff ffdc 	bl	8001e74 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0b5b      	lsrs	r3, r3, #13
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	@ (8001ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08006290 	.word	0x08006290

08001edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee0:	b0ae      	sub	sp, #184	@ 0xb8
 8001ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f02:	4bcb      	ldr	r3, [pc, #812]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	f200 8206 	bhi.w	800231c <HAL_RCC_GetSysClockFreq+0x440>
 8001f10:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f4d 	.word	0x08001f4d
 8001f1c:	0800231d 	.word	0x0800231d
 8001f20:	0800231d 	.word	0x0800231d
 8001f24:	0800231d 	.word	0x0800231d
 8001f28:	08001f55 	.word	0x08001f55
 8001f2c:	0800231d 	.word	0x0800231d
 8001f30:	0800231d 	.word	0x0800231d
 8001f34:	0800231d 	.word	0x0800231d
 8001f38:	08001f5d 	.word	0x08001f5d
 8001f3c:	0800231d 	.word	0x0800231d
 8001f40:	0800231d 	.word	0x0800231d
 8001f44:	0800231d 	.word	0x0800231d
 8001f48:	0800214d 	.word	0x0800214d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8002234 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f52:	e1e7      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4bb8      	ldr	r3, [pc, #736]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f5a:	e1e3      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4bb4      	ldr	r3, [pc, #720]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f68:	4bb1      	ldr	r3, [pc, #708]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d071      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f74:	4bae      	ldr	r3, [pc, #696]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f80:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f9a:	4622      	mov	r2, r4
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	f04f 0000 	mov.w	r0, #0
 8001fa2:	f04f 0100 	mov.w	r1, #0
 8001fa6:	0159      	lsls	r1, r3, #5
 8001fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fac:	0150      	lsls	r0, r2, #5
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	1a51      	subs	r1, r2, r1
 8001fb6:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fb8:	4629      	mov	r1, r5
 8001fba:	eb63 0301 	sbc.w	r3, r3, r1
 8001fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001fcc:	4649      	mov	r1, r9
 8001fce:	018b      	lsls	r3, r1, #6
 8001fd0:	4641      	mov	r1, r8
 8001fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd6:	4641      	mov	r1, r8
 8001fd8:	018a      	lsls	r2, r1, #6
 8001fda:	4641      	mov	r1, r8
 8001fdc:	1a51      	subs	r1, r2, r1
 8001fde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ff4:	4649      	mov	r1, r9
 8001ff6:	00cb      	lsls	r3, r1, #3
 8001ff8:	4641      	mov	r1, r8
 8001ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ffe:	4641      	mov	r1, r8
 8002000:	00ca      	lsls	r2, r1, #3
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	4603      	mov	r3, r0
 8002008:	4622      	mov	r2, r4
 800200a:	189b      	adds	r3, r3, r2
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
 800200e:	462b      	mov	r3, r5
 8002010:	460a      	mov	r2, r1
 8002012:	eb42 0303 	adc.w	r3, r2, r3
 8002016:	637b      	str	r3, [r7, #52]	@ 0x34
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002024:	4629      	mov	r1, r5
 8002026:	024b      	lsls	r3, r1, #9
 8002028:	4621      	mov	r1, r4
 800202a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800202e:	4621      	mov	r1, r4
 8002030:	024a      	lsls	r2, r1, #9
 8002032:	4610      	mov	r0, r2
 8002034:	4619      	mov	r1, r3
 8002036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800203a:	2200      	movs	r2, #0
 800203c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002040:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002044:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002048:	f7fe fdce 	bl	8000be8 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4613      	mov	r3, r2
 8002052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002056:	e067      	b.n	8002128 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002058:	4b75      	ldr	r3, [pc, #468]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	2200      	movs	r2, #0
 8002060:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002064:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002068:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800206c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002070:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002072:	2300      	movs	r3, #0
 8002074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002076:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800207a:	4622      	mov	r2, r4
 800207c:	462b      	mov	r3, r5
 800207e:	f04f 0000 	mov.w	r0, #0
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	0159      	lsls	r1, r3, #5
 8002088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800208c:	0150      	lsls	r0, r2, #5
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4621      	mov	r1, r4
 8002094:	1a51      	subs	r1, r2, r1
 8002096:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002098:	4629      	mov	r1, r5
 800209a:	eb63 0301 	sbc.w	r3, r3, r1
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80020ac:	4649      	mov	r1, r9
 80020ae:	018b      	lsls	r3, r1, #6
 80020b0:	4641      	mov	r1, r8
 80020b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020b6:	4641      	mov	r1, r8
 80020b8:	018a      	lsls	r2, r1, #6
 80020ba:	4641      	mov	r1, r8
 80020bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80020c0:	4649      	mov	r1, r9
 80020c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020da:	4692      	mov	sl, r2
 80020dc:	469b      	mov	fp, r3
 80020de:	4623      	mov	r3, r4
 80020e0:	eb1a 0303 	adds.w	r3, sl, r3
 80020e4:	623b      	str	r3, [r7, #32]
 80020e6:	462b      	mov	r3, r5
 80020e8:	eb4b 0303 	adc.w	r3, fp, r3
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020fa:	4629      	mov	r1, r5
 80020fc:	028b      	lsls	r3, r1, #10
 80020fe:	4621      	mov	r1, r4
 8002100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002104:	4621      	mov	r1, r4
 8002106:	028a      	lsls	r2, r1, #10
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002110:	2200      	movs	r2, #0
 8002112:	673b      	str	r3, [r7, #112]	@ 0x70
 8002114:	677a      	str	r2, [r7, #116]	@ 0x74
 8002116:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800211a:	f7fe fd65 	bl	8000be8 <__aeabi_uldivmod>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4613      	mov	r3, r2
 8002124:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002128:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	3301      	adds	r3, #1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800213a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800213e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800214a:	e0eb      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800214c:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002154:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d06b      	beq.n	800223c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002164:	4b32      	ldr	r3, [pc, #200]	@ (8002230 <HAL_RCC_GetSysClockFreq+0x354>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	2200      	movs	r2, #0
 800216c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800216e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	663b      	str	r3, [r7, #96]	@ 0x60
 8002178:	2300      	movs	r3, #0
 800217a:	667b      	str	r3, [r7, #100]	@ 0x64
 800217c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002180:	4622      	mov	r2, r4
 8002182:	462b      	mov	r3, r5
 8002184:	f04f 0000 	mov.w	r0, #0
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	0159      	lsls	r1, r3, #5
 800218e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002192:	0150      	lsls	r0, r2, #5
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4621      	mov	r1, r4
 800219a:	1a51      	subs	r1, r2, r1
 800219c:	61b9      	str	r1, [r7, #24]
 800219e:	4629      	mov	r1, r5
 80021a0:	eb63 0301 	sbc.w	r3, r3, r1
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021b2:	4659      	mov	r1, fp
 80021b4:	018b      	lsls	r3, r1, #6
 80021b6:	4651      	mov	r1, sl
 80021b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021bc:	4651      	mov	r1, sl
 80021be:	018a      	lsls	r2, r1, #6
 80021c0:	4651      	mov	r1, sl
 80021c2:	ebb2 0801 	subs.w	r8, r2, r1
 80021c6:	4659      	mov	r1, fp
 80021c8:	eb63 0901 	sbc.w	r9, r3, r1
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021e0:	4690      	mov	r8, r2
 80021e2:	4699      	mov	r9, r3
 80021e4:	4623      	mov	r3, r4
 80021e6:	eb18 0303 	adds.w	r3, r8, r3
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	462b      	mov	r3, r5
 80021ee:	eb49 0303 	adc.w	r3, r9, r3
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002200:	4629      	mov	r1, r5
 8002202:	024b      	lsls	r3, r1, #9
 8002204:	4621      	mov	r1, r4
 8002206:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800220a:	4621      	mov	r1, r4
 800220c:	024a      	lsls	r2, r1, #9
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002216:	2200      	movs	r2, #0
 8002218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800221a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800221c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002220:	f7fe fce2 	bl	8000be8 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800222e:	e065      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x420>
 8002230:	40023800 	.word	0x40023800
 8002234:	00f42400 	.word	0x00f42400
 8002238:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223c:	4b3d      	ldr	r3, [pc, #244]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x458>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	2200      	movs	r2, #0
 8002244:	4618      	mov	r0, r3
 8002246:	4611      	mov	r1, r2
 8002248:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800224c:	653b      	str	r3, [r7, #80]	@ 0x50
 800224e:	2300      	movs	r3, #0
 8002250:	657b      	str	r3, [r7, #84]	@ 0x54
 8002252:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002256:	4642      	mov	r2, r8
 8002258:	464b      	mov	r3, r9
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	0159      	lsls	r1, r3, #5
 8002264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002268:	0150      	lsls	r0, r2, #5
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4641      	mov	r1, r8
 8002270:	1a51      	subs	r1, r2, r1
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	4649      	mov	r1, r9
 8002276:	eb63 0301 	sbc.w	r3, r3, r1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002288:	4659      	mov	r1, fp
 800228a:	018b      	lsls	r3, r1, #6
 800228c:	4651      	mov	r1, sl
 800228e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002292:	4651      	mov	r1, sl
 8002294:	018a      	lsls	r2, r1, #6
 8002296:	4651      	mov	r1, sl
 8002298:	1a54      	subs	r4, r2, r1
 800229a:	4659      	mov	r1, fp
 800229c:	eb63 0501 	sbc.w	r5, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	00eb      	lsls	r3, r5, #3
 80022aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ae:	00e2      	lsls	r2, r4, #3
 80022b0:	4614      	mov	r4, r2
 80022b2:	461d      	mov	r5, r3
 80022b4:	4643      	mov	r3, r8
 80022b6:	18e3      	adds	r3, r4, r3
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	464b      	mov	r3, r9
 80022bc:	eb45 0303 	adc.w	r3, r5, r3
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ce:	4629      	mov	r1, r5
 80022d0:	028b      	lsls	r3, r1, #10
 80022d2:	4621      	mov	r1, r4
 80022d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022d8:	4621      	mov	r1, r4
 80022da:	028a      	lsls	r2, r1, #10
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022e4:	2200      	movs	r2, #0
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022ea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022ee:	f7fe fc7b 	bl	8000be8 <__aeabi_uldivmod>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4613      	mov	r3, r2
 80022f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HAL_RCC_GetSysClockFreq+0x458>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0f1b      	lsrs	r3, r3, #28
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800230a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800230e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800231a:	e003      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800231c:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_GetSysClockFreq+0x45c>)
 800231e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002328:	4618      	mov	r0, r3
 800232a:	37b8      	adds	r7, #184	@ 0xb8
 800232c:	46bd      	mov	sp, r7
 800232e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	00f42400 	.word	0x00f42400

0800233c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e28d      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8083 	beq.w	8002462 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800235c:	4b94      	ldr	r3, [pc, #592]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	d019      	beq.n	800239c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002368:	4b91      	ldr	r3, [pc, #580]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002370:	2b08      	cmp	r3, #8
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002374:	4b8e      	ldr	r3, [pc, #568]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b8b      	ldr	r3, [pc, #556]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b84      	ldr	r3, [pc, #528]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05b      	beq.n	8002460 <HAL_RCC_OscConfig+0x124>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d157      	bne.n	8002460 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e25a      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x90>
 80023be:	4b7c      	ldr	r3, [pc, #496]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a7b      	ldr	r2, [pc, #492]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xcc>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0xb4>
 80023d6:	4b76      	ldr	r3, [pc, #472]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a75      	ldr	r2, [pc, #468]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b73      	ldr	r3, [pc, #460]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a72      	ldr	r2, [pc, #456]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xcc>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b6c      	ldr	r3, [pc, #432]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a6b      	ldr	r2, [pc, #428]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002410:	f7ff f96e 	bl	80016f0 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff f96a 	bl	80016f0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e21f      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xdc>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff f95a 	bl	80016f0 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f956 	bl	80016f0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e20b      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b57      	ldr	r3, [pc, #348]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x104>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06f      	beq.n	800254e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800246e:	4b50      	ldr	r3, [pc, #320]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d017      	beq.n	80024aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800247a:	4b4d      	ldr	r3, [pc, #308]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002482:	2b08      	cmp	r3, #8
 8002484:	d105      	bne.n	8002492 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002486:	4b4a      	ldr	r3, [pc, #296]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002492:	4b47      	ldr	r3, [pc, #284]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249e:	4b44      	ldr	r3, [pc, #272]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b41      	ldr	r3, [pc, #260]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x186>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1d3      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b3b      	ldr	r3, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4937      	ldr	r1, [pc, #220]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e03a      	b.n	800254e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_RCC_OscConfig+0x278>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7ff f903 	bl	80016f0 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7ff f8ff 	bl	80016f0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e1b4      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b2b      	ldr	r3, [pc, #172]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b28      	ldr	r3, [pc, #160]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4925      	ldr	r1, [pc, #148]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x278>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002528:	f7ff f8e2 	bl	80016f0 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff f8de 	bl	80016f0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e193      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	4b1b      	ldr	r3, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7ff f8c2 	bl	80016f0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff f8be 	bl	80016f0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e173      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_OscConfig+0x274>)
 8002584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x234>
 800258e:	e01b      	b.n	80025c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002596:	f7ff f8ab 	bl	80016f0 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800259c:	e00e      	b.n	80025bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259e:	f7ff f8a7 	bl	80016f0 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d907      	bls.n	80025bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e15c      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
 80025b0:	40023800 	.word	0x40023800
 80025b4:	42470000 	.word	0x42470000
 80025b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	4b8a      	ldr	r3, [pc, #552]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1ea      	bne.n	800259e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 8097 	beq.w	8002704 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025da:	4b83      	ldr	r3, [pc, #524]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	4b7f      	ldr	r3, [pc, #508]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	4a7e      	ldr	r2, [pc, #504]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f6:	4b7c      	ldr	r3, [pc, #496]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002602:	2301      	movs	r3, #1
 8002604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b79      	ldr	r3, [pc, #484]	@ (80027ec <HAL_RCC_OscConfig+0x4b0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d118      	bne.n	8002644 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002612:	4b76      	ldr	r3, [pc, #472]	@ (80027ec <HAL_RCC_OscConfig+0x4b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a75      	ldr	r2, [pc, #468]	@ (80027ec <HAL_RCC_OscConfig+0x4b0>)
 8002618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800261c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800261e:	f7ff f867 	bl	80016f0 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002626:	f7ff f863 	bl	80016f0 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e118      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <HAL_RCC_OscConfig+0x4b0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d106      	bne.n	800265a <HAL_RCC_OscConfig+0x31e>
 800264c:	4b66      	ldr	r3, [pc, #408]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002650:	4a65      	ldr	r2, [pc, #404]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	@ 0x70
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x358>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b05      	cmp	r3, #5
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0x340>
 8002662:	4b61      	ldr	r3, [pc, #388]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a60      	ldr	r2, [pc, #384]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
 800266e:	4b5e      	ldr	r3, [pc, #376]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002672:	4a5d      	ldr	r2, [pc, #372]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	6713      	str	r3, [r2, #112]	@ 0x70
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0x358>
 800267c:	4b5a      	ldr	r3, [pc, #360]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002680:	4a59      	ldr	r2, [pc, #356]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6713      	str	r3, [r2, #112]	@ 0x70
 8002688:	4b57      	ldr	r3, [pc, #348]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800268c:	4a56      	ldr	r2, [pc, #344]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 800268e:	f023 0304 	bic.w	r3, r3, #4
 8002692:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d015      	beq.n	80026c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269c:	f7ff f828 	bl	80016f0 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a4:	f7ff f824 	bl	80016f0 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e0d7      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	4b4b      	ldr	r3, [pc, #300]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ee      	beq.n	80026a4 <HAL_RCC_OscConfig+0x368>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7ff f812 	bl	80016f0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7ff f80e 	bl	80016f0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0c1      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e6:	4b40      	ldr	r3, [pc, #256]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1ee      	bne.n	80026d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d105      	bne.n	8002704 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f8:	4b3b      	ldr	r3, [pc, #236]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fc:	4a3a      	ldr	r2, [pc, #232]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002702:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80ad 	beq.w	8002868 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800270e:	4b36      	ldr	r3, [pc, #216]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b08      	cmp	r3, #8
 8002718:	d060      	beq.n	80027dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d145      	bne.n	80027ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b33      	ldr	r3, [pc, #204]	@ (80027f0 <HAL_RCC_OscConfig+0x4b4>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe ffe2 	bl	80016f0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe ffde 	bl	80016f0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e093      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b29      	ldr	r3, [pc, #164]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	085b      	lsrs	r3, r3, #1
 8002766:	3b01      	subs	r3, #1
 8002768:	041b      	lsls	r3, r3, #16
 800276a:	431a      	orrs	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002778:	071b      	lsls	r3, r3, #28
 800277a:	491b      	ldr	r1, [pc, #108]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x4b4>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe ffb3 	bl	80016f0 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe ffaf 	bl	80016f0 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e064      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x452>
 80027ac:	e05c      	b.n	8002868 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	@ (80027f0 <HAL_RCC_OscConfig+0x4b4>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe ff9c 	bl	80016f0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe ff98 	bl	80016f0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e04d      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x480>
 80027da:	e045      	b.n	8002868 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e040      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_RCC_OscConfig+0x538>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d030      	beq.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d129      	bne.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d122      	bne.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800282a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d119      	bne.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d10f      	bne.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800

08002878 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e041      	b.n	800290e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fd6a 	bl	8001378 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2202      	movs	r2, #2
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3304      	adds	r3, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f000 fafc 	bl	8002eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_TIM_OC_Start_IT+0x28>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e022      	b.n	8002986 <HAL_TIM_OC_Start_IT+0x6e>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d109      	bne.n	800295a <HAL_TIM_OC_Start_IT+0x42>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e015      	b.n	8002986 <HAL_TIM_OC_Start_IT+0x6e>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d109      	bne.n	8002974 <HAL_TIM_OC_Start_IT+0x5c>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e008      	b.n	8002986 <HAL_TIM_OC_Start_IT+0x6e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e0c7      	b.n	8002b1e <HAL_TIM_OC_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_TIM_OC_Start_IT+0x86>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800299c:	e013      	b.n	80029c6 <HAL_TIM_OC_Start_IT+0xae>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_OC_Start_IT+0x96>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029ac:	e00b      	b.n	80029c6 <HAL_TIM_OC_Start_IT+0xae>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d104      	bne.n	80029be <HAL_TIM_OC_Start_IT+0xa6>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029bc:	e003      	b.n	80029c6 <HAL_TIM_OC_Start_IT+0xae>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b0c      	cmp	r3, #12
 80029ca:	d841      	bhi.n	8002a50 <HAL_TIM_OC_Start_IT+0x138>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_TIM_OC_Start_IT+0xbc>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a09 	.word	0x08002a09
 80029d8:	08002a51 	.word	0x08002a51
 80029dc:	08002a51 	.word	0x08002a51
 80029e0:	08002a51 	.word	0x08002a51
 80029e4:	08002a1b 	.word	0x08002a1b
 80029e8:	08002a51 	.word	0x08002a51
 80029ec:	08002a51 	.word	0x08002a51
 80029f0:	08002a51 	.word	0x08002a51
 80029f4:	08002a2d 	.word	0x08002a2d
 80029f8:	08002a51 	.word	0x08002a51
 80029fc:	08002a51 	.word	0x08002a51
 8002a00:	08002a51 	.word	0x08002a51
 8002a04:	08002a3f 	.word	0x08002a3f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0202 	orr.w	r2, r2, #2
 8002a16:	60da      	str	r2, [r3, #12]
      break;
 8002a18:	e01d      	b.n	8002a56 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0204 	orr.w	r2, r2, #4
 8002a28:	60da      	str	r2, [r3, #12]
      break;
 8002a2a:	e014      	b.n	8002a56 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0208 	orr.w	r2, r2, #8
 8002a3a:	60da      	str	r2, [r3, #12]
      break;
 8002a3c:	e00b      	b.n	8002a56 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f042 0210 	orr.w	r2, r2, #16
 8002a4c:	60da      	str	r2, [r3, #12]
      break;
 8002a4e:	e002      	b.n	8002a56 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      break;
 8002a54:	bf00      	nop
  }

  if (status == HAL_OK)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d15f      	bne.n	8002b1c <HAL_TIM_OC_Start_IT+0x204>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2201      	movs	r2, #1
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fc81 	bl	800336c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b28 <HAL_TIM_OC_Start_IT+0x210>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d004      	beq.n	8002a7e <HAL_TIM_OC_Start_IT+0x166>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2c      	ldr	r2, [pc, #176]	@ (8002b2c <HAL_TIM_OC_Start_IT+0x214>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_OC_Start_IT+0x16a>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <HAL_TIM_OC_Start_IT+0x16c>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_TIM_OC_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <HAL_TIM_OC_Start_IT+0x210>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d022      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aaa:	d01d      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_TIM_OC_Start_IT+0x218>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d018      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_TIM_OC_Start_IT+0x21c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d013      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b38 <HAL_TIM_OC_Start_IT+0x220>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00e      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <HAL_TIM_OC_Start_IT+0x214>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_TIM_OC_Start_IT+0x224>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIM_OC_Start_IT+0x1d0>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a17      	ldr	r2, [pc, #92]	@ (8002b40 <HAL_TIM_OC_Start_IT+0x228>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d111      	bne.n	8002b0c <HAL_TIM_OC_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d010      	beq.n	8002b1c <HAL_TIM_OC_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0a:	e007      	b.n	8002b1c <HAL_TIM_OC_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0201 	orr.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40010000 	.word	0x40010000
 8002b2c:	40010400 	.word	0x40010400
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40000800 	.word	0x40000800
 8002b38:	40000c00 	.word	0x40000c00
 8002b3c:	40014000 	.word	0x40014000
 8002b40:	40001800 	.word	0x40001800

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d020      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01b      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0202 	mvn.w	r2, #2
 8002b78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f972 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002b94:	e005      	b.n	8002ba2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fb22 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f975 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d020      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01b      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f94c 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7fe fafc 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f94f 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d020      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01b      	beq.n	8002c40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0208 	mvn.w	r2, #8
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2204      	movs	r2, #4
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f926 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fad6 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f929 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f003 0310 	and.w	r3, r3, #16
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d020      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f003 0310 	and.w	r3, r3, #16
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d01b      	beq.n	8002c8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0210 	mvn.w	r2, #16
 8002c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2208      	movs	r2, #8
 8002c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f900 	bl	8002e78 <HAL_TIM_IC_CaptureCallback>
 8002c78:	e005      	b.n	8002c86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fab0 	bl	80011e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f903 	bl	8002e8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f06f 0201 	mvn.w	r2, #1
 8002ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f8da 	bl	8002e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d007      	beq.n	8002cd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fb7b 	bl	80033ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00c      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d007      	beq.n	8002cf8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8d4 	bl	8002ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00c      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f06f 0220 	mvn.w	r2, #32
 8002d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fb4d 	bl	80033b6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d30:	2300      	movs	r3, #0
 8002d32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e048      	b.n	8002dd4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d839      	bhi.n	8002dc4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002dc5 	.word	0x08002dc5
 8002d60:	08002dc5 	.word	0x08002dc5
 8002d64:	08002dc5 	.word	0x08002dc5
 8002d68:	08002d9b 	.word	0x08002d9b
 8002d6c:	08002dc5 	.word	0x08002dc5
 8002d70:	08002dc5 	.word	0x08002dc5
 8002d74:	08002dc5 	.word	0x08002dc5
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002dc5 	.word	0x08002dc5
 8002d80:	08002dc5 	.word	0x08002dc5
 8002d84:	08002dc5 	.word	0x08002dc5
 8002d88:	08002db7 	.word	0x08002db7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 f93a 	bl	800300c <TIM_OC1_SetConfig>
      break;
 8002d98:	e017      	b.n	8002dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 f9a3 	bl	80030ec <TIM_OC2_SetConfig>
      break;
 8002da6:	e010      	b.n	8002dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68b9      	ldr	r1, [r7, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fa12 	bl	80031d8 <TIM_OC3_SetConfig>
      break;
 8002db4:	e009      	b.n	8002dca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68b9      	ldr	r1, [r7, #8]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fa7f 	bl	80032c0 <TIM_OC4_SetConfig>
      break;
 8002dc2:	e002      	b.n	8002dca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002dc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b0c      	cmp	r3, #12
 8002dee:	d831      	bhi.n	8002e54 <HAL_TIM_ReadCapturedValue+0x78>
 8002df0:	a201      	add	r2, pc, #4	@ (adr r2, 8002df8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e2d 	.word	0x08002e2d
 8002dfc:	08002e55 	.word	0x08002e55
 8002e00:	08002e55 	.word	0x08002e55
 8002e04:	08002e55 	.word	0x08002e55
 8002e08:	08002e37 	.word	0x08002e37
 8002e0c:	08002e55 	.word	0x08002e55
 8002e10:	08002e55 	.word	0x08002e55
 8002e14:	08002e55 	.word	0x08002e55
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e55 	.word	0x08002e55
 8002e20:	08002e55 	.word	0x08002e55
 8002e24:	08002e55 	.word	0x08002e55
 8002e28:	08002e4b 	.word	0x08002e4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	60fb      	str	r3, [r7, #12]

      break;
 8002e34:	e00f      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3c:	60fb      	str	r3, [r7, #12]

      break;
 8002e3e:	e00a      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e46:	60fb      	str	r3, [r7, #12]

      break;
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	60fb      	str	r3, [r7, #12]

      break;
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002e54:	bf00      	nop
  }

  return tmpreg;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a46      	ldr	r2, [pc, #280]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed2:	d00f      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a43      	ldr	r2, [pc, #268]	@ (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a42      	ldr	r2, [pc, #264]	@ (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a41      	ldr	r2, [pc, #260]	@ (8002fec <TIM_Base_SetConfig+0x138>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d003      	beq.n	8002ef4 <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d108      	bne.n	8002f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a35      	ldr	r2, [pc, #212]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d02b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f14:	d027      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a32      	ldr	r2, [pc, #200]	@ (8002fe4 <TIM_Base_SetConfig+0x130>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d023      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a31      	ldr	r2, [pc, #196]	@ (8002fe8 <TIM_Base_SetConfig+0x134>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a30      	ldr	r2, [pc, #192]	@ (8002fec <TIM_Base_SetConfig+0x138>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d01b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d017      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff4 <TIM_Base_SetConfig+0x140>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff8 <TIM_Base_SetConfig+0x144>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00f      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	@ (8002ffc <TIM_Base_SetConfig+0x148>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	@ (8003000 <TIM_Base_SetConfig+0x14c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2a      	ldr	r2, [pc, #168]	@ (8003004 <TIM_Base_SetConfig+0x150>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a29      	ldr	r2, [pc, #164]	@ (8003008 <TIM_Base_SetConfig+0x154>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d108      	bne.n	8002f78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <TIM_Base_SetConfig+0x12c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_Base_SetConfig+0xf8>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <TIM_Base_SetConfig+0x13c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d103      	bne.n	8002fb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d105      	bne.n	8002fd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	611a      	str	r2, [r3, #16]
  }
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	40001800 	.word	0x40001800
 8003004:	40001c00 	.word	0x40001c00
 8003008:	40002000 	.word	0x40002000

0800300c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	f023 0201 	bic.w	r2, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0303 	bic.w	r3, r3, #3
 8003042:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 0302 	bic.w	r3, r3, #2
 8003054:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4313      	orrs	r3, r2
 800305e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a20      	ldr	r2, [pc, #128]	@ (80030e4 <TIM_OC1_SetConfig+0xd8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d003      	beq.n	8003070 <TIM_OC1_SetConfig+0x64>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1f      	ldr	r2, [pc, #124]	@ (80030e8 <TIM_OC1_SetConfig+0xdc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d10c      	bne.n	800308a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f023 0308 	bic.w	r3, r3, #8
 8003076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a15      	ldr	r2, [pc, #84]	@ (80030e4 <TIM_OC1_SetConfig+0xd8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d003      	beq.n	800309a <TIM_OC1_SetConfig+0x8e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a14      	ldr	r2, [pc, #80]	@ (80030e8 <TIM_OC1_SetConfig+0xdc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d111      	bne.n	80030be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	621a      	str	r2, [r3, #32]
}
 80030d8:	bf00      	nop
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010400 	.word	0x40010400

080030ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 0210 	bic.w	r2, r3, #16
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	021b      	lsls	r3, r3, #8
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4313      	orrs	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f023 0320 	bic.w	r3, r3, #32
 8003136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a22      	ldr	r2, [pc, #136]	@ (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d003      	beq.n	8003154 <TIM_OC2_SetConfig+0x68>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a21      	ldr	r2, [pc, #132]	@ (80031d4 <TIM_OC2_SetConfig+0xe8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10d      	bne.n	8003170 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800316e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a17      	ldr	r2, [pc, #92]	@ (80031d0 <TIM_OC2_SetConfig+0xe4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC2_SetConfig+0x94>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a16      	ldr	r2, [pc, #88]	@ (80031d4 <TIM_OC2_SetConfig+0xe8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d113      	bne.n	80031a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003186:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800318e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	621a      	str	r2, [r3, #32]
}
 80031c2:	bf00      	nop
 80031c4:	371c      	adds	r7, #28
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010400 	.word	0x40010400

080031d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b480      	push	{r7}
 80031da:	b087      	sub	sp, #28
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a21      	ldr	r2, [pc, #132]	@ (80032b8 <TIM_OC3_SetConfig+0xe0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d003      	beq.n	800323e <TIM_OC3_SetConfig+0x66>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a20      	ldr	r2, [pc, #128]	@ (80032bc <TIM_OC3_SetConfig+0xe4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d10d      	bne.n	800325a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003244:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	021b      	lsls	r3, r3, #8
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003258:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a16      	ldr	r2, [pc, #88]	@ (80032b8 <TIM_OC3_SetConfig+0xe0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d003      	beq.n	800326a <TIM_OC3_SetConfig+0x92>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a15      	ldr	r2, [pc, #84]	@ (80032bc <TIM_OC3_SetConfig+0xe4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d113      	bne.n	8003292 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4313      	orrs	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	621a      	str	r2, [r3, #32]
}
 80032ac:	bf00      	nop
 80032ae:	371c      	adds	r7, #28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40010000 	.word	0x40010000
 80032bc:	40010400 	.word	0x40010400

080032c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800330a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	031b      	lsls	r3, r3, #12
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <TIM_OC4_SetConfig+0xa4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC4_SetConfig+0x68>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a11      	ldr	r2, [pc, #68]	@ (8003368 <TIM_OC4_SetConfig+0xa8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d109      	bne.n	800333c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800332e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	019b      	lsls	r3, r3, #6
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	621a      	str	r2, [r3, #32]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2201      	movs	r2, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a1a      	ldr	r2, [r3, #32]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1a      	ldr	r2, [r3, #32]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	fa01 f303 	lsl.w	r3, r1, r3
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e042      	b.n	8003476 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d106      	bne.n	800340a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fd ff6f 	bl	80012e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2224      	movs	r2, #36	@ 0x24
 800340e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003420:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f82c 	bl	8003480 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003436:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003446:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003456:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003484:	b0c0      	sub	sp, #256	@ 0x100
 8003486:	af00      	add	r7, sp, #0
 8003488:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349c:	68d9      	ldr	r1, [r3, #12]
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	ea40 0301 	orr.w	r3, r0, r1
 80034a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	431a      	orrs	r2, r3
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80034d8:	f021 010c 	bic.w	r1, r1, #12
 80034dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80034e6:	430b      	orrs	r3, r1
 80034e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fa:	6999      	ldr	r1, [r3, #24]
 80034fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	ea40 0301 	orr.w	r3, r0, r1
 8003506:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b8f      	ldr	r3, [pc, #572]	@ (800374c <UART_SetConfig+0x2cc>)
 8003510:	429a      	cmp	r2, r3
 8003512:	d005      	beq.n	8003520 <UART_SetConfig+0xa0>
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b8d      	ldr	r3, [pc, #564]	@ (8003750 <UART_SetConfig+0x2d0>)
 800351c:	429a      	cmp	r2, r3
 800351e:	d104      	bne.n	800352a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7fe fcc8 	bl	8001eb4 <HAL_RCC_GetPCLK2Freq>
 8003524:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003528:	e003      	b.n	8003532 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800352a:	f7fe fcaf 	bl	8001e8c <HAL_RCC_GetPCLK1Freq>
 800352e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800353c:	f040 810c 	bne.w	8003758 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003544:	2200      	movs	r2, #0
 8003546:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800354a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800354e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	1891      	adds	r1, r2, r2
 8003558:	65b9      	str	r1, [r7, #88]	@ 0x58
 800355a:	415b      	adcs	r3, r3
 800355c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800355e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003562:	4621      	mov	r1, r4
 8003564:	eb12 0801 	adds.w	r8, r2, r1
 8003568:	4629      	mov	r1, r5
 800356a:	eb43 0901 	adc.w	r9, r3, r1
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	f04f 0300 	mov.w	r3, #0
 8003576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800357a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800357e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003582:	4690      	mov	r8, r2
 8003584:	4699      	mov	r9, r3
 8003586:	4623      	mov	r3, r4
 8003588:	eb18 0303 	adds.w	r3, r8, r3
 800358c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003590:	462b      	mov	r3, r5
 8003592:	eb49 0303 	adc.w	r3, r9, r3
 8003596:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80035a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80035aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80035ae:	460b      	mov	r3, r1
 80035b0:	18db      	adds	r3, r3, r3
 80035b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035b4:	4613      	mov	r3, r2
 80035b6:	eb42 0303 	adc.w	r3, r2, r3
 80035ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80035bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80035c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80035c4:	f7fd fb10 	bl	8000be8 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2302 	umull	r2, r3, r3, r2
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	011c      	lsls	r4, r3, #4
 80035d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80035e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80035e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035e8:	4642      	mov	r2, r8
 80035ea:	464b      	mov	r3, r9
 80035ec:	1891      	adds	r1, r2, r2
 80035ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035f0:	415b      	adcs	r3, r3
 80035f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035f8:	4641      	mov	r1, r8
 80035fa:	eb12 0a01 	adds.w	sl, r2, r1
 80035fe:	4649      	mov	r1, r9
 8003600:	eb43 0b01 	adc.w	fp, r3, r1
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003610:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003618:	4692      	mov	sl, r2
 800361a:	469b      	mov	fp, r3
 800361c:	4643      	mov	r3, r8
 800361e:	eb1a 0303 	adds.w	r3, sl, r3
 8003622:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003626:	464b      	mov	r3, r9
 8003628:	eb4b 0303 	adc.w	r3, fp, r3
 800362c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003640:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003644:	460b      	mov	r3, r1
 8003646:	18db      	adds	r3, r3, r3
 8003648:	643b      	str	r3, [r7, #64]	@ 0x40
 800364a:	4613      	mov	r3, r2
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	647b      	str	r3, [r7, #68]	@ 0x44
 8003652:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003656:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800365a:	f7fd fac5 	bl	8000be8 <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4611      	mov	r1, r2
 8003664:	4b3b      	ldr	r3, [pc, #236]	@ (8003754 <UART_SetConfig+0x2d4>)
 8003666:	fba3 2301 	umull	r2, r3, r3, r1
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	2264      	movs	r2, #100	@ 0x64
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	1acb      	subs	r3, r1, r3
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800367a:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <UART_SetConfig+0x2d4>)
 800367c:	fba3 2302 	umull	r2, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003688:	441c      	add	r4, r3
 800368a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800368e:	2200      	movs	r2, #0
 8003690:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003694:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003698:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800369c:	4642      	mov	r2, r8
 800369e:	464b      	mov	r3, r9
 80036a0:	1891      	adds	r1, r2, r2
 80036a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80036a4:	415b      	adcs	r3, r3
 80036a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80036ac:	4641      	mov	r1, r8
 80036ae:	1851      	adds	r1, r2, r1
 80036b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80036b2:	4649      	mov	r1, r9
 80036b4:	414b      	adcs	r3, r1
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80036c4:	4659      	mov	r1, fp
 80036c6:	00cb      	lsls	r3, r1, #3
 80036c8:	4651      	mov	r1, sl
 80036ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ce:	4651      	mov	r1, sl
 80036d0:	00ca      	lsls	r2, r1, #3
 80036d2:	4610      	mov	r0, r2
 80036d4:	4619      	mov	r1, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	4642      	mov	r2, r8
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80036e0:	464b      	mov	r3, r9
 80036e2:	460a      	mov	r2, r1
 80036e4:	eb42 0303 	adc.w	r3, r2, r3
 80036e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003700:	460b      	mov	r3, r1
 8003702:	18db      	adds	r3, r3, r3
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003706:	4613      	mov	r3, r2
 8003708:	eb42 0303 	adc.w	r3, r2, r3
 800370c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800370e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003712:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003716:	f7fd fa67 	bl	8000be8 <__aeabi_uldivmod>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <UART_SetConfig+0x2d4>)
 8003720:	fba3 1302 	umull	r1, r3, r3, r2
 8003724:	095b      	lsrs	r3, r3, #5
 8003726:	2164      	movs	r1, #100	@ 0x64
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	3332      	adds	r3, #50	@ 0x32
 8003732:	4a08      	ldr	r2, [pc, #32]	@ (8003754 <UART_SetConfig+0x2d4>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	095b      	lsrs	r3, r3, #5
 800373a:	f003 0207 	and.w	r2, r3, #7
 800373e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4422      	add	r2, r4
 8003746:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003748:	e106      	b.n	8003958 <UART_SetConfig+0x4d8>
 800374a:	bf00      	nop
 800374c:	40011000 	.word	0x40011000
 8003750:	40011400 	.word	0x40011400
 8003754:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800375c:	2200      	movs	r2, #0
 800375e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003762:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003766:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800376a:	4642      	mov	r2, r8
 800376c:	464b      	mov	r3, r9
 800376e:	1891      	adds	r1, r2, r2
 8003770:	6239      	str	r1, [r7, #32]
 8003772:	415b      	adcs	r3, r3
 8003774:	627b      	str	r3, [r7, #36]	@ 0x24
 8003776:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800377a:	4641      	mov	r1, r8
 800377c:	1854      	adds	r4, r2, r1
 800377e:	4649      	mov	r1, r9
 8003780:	eb43 0501 	adc.w	r5, r3, r1
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	00eb      	lsls	r3, r5, #3
 800378e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003792:	00e2      	lsls	r2, r4, #3
 8003794:	4614      	mov	r4, r2
 8003796:	461d      	mov	r5, r3
 8003798:	4643      	mov	r3, r8
 800379a:	18e3      	adds	r3, r4, r3
 800379c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80037a0:	464b      	mov	r3, r9
 80037a2:	eb45 0303 	adc.w	r3, r5, r3
 80037a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80037aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	f04f 0300 	mov.w	r3, #0
 80037c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80037c6:	4629      	mov	r1, r5
 80037c8:	008b      	lsls	r3, r1, #2
 80037ca:	4621      	mov	r1, r4
 80037cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d0:	4621      	mov	r1, r4
 80037d2:	008a      	lsls	r2, r1, #2
 80037d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80037d8:	f7fd fa06 	bl	8000be8 <__aeabi_uldivmod>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4b60      	ldr	r3, [pc, #384]	@ (8003964 <UART_SetConfig+0x4e4>)
 80037e2:	fba3 2302 	umull	r2, r3, r3, r2
 80037e6:	095b      	lsrs	r3, r3, #5
 80037e8:	011c      	lsls	r4, r3, #4
 80037ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037ee:	2200      	movs	r2, #0
 80037f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037fc:	4642      	mov	r2, r8
 80037fe:	464b      	mov	r3, r9
 8003800:	1891      	adds	r1, r2, r2
 8003802:	61b9      	str	r1, [r7, #24]
 8003804:	415b      	adcs	r3, r3
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800380c:	4641      	mov	r1, r8
 800380e:	1851      	adds	r1, r2, r1
 8003810:	6139      	str	r1, [r7, #16]
 8003812:	4649      	mov	r1, r9
 8003814:	414b      	adcs	r3, r1
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003824:	4659      	mov	r1, fp
 8003826:	00cb      	lsls	r3, r1, #3
 8003828:	4651      	mov	r1, sl
 800382a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382e:	4651      	mov	r1, sl
 8003830:	00ca      	lsls	r2, r1, #3
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	4603      	mov	r3, r0
 8003838:	4642      	mov	r2, r8
 800383a:	189b      	adds	r3, r3, r2
 800383c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003840:	464b      	mov	r3, r9
 8003842:	460a      	mov	r2, r1
 8003844:	eb42 0303 	adc.w	r3, r2, r3
 8003848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003856:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003864:	4649      	mov	r1, r9
 8003866:	008b      	lsls	r3, r1, #2
 8003868:	4641      	mov	r1, r8
 800386a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800386e:	4641      	mov	r1, r8
 8003870:	008a      	lsls	r2, r1, #2
 8003872:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003876:	f7fd f9b7 	bl	8000be8 <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4611      	mov	r1, r2
 8003880:	4b38      	ldr	r3, [pc, #224]	@ (8003964 <UART_SetConfig+0x4e4>)
 8003882:	fba3 2301 	umull	r2, r3, r3, r1
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2264      	movs	r2, #100	@ 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	3332      	adds	r3, #50	@ 0x32
 8003894:	4a33      	ldr	r2, [pc, #204]	@ (8003964 <UART_SetConfig+0x4e4>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a0:	441c      	add	r4, r3
 80038a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a6:	2200      	movs	r2, #0
 80038a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80038aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80038ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	415b      	adcs	r3, r3
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038c0:	4641      	mov	r1, r8
 80038c2:	1851      	adds	r1, r2, r1
 80038c4:	6039      	str	r1, [r7, #0]
 80038c6:	4649      	mov	r1, r9
 80038c8:	414b      	adcs	r3, r1
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038d8:	4659      	mov	r1, fp
 80038da:	00cb      	lsls	r3, r1, #3
 80038dc:	4651      	mov	r1, sl
 80038de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038e2:	4651      	mov	r1, sl
 80038e4:	00ca      	lsls	r2, r1, #3
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	4642      	mov	r2, r8
 80038ee:	189b      	adds	r3, r3, r2
 80038f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038f2:	464b      	mov	r3, r9
 80038f4:	460a      	mov	r2, r1
 80038f6:	eb42 0303 	adc.w	r3, r2, r3
 80038fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	663b      	str	r3, [r7, #96]	@ 0x60
 8003906:	667a      	str	r2, [r7, #100]	@ 0x64
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003914:	4649      	mov	r1, r9
 8003916:	008b      	lsls	r3, r1, #2
 8003918:	4641      	mov	r1, r8
 800391a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391e:	4641      	mov	r1, r8
 8003920:	008a      	lsls	r2, r1, #2
 8003922:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003926:	f7fd f95f 	bl	8000be8 <__aeabi_uldivmod>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4b0d      	ldr	r3, [pc, #52]	@ (8003964 <UART_SetConfig+0x4e4>)
 8003930:	fba3 1302 	umull	r1, r3, r3, r2
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	2164      	movs	r1, #100	@ 0x64
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	3332      	adds	r3, #50	@ 0x32
 8003942:	4a08      	ldr	r2, [pc, #32]	@ (8003964 <UART_SetConfig+0x4e4>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	f003 020f 	and.w	r2, r3, #15
 800394e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4422      	add	r2, r4
 8003956:	609a      	str	r2, [r3, #8]
}
 8003958:	bf00      	nop
 800395a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800395e:	46bd      	mov	sp, r7
 8003960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003964:	51eb851f 	.word	0x51eb851f

08003968 <__cvt>:
 8003968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800396c:	ec57 6b10 	vmov	r6, r7, d0
 8003970:	2f00      	cmp	r7, #0
 8003972:	460c      	mov	r4, r1
 8003974:	4619      	mov	r1, r3
 8003976:	463b      	mov	r3, r7
 8003978:	bfbb      	ittet	lt
 800397a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800397e:	461f      	movlt	r7, r3
 8003980:	2300      	movge	r3, #0
 8003982:	232d      	movlt	r3, #45	@ 0x2d
 8003984:	700b      	strb	r3, [r1, #0]
 8003986:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003988:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800398c:	4691      	mov	r9, r2
 800398e:	f023 0820 	bic.w	r8, r3, #32
 8003992:	bfbc      	itt	lt
 8003994:	4632      	movlt	r2, r6
 8003996:	4616      	movlt	r6, r2
 8003998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800399c:	d005      	beq.n	80039aa <__cvt+0x42>
 800399e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80039a2:	d100      	bne.n	80039a6 <__cvt+0x3e>
 80039a4:	3401      	adds	r4, #1
 80039a6:	2102      	movs	r1, #2
 80039a8:	e000      	b.n	80039ac <__cvt+0x44>
 80039aa:	2103      	movs	r1, #3
 80039ac:	ab03      	add	r3, sp, #12
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	ab02      	add	r3, sp, #8
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	ec47 6b10 	vmov	d0, r6, r7
 80039b8:	4653      	mov	r3, sl
 80039ba:	4622      	mov	r2, r4
 80039bc:	f000 fe3c 	bl	8004638 <_dtoa_r>
 80039c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80039c4:	4605      	mov	r5, r0
 80039c6:	d119      	bne.n	80039fc <__cvt+0x94>
 80039c8:	f019 0f01 	tst.w	r9, #1
 80039cc:	d00e      	beq.n	80039ec <__cvt+0x84>
 80039ce:	eb00 0904 	add.w	r9, r0, r4
 80039d2:	2200      	movs	r2, #0
 80039d4:	2300      	movs	r3, #0
 80039d6:	4630      	mov	r0, r6
 80039d8:	4639      	mov	r1, r7
 80039da:	f7fd f895 	bl	8000b08 <__aeabi_dcmpeq>
 80039de:	b108      	cbz	r0, 80039e4 <__cvt+0x7c>
 80039e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80039e4:	2230      	movs	r2, #48	@ 0x30
 80039e6:	9b03      	ldr	r3, [sp, #12]
 80039e8:	454b      	cmp	r3, r9
 80039ea:	d31e      	bcc.n	8003a2a <__cvt+0xc2>
 80039ec:	9b03      	ldr	r3, [sp, #12]
 80039ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80039f0:	1b5b      	subs	r3, r3, r5
 80039f2:	4628      	mov	r0, r5
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	b004      	add	sp, #16
 80039f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a00:	eb00 0904 	add.w	r9, r0, r4
 8003a04:	d1e5      	bne.n	80039d2 <__cvt+0x6a>
 8003a06:	7803      	ldrb	r3, [r0, #0]
 8003a08:	2b30      	cmp	r3, #48	@ 0x30
 8003a0a:	d10a      	bne.n	8003a22 <__cvt+0xba>
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2300      	movs	r3, #0
 8003a10:	4630      	mov	r0, r6
 8003a12:	4639      	mov	r1, r7
 8003a14:	f7fd f878 	bl	8000b08 <__aeabi_dcmpeq>
 8003a18:	b918      	cbnz	r0, 8003a22 <__cvt+0xba>
 8003a1a:	f1c4 0401 	rsb	r4, r4, #1
 8003a1e:	f8ca 4000 	str.w	r4, [sl]
 8003a22:	f8da 3000 	ldr.w	r3, [sl]
 8003a26:	4499      	add	r9, r3
 8003a28:	e7d3      	b.n	80039d2 <__cvt+0x6a>
 8003a2a:	1c59      	adds	r1, r3, #1
 8003a2c:	9103      	str	r1, [sp, #12]
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e7d9      	b.n	80039e6 <__cvt+0x7e>

08003a32 <__exponent>:
 8003a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a34:	2900      	cmp	r1, #0
 8003a36:	bfba      	itte	lt
 8003a38:	4249      	neglt	r1, r1
 8003a3a:	232d      	movlt	r3, #45	@ 0x2d
 8003a3c:	232b      	movge	r3, #43	@ 0x2b
 8003a3e:	2909      	cmp	r1, #9
 8003a40:	7002      	strb	r2, [r0, #0]
 8003a42:	7043      	strb	r3, [r0, #1]
 8003a44:	dd29      	ble.n	8003a9a <__exponent+0x68>
 8003a46:	f10d 0307 	add.w	r3, sp, #7
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	270a      	movs	r7, #10
 8003a4e:	461a      	mov	r2, r3
 8003a50:	fbb1 f6f7 	udiv	r6, r1, r7
 8003a54:	fb07 1416 	mls	r4, r7, r6, r1
 8003a58:	3430      	adds	r4, #48	@ 0x30
 8003a5a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003a5e:	460c      	mov	r4, r1
 8003a60:	2c63      	cmp	r4, #99	@ 0x63
 8003a62:	f103 33ff 	add.w	r3, r3, #4294967295
 8003a66:	4631      	mov	r1, r6
 8003a68:	dcf1      	bgt.n	8003a4e <__exponent+0x1c>
 8003a6a:	3130      	adds	r1, #48	@ 0x30
 8003a6c:	1e94      	subs	r4, r2, #2
 8003a6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003a72:	1c41      	adds	r1, r0, #1
 8003a74:	4623      	mov	r3, r4
 8003a76:	42ab      	cmp	r3, r5
 8003a78:	d30a      	bcc.n	8003a90 <__exponent+0x5e>
 8003a7a:	f10d 0309 	add.w	r3, sp, #9
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	42ac      	cmp	r4, r5
 8003a82:	bf88      	it	hi
 8003a84:	2300      	movhi	r3, #0
 8003a86:	3302      	adds	r3, #2
 8003a88:	4403      	add	r3, r0
 8003a8a:	1a18      	subs	r0, r3, r0
 8003a8c:	b003      	add	sp, #12
 8003a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a90:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003a94:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003a98:	e7ed      	b.n	8003a76 <__exponent+0x44>
 8003a9a:	2330      	movs	r3, #48	@ 0x30
 8003a9c:	3130      	adds	r1, #48	@ 0x30
 8003a9e:	7083      	strb	r3, [r0, #2]
 8003aa0:	70c1      	strb	r1, [r0, #3]
 8003aa2:	1d03      	adds	r3, r0, #4
 8003aa4:	e7f1      	b.n	8003a8a <__exponent+0x58>
	...

08003aa8 <_printf_float>:
 8003aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aac:	b08d      	sub	sp, #52	@ 0x34
 8003aae:	460c      	mov	r4, r1
 8003ab0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ab4:	4616      	mov	r6, r2
 8003ab6:	461f      	mov	r7, r3
 8003ab8:	4605      	mov	r5, r0
 8003aba:	f000 fcbb 	bl	8004434 <_localeconv_r>
 8003abe:	6803      	ldr	r3, [r0, #0]
 8003ac0:	9304      	str	r3, [sp, #16]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fbf4 	bl	80002b0 <strlen>
 8003ac8:	2300      	movs	r3, #0
 8003aca:	930a      	str	r3, [sp, #40]	@ 0x28
 8003acc:	f8d8 3000 	ldr.w	r3, [r8]
 8003ad0:	9005      	str	r0, [sp, #20]
 8003ad2:	3307      	adds	r3, #7
 8003ad4:	f023 0307 	bic.w	r3, r3, #7
 8003ad8:	f103 0208 	add.w	r2, r3, #8
 8003adc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ae0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ae4:	f8c8 2000 	str.w	r2, [r8]
 8003ae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003af0:	9307      	str	r3, [sp, #28]
 8003af2:	f8cd 8018 	str.w	r8, [sp, #24]
 8003af6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003afe:	4b9c      	ldr	r3, [pc, #624]	@ (8003d70 <_printf_float+0x2c8>)
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	f7fd f832 	bl	8000b6c <__aeabi_dcmpun>
 8003b08:	bb70      	cbnz	r0, 8003b68 <_printf_float+0xc0>
 8003b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b0e:	4b98      	ldr	r3, [pc, #608]	@ (8003d70 <_printf_float+0x2c8>)
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	f7fd f80c 	bl	8000b30 <__aeabi_dcmple>
 8003b18:	bb30      	cbnz	r0, 8003b68 <_printf_float+0xc0>
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fffb 	bl	8000b1c <__aeabi_dcmplt>
 8003b26:	b110      	cbz	r0, 8003b2e <_printf_float+0x86>
 8003b28:	232d      	movs	r3, #45	@ 0x2d
 8003b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b2e:	4a91      	ldr	r2, [pc, #580]	@ (8003d74 <_printf_float+0x2cc>)
 8003b30:	4b91      	ldr	r3, [pc, #580]	@ (8003d78 <_printf_float+0x2d0>)
 8003b32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003b36:	bf94      	ite	ls
 8003b38:	4690      	movls	r8, r2
 8003b3a:	4698      	movhi	r8, r3
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	6123      	str	r3, [r4, #16]
 8003b40:	f02b 0304 	bic.w	r3, fp, #4
 8003b44:	6023      	str	r3, [r4, #0]
 8003b46:	f04f 0900 	mov.w	r9, #0
 8003b4a:	9700      	str	r7, [sp, #0]
 8003b4c:	4633      	mov	r3, r6
 8003b4e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003b50:	4621      	mov	r1, r4
 8003b52:	4628      	mov	r0, r5
 8003b54:	f000 f9d2 	bl	8003efc <_printf_common>
 8003b58:	3001      	adds	r0, #1
 8003b5a:	f040 808d 	bne.w	8003c78 <_printf_float+0x1d0>
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	b00d      	add	sp, #52	@ 0x34
 8003b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	4640      	mov	r0, r8
 8003b6e:	4649      	mov	r1, r9
 8003b70:	f7fc fffc 	bl	8000b6c <__aeabi_dcmpun>
 8003b74:	b140      	cbz	r0, 8003b88 <_printf_float+0xe0>
 8003b76:	464b      	mov	r3, r9
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bfbc      	itt	lt
 8003b7c:	232d      	movlt	r3, #45	@ 0x2d
 8003b7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003b82:	4a7e      	ldr	r2, [pc, #504]	@ (8003d7c <_printf_float+0x2d4>)
 8003b84:	4b7e      	ldr	r3, [pc, #504]	@ (8003d80 <_printf_float+0x2d8>)
 8003b86:	e7d4      	b.n	8003b32 <_printf_float+0x8a>
 8003b88:	6863      	ldr	r3, [r4, #4]
 8003b8a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003b8e:	9206      	str	r2, [sp, #24]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	d13b      	bne.n	8003c0c <_printf_float+0x164>
 8003b94:	2306      	movs	r3, #6
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	6022      	str	r2, [r4, #0]
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	ab0a      	add	r3, sp, #40	@ 0x28
 8003ba4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003ba8:	ab09      	add	r3, sp, #36	@ 0x24
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	6861      	ldr	r1, [r4, #4]
 8003bae:	ec49 8b10 	vmov	d0, r8, r9
 8003bb2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f7ff fed6 	bl	8003968 <__cvt>
 8003bbc:	9b06      	ldr	r3, [sp, #24]
 8003bbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003bc0:	2b47      	cmp	r3, #71	@ 0x47
 8003bc2:	4680      	mov	r8, r0
 8003bc4:	d129      	bne.n	8003c1a <_printf_float+0x172>
 8003bc6:	1cc8      	adds	r0, r1, #3
 8003bc8:	db02      	blt.n	8003bd0 <_printf_float+0x128>
 8003bca:	6863      	ldr	r3, [r4, #4]
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	dd41      	ble.n	8003c54 <_printf_float+0x1ac>
 8003bd0:	f1aa 0a02 	sub.w	sl, sl, #2
 8003bd4:	fa5f fa8a 	uxtb.w	sl, sl
 8003bd8:	3901      	subs	r1, #1
 8003bda:	4652      	mov	r2, sl
 8003bdc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003be0:	9109      	str	r1, [sp, #36]	@ 0x24
 8003be2:	f7ff ff26 	bl	8003a32 <__exponent>
 8003be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003be8:	1813      	adds	r3, r2, r0
 8003bea:	2a01      	cmp	r2, #1
 8003bec:	4681      	mov	r9, r0
 8003bee:	6123      	str	r3, [r4, #16]
 8003bf0:	dc02      	bgt.n	8003bf8 <_printf_float+0x150>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	07d2      	lsls	r2, r2, #31
 8003bf6:	d501      	bpl.n	8003bfc <_printf_float+0x154>
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0a2      	beq.n	8003b4a <_printf_float+0xa2>
 8003c04:	232d      	movs	r3, #45	@ 0x2d
 8003c06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c0a:	e79e      	b.n	8003b4a <_printf_float+0xa2>
 8003c0c:	9a06      	ldr	r2, [sp, #24]
 8003c0e:	2a47      	cmp	r2, #71	@ 0x47
 8003c10:	d1c2      	bne.n	8003b98 <_printf_float+0xf0>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1c0      	bne.n	8003b98 <_printf_float+0xf0>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e7bd      	b.n	8003b96 <_printf_float+0xee>
 8003c1a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c1e:	d9db      	bls.n	8003bd8 <_printf_float+0x130>
 8003c20:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003c24:	d118      	bne.n	8003c58 <_printf_float+0x1b0>
 8003c26:	2900      	cmp	r1, #0
 8003c28:	6863      	ldr	r3, [r4, #4]
 8003c2a:	dd0b      	ble.n	8003c44 <_printf_float+0x19c>
 8003c2c:	6121      	str	r1, [r4, #16]
 8003c2e:	b913      	cbnz	r3, 8003c36 <_printf_float+0x18e>
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	07d0      	lsls	r0, r2, #31
 8003c34:	d502      	bpl.n	8003c3c <_printf_float+0x194>
 8003c36:	3301      	adds	r3, #1
 8003c38:	440b      	add	r3, r1
 8003c3a:	6123      	str	r3, [r4, #16]
 8003c3c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003c3e:	f04f 0900 	mov.w	r9, #0
 8003c42:	e7db      	b.n	8003bfc <_printf_float+0x154>
 8003c44:	b913      	cbnz	r3, 8003c4c <_printf_float+0x1a4>
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	07d2      	lsls	r2, r2, #31
 8003c4a:	d501      	bpl.n	8003c50 <_printf_float+0x1a8>
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	e7f4      	b.n	8003c3a <_printf_float+0x192>
 8003c50:	2301      	movs	r3, #1
 8003c52:	e7f2      	b.n	8003c3a <_printf_float+0x192>
 8003c54:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003c58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	db05      	blt.n	8003c6a <_printf_float+0x1c2>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	6121      	str	r1, [r4, #16]
 8003c62:	07d8      	lsls	r0, r3, #31
 8003c64:	d5ea      	bpl.n	8003c3c <_printf_float+0x194>
 8003c66:	1c4b      	adds	r3, r1, #1
 8003c68:	e7e7      	b.n	8003c3a <_printf_float+0x192>
 8003c6a:	2900      	cmp	r1, #0
 8003c6c:	bfd4      	ite	le
 8003c6e:	f1c1 0202 	rsble	r2, r1, #2
 8003c72:	2201      	movgt	r2, #1
 8003c74:	4413      	add	r3, r2
 8003c76:	e7e0      	b.n	8003c3a <_printf_float+0x192>
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	055a      	lsls	r2, r3, #21
 8003c7c:	d407      	bmi.n	8003c8e <_printf_float+0x1e6>
 8003c7e:	6923      	ldr	r3, [r4, #16]
 8003c80:	4642      	mov	r2, r8
 8003c82:	4631      	mov	r1, r6
 8003c84:	4628      	mov	r0, r5
 8003c86:	47b8      	blx	r7
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d12b      	bne.n	8003ce4 <_printf_float+0x23c>
 8003c8c:	e767      	b.n	8003b5e <_printf_float+0xb6>
 8003c8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003c92:	f240 80dd 	bls.w	8003e50 <_printf_float+0x3a8>
 8003c96:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f7fc ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	d033      	beq.n	8003d0e <_printf_float+0x266>
 8003ca6:	4a37      	ldr	r2, [pc, #220]	@ (8003d84 <_printf_float+0x2dc>)
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f af54 	beq.w	8003b5e <_printf_float+0xb6>
 8003cb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003cba:	4543      	cmp	r3, r8
 8003cbc:	db02      	blt.n	8003cc4 <_printf_float+0x21c>
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	07d8      	lsls	r0, r3, #31
 8003cc2:	d50f      	bpl.n	8003ce4 <_printf_float+0x23c>
 8003cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003cc8:	4631      	mov	r1, r6
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	f43f af45 	beq.w	8003b5e <_printf_float+0xb6>
 8003cd4:	f04f 0900 	mov.w	r9, #0
 8003cd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8003cdc:	f104 0a1a 	add.w	sl, r4, #26
 8003ce0:	45c8      	cmp	r8, r9
 8003ce2:	dc09      	bgt.n	8003cf8 <_printf_float+0x250>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	079b      	lsls	r3, r3, #30
 8003ce8:	f100 8103 	bmi.w	8003ef2 <_printf_float+0x44a>
 8003cec:	68e0      	ldr	r0, [r4, #12]
 8003cee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003cf0:	4298      	cmp	r0, r3
 8003cf2:	bfb8      	it	lt
 8003cf4:	4618      	movlt	r0, r3
 8003cf6:	e734      	b.n	8003b62 <_printf_float+0xba>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	4652      	mov	r2, sl
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	f43f af2b 	beq.w	8003b5e <_printf_float+0xb6>
 8003d08:	f109 0901 	add.w	r9, r9, #1
 8003d0c:	e7e8      	b.n	8003ce0 <_printf_float+0x238>
 8003d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	dc39      	bgt.n	8003d88 <_printf_float+0x2e0>
 8003d14:	4a1b      	ldr	r2, [pc, #108]	@ (8003d84 <_printf_float+0x2dc>)
 8003d16:	2301      	movs	r3, #1
 8003d18:	4631      	mov	r1, r6
 8003d1a:	4628      	mov	r0, r5
 8003d1c:	47b8      	blx	r7
 8003d1e:	3001      	adds	r0, #1
 8003d20:	f43f af1d 	beq.w	8003b5e <_printf_float+0xb6>
 8003d24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003d28:	ea59 0303 	orrs.w	r3, r9, r3
 8003d2c:	d102      	bne.n	8003d34 <_printf_float+0x28c>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	07d9      	lsls	r1, r3, #31
 8003d32:	d5d7      	bpl.n	8003ce4 <_printf_float+0x23c>
 8003d34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d38:	4631      	mov	r1, r6
 8003d3a:	4628      	mov	r0, r5
 8003d3c:	47b8      	blx	r7
 8003d3e:	3001      	adds	r0, #1
 8003d40:	f43f af0d 	beq.w	8003b5e <_printf_float+0xb6>
 8003d44:	f04f 0a00 	mov.w	sl, #0
 8003d48:	f104 0b1a 	add.w	fp, r4, #26
 8003d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d4e:	425b      	negs	r3, r3
 8003d50:	4553      	cmp	r3, sl
 8003d52:	dc01      	bgt.n	8003d58 <_printf_float+0x2b0>
 8003d54:	464b      	mov	r3, r9
 8003d56:	e793      	b.n	8003c80 <_printf_float+0x1d8>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	465a      	mov	r2, fp
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	4628      	mov	r0, r5
 8003d60:	47b8      	blx	r7
 8003d62:	3001      	adds	r0, #1
 8003d64:	f43f aefb 	beq.w	8003b5e <_printf_float+0xb6>
 8003d68:	f10a 0a01 	add.w	sl, sl, #1
 8003d6c:	e7ee      	b.n	8003d4c <_printf_float+0x2a4>
 8003d6e:	bf00      	nop
 8003d70:	7fefffff 	.word	0x7fefffff
 8003d74:	08006298 	.word	0x08006298
 8003d78:	0800629c 	.word	0x0800629c
 8003d7c:	080062a0 	.word	0x080062a0
 8003d80:	080062a4 	.word	0x080062a4
 8003d84:	080062a8 	.word	0x080062a8
 8003d88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d8a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d8e:	4553      	cmp	r3, sl
 8003d90:	bfa8      	it	ge
 8003d92:	4653      	movge	r3, sl
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	4699      	mov	r9, r3
 8003d98:	dc36      	bgt.n	8003e08 <_printf_float+0x360>
 8003d9a:	f04f 0b00 	mov.w	fp, #0
 8003d9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003da2:	f104 021a 	add.w	r2, r4, #26
 8003da6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003da8:	9306      	str	r3, [sp, #24]
 8003daa:	eba3 0309 	sub.w	r3, r3, r9
 8003dae:	455b      	cmp	r3, fp
 8003db0:	dc31      	bgt.n	8003e16 <_printf_float+0x36e>
 8003db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003db4:	459a      	cmp	sl, r3
 8003db6:	dc3a      	bgt.n	8003e2e <_printf_float+0x386>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	07da      	lsls	r2, r3, #31
 8003dbc:	d437      	bmi.n	8003e2e <_printf_float+0x386>
 8003dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dc0:	ebaa 0903 	sub.w	r9, sl, r3
 8003dc4:	9b06      	ldr	r3, [sp, #24]
 8003dc6:	ebaa 0303 	sub.w	r3, sl, r3
 8003dca:	4599      	cmp	r9, r3
 8003dcc:	bfa8      	it	ge
 8003dce:	4699      	movge	r9, r3
 8003dd0:	f1b9 0f00 	cmp.w	r9, #0
 8003dd4:	dc33      	bgt.n	8003e3e <_printf_float+0x396>
 8003dd6:	f04f 0800 	mov.w	r8, #0
 8003dda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dde:	f104 0b1a 	add.w	fp, r4, #26
 8003de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003de4:	ebaa 0303 	sub.w	r3, sl, r3
 8003de8:	eba3 0309 	sub.w	r3, r3, r9
 8003dec:	4543      	cmp	r3, r8
 8003dee:	f77f af79 	ble.w	8003ce4 <_printf_float+0x23c>
 8003df2:	2301      	movs	r3, #1
 8003df4:	465a      	mov	r2, fp
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b8      	blx	r7
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f43f aeae 	beq.w	8003b5e <_printf_float+0xb6>
 8003e02:	f108 0801 	add.w	r8, r8, #1
 8003e06:	e7ec      	b.n	8003de2 <_printf_float+0x33a>
 8003e08:	4642      	mov	r2, r8
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	d1c2      	bne.n	8003d9a <_printf_float+0x2f2>
 8003e14:	e6a3      	b.n	8003b5e <_printf_float+0xb6>
 8003e16:	2301      	movs	r3, #1
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4628      	mov	r0, r5
 8003e1c:	9206      	str	r2, [sp, #24]
 8003e1e:	47b8      	blx	r7
 8003e20:	3001      	adds	r0, #1
 8003e22:	f43f ae9c 	beq.w	8003b5e <_printf_float+0xb6>
 8003e26:	9a06      	ldr	r2, [sp, #24]
 8003e28:	f10b 0b01 	add.w	fp, fp, #1
 8003e2c:	e7bb      	b.n	8003da6 <_printf_float+0x2fe>
 8003e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	d1c0      	bne.n	8003dbe <_printf_float+0x316>
 8003e3c:	e68f      	b.n	8003b5e <_printf_float+0xb6>
 8003e3e:	9a06      	ldr	r2, [sp, #24]
 8003e40:	464b      	mov	r3, r9
 8003e42:	4442      	add	r2, r8
 8003e44:	4631      	mov	r1, r6
 8003e46:	4628      	mov	r0, r5
 8003e48:	47b8      	blx	r7
 8003e4a:	3001      	adds	r0, #1
 8003e4c:	d1c3      	bne.n	8003dd6 <_printf_float+0x32e>
 8003e4e:	e686      	b.n	8003b5e <_printf_float+0xb6>
 8003e50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003e54:	f1ba 0f01 	cmp.w	sl, #1
 8003e58:	dc01      	bgt.n	8003e5e <_printf_float+0x3b6>
 8003e5a:	07db      	lsls	r3, r3, #31
 8003e5c:	d536      	bpl.n	8003ecc <_printf_float+0x424>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	4642      	mov	r2, r8
 8003e62:	4631      	mov	r1, r6
 8003e64:	4628      	mov	r0, r5
 8003e66:	47b8      	blx	r7
 8003e68:	3001      	adds	r0, #1
 8003e6a:	f43f ae78 	beq.w	8003b5e <_printf_float+0xb6>
 8003e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e72:	4631      	mov	r1, r6
 8003e74:	4628      	mov	r0, r5
 8003e76:	47b8      	blx	r7
 8003e78:	3001      	adds	r0, #1
 8003e7a:	f43f ae70 	beq.w	8003b5e <_printf_float+0xb6>
 8003e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e82:	2200      	movs	r2, #0
 8003e84:	2300      	movs	r3, #0
 8003e86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e8a:	f7fc fe3d 	bl	8000b08 <__aeabi_dcmpeq>
 8003e8e:	b9c0      	cbnz	r0, 8003ec2 <_printf_float+0x41a>
 8003e90:	4653      	mov	r3, sl
 8003e92:	f108 0201 	add.w	r2, r8, #1
 8003e96:	4631      	mov	r1, r6
 8003e98:	4628      	mov	r0, r5
 8003e9a:	47b8      	blx	r7
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d10c      	bne.n	8003eba <_printf_float+0x412>
 8003ea0:	e65d      	b.n	8003b5e <_printf_float+0xb6>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	465a      	mov	r2, fp
 8003ea6:	4631      	mov	r1, r6
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b8      	blx	r7
 8003eac:	3001      	adds	r0, #1
 8003eae:	f43f ae56 	beq.w	8003b5e <_printf_float+0xb6>
 8003eb2:	f108 0801 	add.w	r8, r8, #1
 8003eb6:	45d0      	cmp	r8, sl
 8003eb8:	dbf3      	blt.n	8003ea2 <_printf_float+0x3fa>
 8003eba:	464b      	mov	r3, r9
 8003ebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003ec0:	e6df      	b.n	8003c82 <_printf_float+0x1da>
 8003ec2:	f04f 0800 	mov.w	r8, #0
 8003ec6:	f104 0b1a 	add.w	fp, r4, #26
 8003eca:	e7f4      	b.n	8003eb6 <_printf_float+0x40e>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	4642      	mov	r2, r8
 8003ed0:	e7e1      	b.n	8003e96 <_printf_float+0x3ee>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	464a      	mov	r2, r9
 8003ed6:	4631      	mov	r1, r6
 8003ed8:	4628      	mov	r0, r5
 8003eda:	47b8      	blx	r7
 8003edc:	3001      	adds	r0, #1
 8003ede:	f43f ae3e 	beq.w	8003b5e <_printf_float+0xb6>
 8003ee2:	f108 0801 	add.w	r8, r8, #1
 8003ee6:	68e3      	ldr	r3, [r4, #12]
 8003ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003eea:	1a5b      	subs	r3, r3, r1
 8003eec:	4543      	cmp	r3, r8
 8003eee:	dcf0      	bgt.n	8003ed2 <_printf_float+0x42a>
 8003ef0:	e6fc      	b.n	8003cec <_printf_float+0x244>
 8003ef2:	f04f 0800 	mov.w	r8, #0
 8003ef6:	f104 0919 	add.w	r9, r4, #25
 8003efa:	e7f4      	b.n	8003ee6 <_printf_float+0x43e>

08003efc <_printf_common>:
 8003efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	4616      	mov	r6, r2
 8003f02:	4698      	mov	r8, r3
 8003f04:	688a      	ldr	r2, [r1, #8]
 8003f06:	690b      	ldr	r3, [r1, #16]
 8003f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bfb8      	it	lt
 8003f10:	4613      	movlt	r3, r2
 8003f12:	6033      	str	r3, [r6, #0]
 8003f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f18:	4607      	mov	r7, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	b10a      	cbz	r2, 8003f22 <_printf_common+0x26>
 8003f1e:	3301      	adds	r3, #1
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	0699      	lsls	r1, r3, #26
 8003f26:	bf42      	ittt	mi
 8003f28:	6833      	ldrmi	r3, [r6, #0]
 8003f2a:	3302      	addmi	r3, #2
 8003f2c:	6033      	strmi	r3, [r6, #0]
 8003f2e:	6825      	ldr	r5, [r4, #0]
 8003f30:	f015 0506 	ands.w	r5, r5, #6
 8003f34:	d106      	bne.n	8003f44 <_printf_common+0x48>
 8003f36:	f104 0a19 	add.w	sl, r4, #25
 8003f3a:	68e3      	ldr	r3, [r4, #12]
 8003f3c:	6832      	ldr	r2, [r6, #0]
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	42ab      	cmp	r3, r5
 8003f42:	dc26      	bgt.n	8003f92 <_printf_common+0x96>
 8003f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	3b00      	subs	r3, #0
 8003f4c:	bf18      	it	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	0692      	lsls	r2, r2, #26
 8003f52:	d42b      	bmi.n	8003fac <_printf_common+0xb0>
 8003f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f58:	4641      	mov	r1, r8
 8003f5a:	4638      	mov	r0, r7
 8003f5c:	47c8      	blx	r9
 8003f5e:	3001      	adds	r0, #1
 8003f60:	d01e      	beq.n	8003fa0 <_printf_common+0xa4>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	f003 0306 	and.w	r3, r3, #6
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	bf02      	ittt	eq
 8003f6e:	68e5      	ldreq	r5, [r4, #12]
 8003f70:	6833      	ldreq	r3, [r6, #0]
 8003f72:	1aed      	subeq	r5, r5, r3
 8003f74:	68a3      	ldr	r3, [r4, #8]
 8003f76:	bf0c      	ite	eq
 8003f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f7c:	2500      	movne	r5, #0
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	bfc4      	itt	gt
 8003f82:	1a9b      	subgt	r3, r3, r2
 8003f84:	18ed      	addgt	r5, r5, r3
 8003f86:	2600      	movs	r6, #0
 8003f88:	341a      	adds	r4, #26
 8003f8a:	42b5      	cmp	r5, r6
 8003f8c:	d11a      	bne.n	8003fc4 <_printf_common+0xc8>
 8003f8e:	2000      	movs	r0, #0
 8003f90:	e008      	b.n	8003fa4 <_printf_common+0xa8>
 8003f92:	2301      	movs	r3, #1
 8003f94:	4652      	mov	r2, sl
 8003f96:	4641      	mov	r1, r8
 8003f98:	4638      	mov	r0, r7
 8003f9a:	47c8      	blx	r9
 8003f9c:	3001      	adds	r0, #1
 8003f9e:	d103      	bne.n	8003fa8 <_printf_common+0xac>
 8003fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa8:	3501      	adds	r5, #1
 8003faa:	e7c6      	b.n	8003f3a <_printf_common+0x3e>
 8003fac:	18e1      	adds	r1, r4, r3
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	2030      	movs	r0, #48	@ 0x30
 8003fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fb6:	4422      	add	r2, r4
 8003fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	e7c7      	b.n	8003f54 <_printf_common+0x58>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	4641      	mov	r1, r8
 8003fca:	4638      	mov	r0, r7
 8003fcc:	47c8      	blx	r9
 8003fce:	3001      	adds	r0, #1
 8003fd0:	d0e6      	beq.n	8003fa0 <_printf_common+0xa4>
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7d9      	b.n	8003f8a <_printf_common+0x8e>
	...

08003fd8 <_printf_i>:
 8003fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fdc:	7e0f      	ldrb	r7, [r1, #24]
 8003fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fe0:	2f78      	cmp	r7, #120	@ 0x78
 8003fe2:	4691      	mov	r9, r2
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	469a      	mov	sl, r3
 8003fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fee:	d807      	bhi.n	8004000 <_printf_i+0x28>
 8003ff0:	2f62      	cmp	r7, #98	@ 0x62
 8003ff2:	d80a      	bhi.n	800400a <_printf_i+0x32>
 8003ff4:	2f00      	cmp	r7, #0
 8003ff6:	f000 80d2 	beq.w	800419e <_printf_i+0x1c6>
 8003ffa:	2f58      	cmp	r7, #88	@ 0x58
 8003ffc:	f000 80b9 	beq.w	8004172 <_printf_i+0x19a>
 8004000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004008:	e03a      	b.n	8004080 <_printf_i+0xa8>
 800400a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800400e:	2b15      	cmp	r3, #21
 8004010:	d8f6      	bhi.n	8004000 <_printf_i+0x28>
 8004012:	a101      	add	r1, pc, #4	@ (adr r1, 8004018 <_printf_i+0x40>)
 8004014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004018:	08004071 	.word	0x08004071
 800401c:	08004085 	.word	0x08004085
 8004020:	08004001 	.word	0x08004001
 8004024:	08004001 	.word	0x08004001
 8004028:	08004001 	.word	0x08004001
 800402c:	08004001 	.word	0x08004001
 8004030:	08004085 	.word	0x08004085
 8004034:	08004001 	.word	0x08004001
 8004038:	08004001 	.word	0x08004001
 800403c:	08004001 	.word	0x08004001
 8004040:	08004001 	.word	0x08004001
 8004044:	08004185 	.word	0x08004185
 8004048:	080040af 	.word	0x080040af
 800404c:	0800413f 	.word	0x0800413f
 8004050:	08004001 	.word	0x08004001
 8004054:	08004001 	.word	0x08004001
 8004058:	080041a7 	.word	0x080041a7
 800405c:	08004001 	.word	0x08004001
 8004060:	080040af 	.word	0x080040af
 8004064:	08004001 	.word	0x08004001
 8004068:	08004001 	.word	0x08004001
 800406c:	08004147 	.word	0x08004147
 8004070:	6833      	ldr	r3, [r6, #0]
 8004072:	1d1a      	adds	r2, r3, #4
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6032      	str	r2, [r6, #0]
 8004078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800407c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004080:	2301      	movs	r3, #1
 8004082:	e09d      	b.n	80041c0 <_printf_i+0x1e8>
 8004084:	6833      	ldr	r3, [r6, #0]
 8004086:	6820      	ldr	r0, [r4, #0]
 8004088:	1d19      	adds	r1, r3, #4
 800408a:	6031      	str	r1, [r6, #0]
 800408c:	0606      	lsls	r6, r0, #24
 800408e:	d501      	bpl.n	8004094 <_printf_i+0xbc>
 8004090:	681d      	ldr	r5, [r3, #0]
 8004092:	e003      	b.n	800409c <_printf_i+0xc4>
 8004094:	0645      	lsls	r5, r0, #25
 8004096:	d5fb      	bpl.n	8004090 <_printf_i+0xb8>
 8004098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800409c:	2d00      	cmp	r5, #0
 800409e:	da03      	bge.n	80040a8 <_printf_i+0xd0>
 80040a0:	232d      	movs	r3, #45	@ 0x2d
 80040a2:	426d      	negs	r5, r5
 80040a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040a8:	4859      	ldr	r0, [pc, #356]	@ (8004210 <_printf_i+0x238>)
 80040aa:	230a      	movs	r3, #10
 80040ac:	e011      	b.n	80040d2 <_printf_i+0xfa>
 80040ae:	6821      	ldr	r1, [r4, #0]
 80040b0:	6833      	ldr	r3, [r6, #0]
 80040b2:	0608      	lsls	r0, r1, #24
 80040b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040b8:	d402      	bmi.n	80040c0 <_printf_i+0xe8>
 80040ba:	0649      	lsls	r1, r1, #25
 80040bc:	bf48      	it	mi
 80040be:	b2ad      	uxthmi	r5, r5
 80040c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040c2:	4853      	ldr	r0, [pc, #332]	@ (8004210 <_printf_i+0x238>)
 80040c4:	6033      	str	r3, [r6, #0]
 80040c6:	bf14      	ite	ne
 80040c8:	230a      	movne	r3, #10
 80040ca:	2308      	moveq	r3, #8
 80040cc:	2100      	movs	r1, #0
 80040ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040d2:	6866      	ldr	r6, [r4, #4]
 80040d4:	60a6      	str	r6, [r4, #8]
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	bfa2      	ittt	ge
 80040da:	6821      	ldrge	r1, [r4, #0]
 80040dc:	f021 0104 	bicge.w	r1, r1, #4
 80040e0:	6021      	strge	r1, [r4, #0]
 80040e2:	b90d      	cbnz	r5, 80040e8 <_printf_i+0x110>
 80040e4:	2e00      	cmp	r6, #0
 80040e6:	d04b      	beq.n	8004180 <_printf_i+0x1a8>
 80040e8:	4616      	mov	r6, r2
 80040ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ee:	fb03 5711 	mls	r7, r3, r1, r5
 80040f2:	5dc7      	ldrb	r7, [r0, r7]
 80040f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040f8:	462f      	mov	r7, r5
 80040fa:	42bb      	cmp	r3, r7
 80040fc:	460d      	mov	r5, r1
 80040fe:	d9f4      	bls.n	80040ea <_printf_i+0x112>
 8004100:	2b08      	cmp	r3, #8
 8004102:	d10b      	bne.n	800411c <_printf_i+0x144>
 8004104:	6823      	ldr	r3, [r4, #0]
 8004106:	07df      	lsls	r7, r3, #31
 8004108:	d508      	bpl.n	800411c <_printf_i+0x144>
 800410a:	6923      	ldr	r3, [r4, #16]
 800410c:	6861      	ldr	r1, [r4, #4]
 800410e:	4299      	cmp	r1, r3
 8004110:	bfde      	ittt	le
 8004112:	2330      	movle	r3, #48	@ 0x30
 8004114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800411c:	1b92      	subs	r2, r2, r6
 800411e:	6122      	str	r2, [r4, #16]
 8004120:	f8cd a000 	str.w	sl, [sp]
 8004124:	464b      	mov	r3, r9
 8004126:	aa03      	add	r2, sp, #12
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f7ff fee6 	bl	8003efc <_printf_common>
 8004130:	3001      	adds	r0, #1
 8004132:	d14a      	bne.n	80041ca <_printf_i+0x1f2>
 8004134:	f04f 30ff 	mov.w	r0, #4294967295
 8004138:	b004      	add	sp, #16
 800413a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f043 0320 	orr.w	r3, r3, #32
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	4833      	ldr	r0, [pc, #204]	@ (8004214 <_printf_i+0x23c>)
 8004148:	2778      	movs	r7, #120	@ 0x78
 800414a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	6831      	ldr	r1, [r6, #0]
 8004152:	061f      	lsls	r7, r3, #24
 8004154:	f851 5b04 	ldr.w	r5, [r1], #4
 8004158:	d402      	bmi.n	8004160 <_printf_i+0x188>
 800415a:	065f      	lsls	r7, r3, #25
 800415c:	bf48      	it	mi
 800415e:	b2ad      	uxthmi	r5, r5
 8004160:	6031      	str	r1, [r6, #0]
 8004162:	07d9      	lsls	r1, r3, #31
 8004164:	bf44      	itt	mi
 8004166:	f043 0320 	orrmi.w	r3, r3, #32
 800416a:	6023      	strmi	r3, [r4, #0]
 800416c:	b11d      	cbz	r5, 8004176 <_printf_i+0x19e>
 800416e:	2310      	movs	r3, #16
 8004170:	e7ac      	b.n	80040cc <_printf_i+0xf4>
 8004172:	4827      	ldr	r0, [pc, #156]	@ (8004210 <_printf_i+0x238>)
 8004174:	e7e9      	b.n	800414a <_printf_i+0x172>
 8004176:	6823      	ldr	r3, [r4, #0]
 8004178:	f023 0320 	bic.w	r3, r3, #32
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	e7f6      	b.n	800416e <_printf_i+0x196>
 8004180:	4616      	mov	r6, r2
 8004182:	e7bd      	b.n	8004100 <_printf_i+0x128>
 8004184:	6833      	ldr	r3, [r6, #0]
 8004186:	6825      	ldr	r5, [r4, #0]
 8004188:	6961      	ldr	r1, [r4, #20]
 800418a:	1d18      	adds	r0, r3, #4
 800418c:	6030      	str	r0, [r6, #0]
 800418e:	062e      	lsls	r6, r5, #24
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	d501      	bpl.n	8004198 <_printf_i+0x1c0>
 8004194:	6019      	str	r1, [r3, #0]
 8004196:	e002      	b.n	800419e <_printf_i+0x1c6>
 8004198:	0668      	lsls	r0, r5, #25
 800419a:	d5fb      	bpl.n	8004194 <_printf_i+0x1bc>
 800419c:	8019      	strh	r1, [r3, #0]
 800419e:	2300      	movs	r3, #0
 80041a0:	6123      	str	r3, [r4, #16]
 80041a2:	4616      	mov	r6, r2
 80041a4:	e7bc      	b.n	8004120 <_printf_i+0x148>
 80041a6:	6833      	ldr	r3, [r6, #0]
 80041a8:	1d1a      	adds	r2, r3, #4
 80041aa:	6032      	str	r2, [r6, #0]
 80041ac:	681e      	ldr	r6, [r3, #0]
 80041ae:	6862      	ldr	r2, [r4, #4]
 80041b0:	2100      	movs	r1, #0
 80041b2:	4630      	mov	r0, r6
 80041b4:	f7fc f82c 	bl	8000210 <memchr>
 80041b8:	b108      	cbz	r0, 80041be <_printf_i+0x1e6>
 80041ba:	1b80      	subs	r0, r0, r6
 80041bc:	6060      	str	r0, [r4, #4]
 80041be:	6863      	ldr	r3, [r4, #4]
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	2300      	movs	r3, #0
 80041c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c8:	e7aa      	b.n	8004120 <_printf_i+0x148>
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	4632      	mov	r2, r6
 80041ce:	4649      	mov	r1, r9
 80041d0:	4640      	mov	r0, r8
 80041d2:	47d0      	blx	sl
 80041d4:	3001      	adds	r0, #1
 80041d6:	d0ad      	beq.n	8004134 <_printf_i+0x15c>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	079b      	lsls	r3, r3, #30
 80041dc:	d413      	bmi.n	8004206 <_printf_i+0x22e>
 80041de:	68e0      	ldr	r0, [r4, #12]
 80041e0:	9b03      	ldr	r3, [sp, #12]
 80041e2:	4298      	cmp	r0, r3
 80041e4:	bfb8      	it	lt
 80041e6:	4618      	movlt	r0, r3
 80041e8:	e7a6      	b.n	8004138 <_printf_i+0x160>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4632      	mov	r2, r6
 80041ee:	4649      	mov	r1, r9
 80041f0:	4640      	mov	r0, r8
 80041f2:	47d0      	blx	sl
 80041f4:	3001      	adds	r0, #1
 80041f6:	d09d      	beq.n	8004134 <_printf_i+0x15c>
 80041f8:	3501      	adds	r5, #1
 80041fa:	68e3      	ldr	r3, [r4, #12]
 80041fc:	9903      	ldr	r1, [sp, #12]
 80041fe:	1a5b      	subs	r3, r3, r1
 8004200:	42ab      	cmp	r3, r5
 8004202:	dcf2      	bgt.n	80041ea <_printf_i+0x212>
 8004204:	e7eb      	b.n	80041de <_printf_i+0x206>
 8004206:	2500      	movs	r5, #0
 8004208:	f104 0619 	add.w	r6, r4, #25
 800420c:	e7f5      	b.n	80041fa <_printf_i+0x222>
 800420e:	bf00      	nop
 8004210:	080062aa 	.word	0x080062aa
 8004214:	080062bb 	.word	0x080062bb

08004218 <std>:
 8004218:	2300      	movs	r3, #0
 800421a:	b510      	push	{r4, lr}
 800421c:	4604      	mov	r4, r0
 800421e:	e9c0 3300 	strd	r3, r3, [r0]
 8004222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004226:	6083      	str	r3, [r0, #8]
 8004228:	8181      	strh	r1, [r0, #12]
 800422a:	6643      	str	r3, [r0, #100]	@ 0x64
 800422c:	81c2      	strh	r2, [r0, #14]
 800422e:	6183      	str	r3, [r0, #24]
 8004230:	4619      	mov	r1, r3
 8004232:	2208      	movs	r2, #8
 8004234:	305c      	adds	r0, #92	@ 0x5c
 8004236:	f000 f8f4 	bl	8004422 <memset>
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <std+0x58>)
 800423c:	6263      	str	r3, [r4, #36]	@ 0x24
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <std+0x5c>)
 8004240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <std+0x60>)
 8004244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <std+0x64>)
 8004248:	6323      	str	r3, [r4, #48]	@ 0x30
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <std+0x68>)
 800424c:	6224      	str	r4, [r4, #32]
 800424e:	429c      	cmp	r4, r3
 8004250:	d006      	beq.n	8004260 <std+0x48>
 8004252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004256:	4294      	cmp	r4, r2
 8004258:	d002      	beq.n	8004260 <std+0x48>
 800425a:	33d0      	adds	r3, #208	@ 0xd0
 800425c:	429c      	cmp	r4, r3
 800425e:	d105      	bne.n	800426c <std+0x54>
 8004260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f000 b958 	b.w	800451c <__retarget_lock_init_recursive>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	0800439d 	.word	0x0800439d
 8004274:	080043bf 	.word	0x080043bf
 8004278:	080043f7 	.word	0x080043f7
 800427c:	0800441b 	.word	0x0800441b
 8004280:	2000029c 	.word	0x2000029c

08004284 <stdio_exit_handler>:
 8004284:	4a02      	ldr	r2, [pc, #8]	@ (8004290 <stdio_exit_handler+0xc>)
 8004286:	4903      	ldr	r1, [pc, #12]	@ (8004294 <stdio_exit_handler+0x10>)
 8004288:	4803      	ldr	r0, [pc, #12]	@ (8004298 <stdio_exit_handler+0x14>)
 800428a:	f000 b869 	b.w	8004360 <_fwalk_sglue>
 800428e:	bf00      	nop
 8004290:	2000001c 	.word	0x2000001c
 8004294:	08005bcd 	.word	0x08005bcd
 8004298:	2000002c 	.word	0x2000002c

0800429c <cleanup_stdio>:
 800429c:	6841      	ldr	r1, [r0, #4]
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <cleanup_stdio+0x34>)
 80042a0:	4299      	cmp	r1, r3
 80042a2:	b510      	push	{r4, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	d001      	beq.n	80042ac <cleanup_stdio+0x10>
 80042a8:	f001 fc90 	bl	8005bcc <_fflush_r>
 80042ac:	68a1      	ldr	r1, [r4, #8]
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <cleanup_stdio+0x38>)
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d002      	beq.n	80042ba <cleanup_stdio+0x1e>
 80042b4:	4620      	mov	r0, r4
 80042b6:	f001 fc89 	bl	8005bcc <_fflush_r>
 80042ba:	68e1      	ldr	r1, [r4, #12]
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <cleanup_stdio+0x3c>)
 80042be:	4299      	cmp	r1, r3
 80042c0:	d004      	beq.n	80042cc <cleanup_stdio+0x30>
 80042c2:	4620      	mov	r0, r4
 80042c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c8:	f001 bc80 	b.w	8005bcc <_fflush_r>
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	2000029c 	.word	0x2000029c
 80042d4:	20000304 	.word	0x20000304
 80042d8:	2000036c 	.word	0x2000036c

080042dc <global_stdio_init.part.0>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <global_stdio_init.part.0+0x30>)
 80042e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004310 <global_stdio_init.part.0+0x34>)
 80042e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <global_stdio_init.part.0+0x38>)
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	4620      	mov	r0, r4
 80042e8:	2200      	movs	r2, #0
 80042ea:	2104      	movs	r1, #4
 80042ec:	f7ff ff94 	bl	8004218 <std>
 80042f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042f4:	2201      	movs	r2, #1
 80042f6:	2109      	movs	r1, #9
 80042f8:	f7ff ff8e 	bl	8004218 <std>
 80042fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004300:	2202      	movs	r2, #2
 8004302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004306:	2112      	movs	r1, #18
 8004308:	f7ff bf86 	b.w	8004218 <std>
 800430c:	200003d4 	.word	0x200003d4
 8004310:	2000029c 	.word	0x2000029c
 8004314:	08004285 	.word	0x08004285

08004318 <__sfp_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	@ (8004320 <__sfp_lock_acquire+0x8>)
 800431a:	f000 b900 	b.w	800451e <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	200003dd 	.word	0x200003dd

08004324 <__sfp_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	@ (800432c <__sfp_lock_release+0x8>)
 8004326:	f000 b8fb 	b.w	8004520 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	200003dd 	.word	0x200003dd

08004330 <__sinit>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	f7ff fff0 	bl	8004318 <__sfp_lock_acquire>
 8004338:	6a23      	ldr	r3, [r4, #32]
 800433a:	b11b      	cbz	r3, 8004344 <__sinit+0x14>
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f7ff bff0 	b.w	8004324 <__sfp_lock_release>
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <__sinit+0x28>)
 8004346:	6223      	str	r3, [r4, #32]
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <__sinit+0x2c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f5      	bne.n	800433c <__sinit+0xc>
 8004350:	f7ff ffc4 	bl	80042dc <global_stdio_init.part.0>
 8004354:	e7f2      	b.n	800433c <__sinit+0xc>
 8004356:	bf00      	nop
 8004358:	0800429d 	.word	0x0800429d
 800435c:	200003d4 	.word	0x200003d4

08004360 <_fwalk_sglue>:
 8004360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004364:	4607      	mov	r7, r0
 8004366:	4688      	mov	r8, r1
 8004368:	4614      	mov	r4, r2
 800436a:	2600      	movs	r6, #0
 800436c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004370:	f1b9 0901 	subs.w	r9, r9, #1
 8004374:	d505      	bpl.n	8004382 <_fwalk_sglue+0x22>
 8004376:	6824      	ldr	r4, [r4, #0]
 8004378:	2c00      	cmp	r4, #0
 800437a:	d1f7      	bne.n	800436c <_fwalk_sglue+0xc>
 800437c:	4630      	mov	r0, r6
 800437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d907      	bls.n	8004398 <_fwalk_sglue+0x38>
 8004388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800438c:	3301      	adds	r3, #1
 800438e:	d003      	beq.n	8004398 <_fwalk_sglue+0x38>
 8004390:	4629      	mov	r1, r5
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	4306      	orrs	r6, r0
 8004398:	3568      	adds	r5, #104	@ 0x68
 800439a:	e7e9      	b.n	8004370 <_fwalk_sglue+0x10>

0800439c <__sread>:
 800439c:	b510      	push	{r4, lr}
 800439e:	460c      	mov	r4, r1
 80043a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043a4:	f000 f86c 	bl	8004480 <_read_r>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	bfab      	itete	ge
 80043ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ae:	89a3      	ldrhlt	r3, [r4, #12]
 80043b0:	181b      	addge	r3, r3, r0
 80043b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043b6:	bfac      	ite	ge
 80043b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043ba:	81a3      	strhlt	r3, [r4, #12]
 80043bc:	bd10      	pop	{r4, pc}

080043be <__swrite>:
 80043be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c2:	461f      	mov	r7, r3
 80043c4:	898b      	ldrh	r3, [r1, #12]
 80043c6:	05db      	lsls	r3, r3, #23
 80043c8:	4605      	mov	r5, r0
 80043ca:	460c      	mov	r4, r1
 80043cc:	4616      	mov	r6, r2
 80043ce:	d505      	bpl.n	80043dc <__swrite+0x1e>
 80043d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d4:	2302      	movs	r3, #2
 80043d6:	2200      	movs	r2, #0
 80043d8:	f000 f840 	bl	800445c <_lseek_r>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043e6:	81a3      	strh	r3, [r4, #12]
 80043e8:	4632      	mov	r2, r6
 80043ea:	463b      	mov	r3, r7
 80043ec:	4628      	mov	r0, r5
 80043ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043f2:	f000 b857 	b.w	80044a4 <_write_r>

080043f6 <__sseek>:
 80043f6:	b510      	push	{r4, lr}
 80043f8:	460c      	mov	r4, r1
 80043fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043fe:	f000 f82d 	bl	800445c <_lseek_r>
 8004402:	1c43      	adds	r3, r0, #1
 8004404:	89a3      	ldrh	r3, [r4, #12]
 8004406:	bf15      	itete	ne
 8004408:	6560      	strne	r0, [r4, #84]	@ 0x54
 800440a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800440e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004412:	81a3      	strheq	r3, [r4, #12]
 8004414:	bf18      	it	ne
 8004416:	81a3      	strhne	r3, [r4, #12]
 8004418:	bd10      	pop	{r4, pc}

0800441a <__sclose>:
 800441a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800441e:	f000 b80d 	b.w	800443c <_close_r>

08004422 <memset>:
 8004422:	4402      	add	r2, r0
 8004424:	4603      	mov	r3, r0
 8004426:	4293      	cmp	r3, r2
 8004428:	d100      	bne.n	800442c <memset+0xa>
 800442a:	4770      	bx	lr
 800442c:	f803 1b01 	strb.w	r1, [r3], #1
 8004430:	e7f9      	b.n	8004426 <memset+0x4>
	...

08004434 <_localeconv_r>:
 8004434:	4800      	ldr	r0, [pc, #0]	@ (8004438 <_localeconv_r+0x4>)
 8004436:	4770      	bx	lr
 8004438:	20000168 	.word	0x20000168

0800443c <_close_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	4d06      	ldr	r5, [pc, #24]	@ (8004458 <_close_r+0x1c>)
 8004440:	2300      	movs	r3, #0
 8004442:	4604      	mov	r4, r0
 8004444:	4608      	mov	r0, r1
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	f7fd f846 	bl	80014d8 <_close>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d102      	bne.n	8004456 <_close_r+0x1a>
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	b103      	cbz	r3, 8004456 <_close_r+0x1a>
 8004454:	6023      	str	r3, [r4, #0]
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	200003d8 	.word	0x200003d8

0800445c <_lseek_r>:
 800445c:	b538      	push	{r3, r4, r5, lr}
 800445e:	4d07      	ldr	r5, [pc, #28]	@ (800447c <_lseek_r+0x20>)
 8004460:	4604      	mov	r4, r0
 8004462:	4608      	mov	r0, r1
 8004464:	4611      	mov	r1, r2
 8004466:	2200      	movs	r2, #0
 8004468:	602a      	str	r2, [r5, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	f7fd f85b 	bl	8001526 <_lseek>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_lseek_r+0x1e>
 8004474:	682b      	ldr	r3, [r5, #0]
 8004476:	b103      	cbz	r3, 800447a <_lseek_r+0x1e>
 8004478:	6023      	str	r3, [r4, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200003d8 	.word	0x200003d8

08004480 <_read_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4d07      	ldr	r5, [pc, #28]	@ (80044a0 <_read_r+0x20>)
 8004484:	4604      	mov	r4, r0
 8004486:	4608      	mov	r0, r1
 8004488:	4611      	mov	r1, r2
 800448a:	2200      	movs	r2, #0
 800448c:	602a      	str	r2, [r5, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fc ffe9 	bl	8001466 <_read>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_read_r+0x1e>
 8004498:	682b      	ldr	r3, [r5, #0]
 800449a:	b103      	cbz	r3, 800449e <_read_r+0x1e>
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200003d8 	.word	0x200003d8

080044a4 <_write_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d07      	ldr	r5, [pc, #28]	@ (80044c4 <_write_r+0x20>)
 80044a8:	4604      	mov	r4, r0
 80044aa:	4608      	mov	r0, r1
 80044ac:	4611      	mov	r1, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	602a      	str	r2, [r5, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	f7fc fff4 	bl	80014a0 <_write>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_write_r+0x1e>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_write_r+0x1e>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	200003d8 	.word	0x200003d8

080044c8 <__errno>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	@ (80044d0 <__errno+0x8>)
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	20000028 	.word	0x20000028

080044d4 <__libc_init_array>:
 80044d4:	b570      	push	{r4, r5, r6, lr}
 80044d6:	4d0d      	ldr	r5, [pc, #52]	@ (800450c <__libc_init_array+0x38>)
 80044d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004510 <__libc_init_array+0x3c>)
 80044da:	1b64      	subs	r4, r4, r5
 80044dc:	10a4      	asrs	r4, r4, #2
 80044de:	2600      	movs	r6, #0
 80044e0:	42a6      	cmp	r6, r4
 80044e2:	d109      	bne.n	80044f8 <__libc_init_array+0x24>
 80044e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004514 <__libc_init_array+0x40>)
 80044e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004518 <__libc_init_array+0x44>)
 80044e8:	f001 febe 	bl	8006268 <_init>
 80044ec:	1b64      	subs	r4, r4, r5
 80044ee:	10a4      	asrs	r4, r4, #2
 80044f0:	2600      	movs	r6, #0
 80044f2:	42a6      	cmp	r6, r4
 80044f4:	d105      	bne.n	8004502 <__libc_init_array+0x2e>
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044fc:	4798      	blx	r3
 80044fe:	3601      	adds	r6, #1
 8004500:	e7ee      	b.n	80044e0 <__libc_init_array+0xc>
 8004502:	f855 3b04 	ldr.w	r3, [r5], #4
 8004506:	4798      	blx	r3
 8004508:	3601      	adds	r6, #1
 800450a:	e7f2      	b.n	80044f2 <__libc_init_array+0x1e>
 800450c:	08006610 	.word	0x08006610
 8004510:	08006610 	.word	0x08006610
 8004514:	08006610 	.word	0x08006610
 8004518:	08006614 	.word	0x08006614

0800451c <__retarget_lock_init_recursive>:
 800451c:	4770      	bx	lr

0800451e <__retarget_lock_acquire_recursive>:
 800451e:	4770      	bx	lr

08004520 <__retarget_lock_release_recursive>:
 8004520:	4770      	bx	lr

08004522 <quorem>:
 8004522:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004526:	6903      	ldr	r3, [r0, #16]
 8004528:	690c      	ldr	r4, [r1, #16]
 800452a:	42a3      	cmp	r3, r4
 800452c:	4607      	mov	r7, r0
 800452e:	db7e      	blt.n	800462e <quorem+0x10c>
 8004530:	3c01      	subs	r4, #1
 8004532:	f101 0814 	add.w	r8, r1, #20
 8004536:	00a3      	lsls	r3, r4, #2
 8004538:	f100 0514 	add.w	r5, r0, #20
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004548:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800454c:	3301      	adds	r3, #1
 800454e:	429a      	cmp	r2, r3
 8004550:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004554:	fbb2 f6f3 	udiv	r6, r2, r3
 8004558:	d32e      	bcc.n	80045b8 <quorem+0x96>
 800455a:	f04f 0a00 	mov.w	sl, #0
 800455e:	46c4      	mov	ip, r8
 8004560:	46ae      	mov	lr, r5
 8004562:	46d3      	mov	fp, sl
 8004564:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004568:	b298      	uxth	r0, r3
 800456a:	fb06 a000 	mla	r0, r6, r0, sl
 800456e:	0c02      	lsrs	r2, r0, #16
 8004570:	0c1b      	lsrs	r3, r3, #16
 8004572:	fb06 2303 	mla	r3, r6, r3, r2
 8004576:	f8de 2000 	ldr.w	r2, [lr]
 800457a:	b280      	uxth	r0, r0
 800457c:	b292      	uxth	r2, r2
 800457e:	1a12      	subs	r2, r2, r0
 8004580:	445a      	add	r2, fp
 8004582:	f8de 0000 	ldr.w	r0, [lr]
 8004586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800458a:	b29b      	uxth	r3, r3
 800458c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004590:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004594:	b292      	uxth	r2, r2
 8004596:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800459a:	45e1      	cmp	r9, ip
 800459c:	f84e 2b04 	str.w	r2, [lr], #4
 80045a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80045a4:	d2de      	bcs.n	8004564 <quorem+0x42>
 80045a6:	9b00      	ldr	r3, [sp, #0]
 80045a8:	58eb      	ldr	r3, [r5, r3]
 80045aa:	b92b      	cbnz	r3, 80045b8 <quorem+0x96>
 80045ac:	9b01      	ldr	r3, [sp, #4]
 80045ae:	3b04      	subs	r3, #4
 80045b0:	429d      	cmp	r5, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	d32f      	bcc.n	8004616 <quorem+0xf4>
 80045b6:	613c      	str	r4, [r7, #16]
 80045b8:	4638      	mov	r0, r7
 80045ba:	f001 f97b 	bl	80058b4 <__mcmp>
 80045be:	2800      	cmp	r0, #0
 80045c0:	db25      	blt.n	800460e <quorem+0xec>
 80045c2:	4629      	mov	r1, r5
 80045c4:	2000      	movs	r0, #0
 80045c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80045ca:	f8d1 c000 	ldr.w	ip, [r1]
 80045ce:	fa1f fe82 	uxth.w	lr, r2
 80045d2:	fa1f f38c 	uxth.w	r3, ip
 80045d6:	eba3 030e 	sub.w	r3, r3, lr
 80045da:	4403      	add	r3, r0
 80045dc:	0c12      	lsrs	r2, r2, #16
 80045de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80045e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80045ec:	45c1      	cmp	r9, r8
 80045ee:	f841 3b04 	str.w	r3, [r1], #4
 80045f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80045f6:	d2e6      	bcs.n	80045c6 <quorem+0xa4>
 80045f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004600:	b922      	cbnz	r2, 800460c <quorem+0xea>
 8004602:	3b04      	subs	r3, #4
 8004604:	429d      	cmp	r5, r3
 8004606:	461a      	mov	r2, r3
 8004608:	d30b      	bcc.n	8004622 <quorem+0x100>
 800460a:	613c      	str	r4, [r7, #16]
 800460c:	3601      	adds	r6, #1
 800460e:	4630      	mov	r0, r6
 8004610:	b003      	add	sp, #12
 8004612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004616:	6812      	ldr	r2, [r2, #0]
 8004618:	3b04      	subs	r3, #4
 800461a:	2a00      	cmp	r2, #0
 800461c:	d1cb      	bne.n	80045b6 <quorem+0x94>
 800461e:	3c01      	subs	r4, #1
 8004620:	e7c6      	b.n	80045b0 <quorem+0x8e>
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	3b04      	subs	r3, #4
 8004626:	2a00      	cmp	r2, #0
 8004628:	d1ef      	bne.n	800460a <quorem+0xe8>
 800462a:	3c01      	subs	r4, #1
 800462c:	e7ea      	b.n	8004604 <quorem+0xe2>
 800462e:	2000      	movs	r0, #0
 8004630:	e7ee      	b.n	8004610 <quorem+0xee>
 8004632:	0000      	movs	r0, r0
 8004634:	0000      	movs	r0, r0
	...

08004638 <_dtoa_r>:
 8004638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800463c:	69c7      	ldr	r7, [r0, #28]
 800463e:	b099      	sub	sp, #100	@ 0x64
 8004640:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004644:	ec55 4b10 	vmov	r4, r5, d0
 8004648:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800464a:	9109      	str	r1, [sp, #36]	@ 0x24
 800464c:	4683      	mov	fp, r0
 800464e:	920e      	str	r2, [sp, #56]	@ 0x38
 8004650:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004652:	b97f      	cbnz	r7, 8004674 <_dtoa_r+0x3c>
 8004654:	2010      	movs	r0, #16
 8004656:	f000 fdfd 	bl	8005254 <malloc>
 800465a:	4602      	mov	r2, r0
 800465c:	f8cb 001c 	str.w	r0, [fp, #28]
 8004660:	b920      	cbnz	r0, 800466c <_dtoa_r+0x34>
 8004662:	4ba7      	ldr	r3, [pc, #668]	@ (8004900 <_dtoa_r+0x2c8>)
 8004664:	21ef      	movs	r1, #239	@ 0xef
 8004666:	48a7      	ldr	r0, [pc, #668]	@ (8004904 <_dtoa_r+0x2cc>)
 8004668:	f001 faf6 	bl	8005c58 <__assert_func>
 800466c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004670:	6007      	str	r7, [r0, #0]
 8004672:	60c7      	str	r7, [r0, #12]
 8004674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	b159      	cbz	r1, 8004694 <_dtoa_r+0x5c>
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	604a      	str	r2, [r1, #4]
 8004680:	2301      	movs	r3, #1
 8004682:	4093      	lsls	r3, r2
 8004684:	608b      	str	r3, [r1, #8]
 8004686:	4658      	mov	r0, fp
 8004688:	f000 feda 	bl	8005440 <_Bfree>
 800468c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	1e2b      	subs	r3, r5, #0
 8004696:	bfb9      	ittee	lt
 8004698:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800469c:	9303      	strlt	r3, [sp, #12]
 800469e:	2300      	movge	r3, #0
 80046a0:	6033      	strge	r3, [r6, #0]
 80046a2:	9f03      	ldr	r7, [sp, #12]
 80046a4:	4b98      	ldr	r3, [pc, #608]	@ (8004908 <_dtoa_r+0x2d0>)
 80046a6:	bfbc      	itt	lt
 80046a8:	2201      	movlt	r2, #1
 80046aa:	6032      	strlt	r2, [r6, #0]
 80046ac:	43bb      	bics	r3, r7
 80046ae:	d112      	bne.n	80046d6 <_dtoa_r+0x9e>
 80046b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80046bc:	4323      	orrs	r3, r4
 80046be:	f000 854d 	beq.w	800515c <_dtoa_r+0xb24>
 80046c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800491c <_dtoa_r+0x2e4>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 854f 	beq.w	800516c <_dtoa_r+0xb34>
 80046ce:	f10a 0303 	add.w	r3, sl, #3
 80046d2:	f000 bd49 	b.w	8005168 <_dtoa_r+0xb30>
 80046d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	ec51 0b17 	vmov	r0, r1, d7
 80046e0:	2300      	movs	r3, #0
 80046e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80046e6:	f7fc fa0f 	bl	8000b08 <__aeabi_dcmpeq>
 80046ea:	4680      	mov	r8, r0
 80046ec:	b158      	cbz	r0, 8004706 <_dtoa_r+0xce>
 80046ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80046f0:	2301      	movs	r3, #1
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80046f6:	b113      	cbz	r3, 80046fe <_dtoa_r+0xc6>
 80046f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80046fa:	4b84      	ldr	r3, [pc, #528]	@ (800490c <_dtoa_r+0x2d4>)
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004920 <_dtoa_r+0x2e8>
 8004702:	f000 bd33 	b.w	800516c <_dtoa_r+0xb34>
 8004706:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800470a:	aa16      	add	r2, sp, #88	@ 0x58
 800470c:	a917      	add	r1, sp, #92	@ 0x5c
 800470e:	4658      	mov	r0, fp
 8004710:	f001 f980 	bl	8005a14 <__d2b>
 8004714:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004718:	4681      	mov	r9, r0
 800471a:	2e00      	cmp	r6, #0
 800471c:	d077      	beq.n	800480e <_dtoa_r+0x1d6>
 800471e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004720:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800472c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004730:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004734:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004738:	4619      	mov	r1, r3
 800473a:	2200      	movs	r2, #0
 800473c:	4b74      	ldr	r3, [pc, #464]	@ (8004910 <_dtoa_r+0x2d8>)
 800473e:	f7fb fdc3 	bl	80002c8 <__aeabi_dsub>
 8004742:	a369      	add	r3, pc, #420	@ (adr r3, 80048e8 <_dtoa_r+0x2b0>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f7fb ff76 	bl	8000638 <__aeabi_dmul>
 800474c:	a368      	add	r3, pc, #416	@ (adr r3, 80048f0 <_dtoa_r+0x2b8>)
 800474e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004752:	f7fb fdbb 	bl	80002cc <__adddf3>
 8004756:	4604      	mov	r4, r0
 8004758:	4630      	mov	r0, r6
 800475a:	460d      	mov	r5, r1
 800475c:	f7fb ff02 	bl	8000564 <__aeabi_i2d>
 8004760:	a365      	add	r3, pc, #404	@ (adr r3, 80048f8 <_dtoa_r+0x2c0>)
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	f7fb ff67 	bl	8000638 <__aeabi_dmul>
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	f7fb fdab 	bl	80002cc <__adddf3>
 8004776:	4604      	mov	r4, r0
 8004778:	460d      	mov	r5, r1
 800477a:	f7fc fa0d 	bl	8000b98 <__aeabi_d2iz>
 800477e:	2200      	movs	r2, #0
 8004780:	4607      	mov	r7, r0
 8004782:	2300      	movs	r3, #0
 8004784:	4620      	mov	r0, r4
 8004786:	4629      	mov	r1, r5
 8004788:	f7fc f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800478c:	b140      	cbz	r0, 80047a0 <_dtoa_r+0x168>
 800478e:	4638      	mov	r0, r7
 8004790:	f7fb fee8 	bl	8000564 <__aeabi_i2d>
 8004794:	4622      	mov	r2, r4
 8004796:	462b      	mov	r3, r5
 8004798:	f7fc f9b6 	bl	8000b08 <__aeabi_dcmpeq>
 800479c:	b900      	cbnz	r0, 80047a0 <_dtoa_r+0x168>
 800479e:	3f01      	subs	r7, #1
 80047a0:	2f16      	cmp	r7, #22
 80047a2:	d851      	bhi.n	8004848 <_dtoa_r+0x210>
 80047a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004914 <_dtoa_r+0x2dc>)
 80047a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047b2:	f7fc f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d048      	beq.n	800484c <_dtoa_r+0x214>
 80047ba:	3f01      	subs	r7, #1
 80047bc:	2300      	movs	r3, #0
 80047be:	9312      	str	r3, [sp, #72]	@ 0x48
 80047c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80047c2:	1b9b      	subs	r3, r3, r6
 80047c4:	1e5a      	subs	r2, r3, #1
 80047c6:	bf44      	itt	mi
 80047c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80047cc:	2300      	movmi	r3, #0
 80047ce:	9208      	str	r2, [sp, #32]
 80047d0:	bf54      	ite	pl
 80047d2:	f04f 0800 	movpl.w	r8, #0
 80047d6:	9308      	strmi	r3, [sp, #32]
 80047d8:	2f00      	cmp	r7, #0
 80047da:	db39      	blt.n	8004850 <_dtoa_r+0x218>
 80047dc:	9b08      	ldr	r3, [sp, #32]
 80047de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80047e0:	443b      	add	r3, r7
 80047e2:	9308      	str	r3, [sp, #32]
 80047e4:	2300      	movs	r3, #0
 80047e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80047e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ea:	2b09      	cmp	r3, #9
 80047ec:	d864      	bhi.n	80048b8 <_dtoa_r+0x280>
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	bfc4      	itt	gt
 80047f2:	3b04      	subgt	r3, #4
 80047f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80047f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047f8:	f1a3 0302 	sub.w	r3, r3, #2
 80047fc:	bfcc      	ite	gt
 80047fe:	2400      	movgt	r4, #0
 8004800:	2401      	movle	r4, #1
 8004802:	2b03      	cmp	r3, #3
 8004804:	d863      	bhi.n	80048ce <_dtoa_r+0x296>
 8004806:	e8df f003 	tbb	[pc, r3]
 800480a:	372a      	.short	0x372a
 800480c:	5535      	.short	0x5535
 800480e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004812:	441e      	add	r6, r3
 8004814:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004818:	2b20      	cmp	r3, #32
 800481a:	bfc1      	itttt	gt
 800481c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004820:	409f      	lslgt	r7, r3
 8004822:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004826:	fa24 f303 	lsrgt.w	r3, r4, r3
 800482a:	bfd6      	itet	le
 800482c:	f1c3 0320 	rsble	r3, r3, #32
 8004830:	ea47 0003 	orrgt.w	r0, r7, r3
 8004834:	fa04 f003 	lslle.w	r0, r4, r3
 8004838:	f7fb fe84 	bl	8000544 <__aeabi_ui2d>
 800483c:	2201      	movs	r2, #1
 800483e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004842:	3e01      	subs	r6, #1
 8004844:	9214      	str	r2, [sp, #80]	@ 0x50
 8004846:	e777      	b.n	8004738 <_dtoa_r+0x100>
 8004848:	2301      	movs	r3, #1
 800484a:	e7b8      	b.n	80047be <_dtoa_r+0x186>
 800484c:	9012      	str	r0, [sp, #72]	@ 0x48
 800484e:	e7b7      	b.n	80047c0 <_dtoa_r+0x188>
 8004850:	427b      	negs	r3, r7
 8004852:	930a      	str	r3, [sp, #40]	@ 0x28
 8004854:	2300      	movs	r3, #0
 8004856:	eba8 0807 	sub.w	r8, r8, r7
 800485a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800485c:	e7c4      	b.n	80047e8 <_dtoa_r+0x1b0>
 800485e:	2300      	movs	r3, #0
 8004860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004864:	2b00      	cmp	r3, #0
 8004866:	dc35      	bgt.n	80048d4 <_dtoa_r+0x29c>
 8004868:	2301      	movs	r3, #1
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	9307      	str	r3, [sp, #28]
 800486e:	461a      	mov	r2, r3
 8004870:	920e      	str	r2, [sp, #56]	@ 0x38
 8004872:	e00b      	b.n	800488c <_dtoa_r+0x254>
 8004874:	2301      	movs	r3, #1
 8004876:	e7f3      	b.n	8004860 <_dtoa_r+0x228>
 8004878:	2300      	movs	r3, #0
 800487a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800487c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800487e:	18fb      	adds	r3, r7, r3
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	3301      	adds	r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	9307      	str	r3, [sp, #28]
 8004888:	bfb8      	it	lt
 800488a:	2301      	movlt	r3, #1
 800488c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004890:	2100      	movs	r1, #0
 8004892:	2204      	movs	r2, #4
 8004894:	f102 0514 	add.w	r5, r2, #20
 8004898:	429d      	cmp	r5, r3
 800489a:	d91f      	bls.n	80048dc <_dtoa_r+0x2a4>
 800489c:	6041      	str	r1, [r0, #4]
 800489e:	4658      	mov	r0, fp
 80048a0:	f000 fd8e 	bl	80053c0 <_Balloc>
 80048a4:	4682      	mov	sl, r0
 80048a6:	2800      	cmp	r0, #0
 80048a8:	d13c      	bne.n	8004924 <_dtoa_r+0x2ec>
 80048aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <_dtoa_r+0x2e0>)
 80048ac:	4602      	mov	r2, r0
 80048ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80048b2:	e6d8      	b.n	8004666 <_dtoa_r+0x2e>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e7e0      	b.n	800487a <_dtoa_r+0x242>
 80048b8:	2401      	movs	r4, #1
 80048ba:	2300      	movs	r3, #0
 80048bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80048be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80048c0:	f04f 33ff 	mov.w	r3, #4294967295
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	9307      	str	r3, [sp, #28]
 80048c8:	2200      	movs	r2, #0
 80048ca:	2312      	movs	r3, #18
 80048cc:	e7d0      	b.n	8004870 <_dtoa_r+0x238>
 80048ce:	2301      	movs	r3, #1
 80048d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048d2:	e7f5      	b.n	80048c0 <_dtoa_r+0x288>
 80048d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	9307      	str	r3, [sp, #28]
 80048da:	e7d7      	b.n	800488c <_dtoa_r+0x254>
 80048dc:	3101      	adds	r1, #1
 80048de:	0052      	lsls	r2, r2, #1
 80048e0:	e7d8      	b.n	8004894 <_dtoa_r+0x25c>
 80048e2:	bf00      	nop
 80048e4:	f3af 8000 	nop.w
 80048e8:	636f4361 	.word	0x636f4361
 80048ec:	3fd287a7 	.word	0x3fd287a7
 80048f0:	8b60c8b3 	.word	0x8b60c8b3
 80048f4:	3fc68a28 	.word	0x3fc68a28
 80048f8:	509f79fb 	.word	0x509f79fb
 80048fc:	3fd34413 	.word	0x3fd34413
 8004900:	080062d9 	.word	0x080062d9
 8004904:	080062f0 	.word	0x080062f0
 8004908:	7ff00000 	.word	0x7ff00000
 800490c:	080062a9 	.word	0x080062a9
 8004910:	3ff80000 	.word	0x3ff80000
 8004914:	080063e8 	.word	0x080063e8
 8004918:	08006348 	.word	0x08006348
 800491c:	080062d5 	.word	0x080062d5
 8004920:	080062a8 	.word	0x080062a8
 8004924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004928:	6018      	str	r0, [r3, #0]
 800492a:	9b07      	ldr	r3, [sp, #28]
 800492c:	2b0e      	cmp	r3, #14
 800492e:	f200 80a4 	bhi.w	8004a7a <_dtoa_r+0x442>
 8004932:	2c00      	cmp	r4, #0
 8004934:	f000 80a1 	beq.w	8004a7a <_dtoa_r+0x442>
 8004938:	2f00      	cmp	r7, #0
 800493a:	dd33      	ble.n	80049a4 <_dtoa_r+0x36c>
 800493c:	4bad      	ldr	r3, [pc, #692]	@ (8004bf4 <_dtoa_r+0x5bc>)
 800493e:	f007 020f 	and.w	r2, r7, #15
 8004942:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004946:	ed93 7b00 	vldr	d7, [r3]
 800494a:	05f8      	lsls	r0, r7, #23
 800494c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004950:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004954:	d516      	bpl.n	8004984 <_dtoa_r+0x34c>
 8004956:	4ba8      	ldr	r3, [pc, #672]	@ (8004bf8 <_dtoa_r+0x5c0>)
 8004958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800495c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004960:	f7fb ff94 	bl	800088c <__aeabi_ddiv>
 8004964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004968:	f004 040f 	and.w	r4, r4, #15
 800496c:	2603      	movs	r6, #3
 800496e:	4da2      	ldr	r5, [pc, #648]	@ (8004bf8 <_dtoa_r+0x5c0>)
 8004970:	b954      	cbnz	r4, 8004988 <_dtoa_r+0x350>
 8004972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800497a:	f7fb ff87 	bl	800088c <__aeabi_ddiv>
 800497e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004982:	e028      	b.n	80049d6 <_dtoa_r+0x39e>
 8004984:	2602      	movs	r6, #2
 8004986:	e7f2      	b.n	800496e <_dtoa_r+0x336>
 8004988:	07e1      	lsls	r1, r4, #31
 800498a:	d508      	bpl.n	800499e <_dtoa_r+0x366>
 800498c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004990:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004994:	f7fb fe50 	bl	8000638 <__aeabi_dmul>
 8004998:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800499c:	3601      	adds	r6, #1
 800499e:	1064      	asrs	r4, r4, #1
 80049a0:	3508      	adds	r5, #8
 80049a2:	e7e5      	b.n	8004970 <_dtoa_r+0x338>
 80049a4:	f000 80d2 	beq.w	8004b4c <_dtoa_r+0x514>
 80049a8:	427c      	negs	r4, r7
 80049aa:	4b92      	ldr	r3, [pc, #584]	@ (8004bf4 <_dtoa_r+0x5bc>)
 80049ac:	4d92      	ldr	r5, [pc, #584]	@ (8004bf8 <_dtoa_r+0x5c0>)
 80049ae:	f004 020f 	and.w	r2, r4, #15
 80049b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80049be:	f7fb fe3b 	bl	8000638 <__aeabi_dmul>
 80049c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049c6:	1124      	asrs	r4, r4, #4
 80049c8:	2300      	movs	r3, #0
 80049ca:	2602      	movs	r6, #2
 80049cc:	2c00      	cmp	r4, #0
 80049ce:	f040 80b2 	bne.w	8004b36 <_dtoa_r+0x4fe>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1d3      	bne.n	800497e <_dtoa_r+0x346>
 80049d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80049d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80b7 	beq.w	8004b50 <_dtoa_r+0x518>
 80049e2:	4b86      	ldr	r3, [pc, #536]	@ (8004bfc <_dtoa_r+0x5c4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	4620      	mov	r0, r4
 80049e8:	4629      	mov	r1, r5
 80049ea:	f7fc f897 	bl	8000b1c <__aeabi_dcmplt>
 80049ee:	2800      	cmp	r0, #0
 80049f0:	f000 80ae 	beq.w	8004b50 <_dtoa_r+0x518>
 80049f4:	9b07      	ldr	r3, [sp, #28]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 80aa 	beq.w	8004b50 <_dtoa_r+0x518>
 80049fc:	9b00      	ldr	r3, [sp, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	dd37      	ble.n	8004a72 <_dtoa_r+0x43a>
 8004a02:	1e7b      	subs	r3, r7, #1
 8004a04:	9304      	str	r3, [sp, #16]
 8004a06:	4620      	mov	r0, r4
 8004a08:	4b7d      	ldr	r3, [pc, #500]	@ (8004c00 <_dtoa_r+0x5c8>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fb fe13 	bl	8000638 <__aeabi_dmul>
 8004a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a16:	9c00      	ldr	r4, [sp, #0]
 8004a18:	3601      	adds	r6, #1
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	f7fb fda2 	bl	8000564 <__aeabi_i2d>
 8004a20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a24:	f7fb fe08 	bl	8000638 <__aeabi_dmul>
 8004a28:	4b76      	ldr	r3, [pc, #472]	@ (8004c04 <_dtoa_r+0x5cc>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f7fb fc4e 	bl	80002cc <__adddf3>
 8004a30:	4605      	mov	r5, r0
 8004a32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	f040 808d 	bne.w	8004b56 <_dtoa_r+0x51e>
 8004a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a40:	4b71      	ldr	r3, [pc, #452]	@ (8004c08 <_dtoa_r+0x5d0>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	f7fb fc40 	bl	80002c8 <__aeabi_dsub>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a50:	462a      	mov	r2, r5
 8004a52:	4633      	mov	r3, r6
 8004a54:	f7fc f880 	bl	8000b58 <__aeabi_dcmpgt>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f040 828b 	bne.w	8004f74 <_dtoa_r+0x93c>
 8004a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a62:	462a      	mov	r2, r5
 8004a64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004a68:	f7fc f858 	bl	8000b1c <__aeabi_dcmplt>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	f040 8128 	bne.w	8004cc2 <_dtoa_r+0x68a>
 8004a72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004a76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004a7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f2c0 815a 	blt.w	8004d36 <_dtoa_r+0x6fe>
 8004a82:	2f0e      	cmp	r7, #14
 8004a84:	f300 8157 	bgt.w	8004d36 <_dtoa_r+0x6fe>
 8004a88:	4b5a      	ldr	r3, [pc, #360]	@ (8004bf4 <_dtoa_r+0x5bc>)
 8004a8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004a8e:	ed93 7b00 	vldr	d7, [r3]
 8004a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	ed8d 7b00 	vstr	d7, [sp]
 8004a9a:	da03      	bge.n	8004aa4 <_dtoa_r+0x46c>
 8004a9c:	9b07      	ldr	r3, [sp, #28]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f340 8101 	ble.w	8004ca6 <_dtoa_r+0x66e>
 8004aa4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004aa8:	4656      	mov	r6, sl
 8004aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	f7fb feeb 	bl	800088c <__aeabi_ddiv>
 8004ab6:	f7fc f86f 	bl	8000b98 <__aeabi_d2iz>
 8004aba:	4680      	mov	r8, r0
 8004abc:	f7fb fd52 	bl	8000564 <__aeabi_i2d>
 8004ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ac4:	f7fb fdb8 	bl	8000638 <__aeabi_dmul>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004ad4:	f7fb fbf8 	bl	80002c8 <__aeabi_dsub>
 8004ad8:	f806 4b01 	strb.w	r4, [r6], #1
 8004adc:	9d07      	ldr	r5, [sp, #28]
 8004ade:	eba6 040a 	sub.w	r4, r6, sl
 8004ae2:	42a5      	cmp	r5, r4
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	f040 8117 	bne.w	8004d1a <_dtoa_r+0x6e2>
 8004aec:	f7fb fbee 	bl	80002cc <__adddf3>
 8004af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004af4:	4604      	mov	r4, r0
 8004af6:	460d      	mov	r5, r1
 8004af8:	f7fc f82e 	bl	8000b58 <__aeabi_dcmpgt>
 8004afc:	2800      	cmp	r0, #0
 8004afe:	f040 80f9 	bne.w	8004cf4 <_dtoa_r+0x6bc>
 8004b02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b06:	4620      	mov	r0, r4
 8004b08:	4629      	mov	r1, r5
 8004b0a:	f7fb fffd 	bl	8000b08 <__aeabi_dcmpeq>
 8004b0e:	b118      	cbz	r0, 8004b18 <_dtoa_r+0x4e0>
 8004b10:	f018 0f01 	tst.w	r8, #1
 8004b14:	f040 80ee 	bne.w	8004cf4 <_dtoa_r+0x6bc>
 8004b18:	4649      	mov	r1, r9
 8004b1a:	4658      	mov	r0, fp
 8004b1c:	f000 fc90 	bl	8005440 <_Bfree>
 8004b20:	2300      	movs	r3, #0
 8004b22:	7033      	strb	r3, [r6, #0]
 8004b24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004b26:	3701      	adds	r7, #1
 8004b28:	601f      	str	r7, [r3, #0]
 8004b2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 831d 	beq.w	800516c <_dtoa_r+0xb34>
 8004b32:	601e      	str	r6, [r3, #0]
 8004b34:	e31a      	b.n	800516c <_dtoa_r+0xb34>
 8004b36:	07e2      	lsls	r2, r4, #31
 8004b38:	d505      	bpl.n	8004b46 <_dtoa_r+0x50e>
 8004b3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b3e:	f7fb fd7b 	bl	8000638 <__aeabi_dmul>
 8004b42:	3601      	adds	r6, #1
 8004b44:	2301      	movs	r3, #1
 8004b46:	1064      	asrs	r4, r4, #1
 8004b48:	3508      	adds	r5, #8
 8004b4a:	e73f      	b.n	80049cc <_dtoa_r+0x394>
 8004b4c:	2602      	movs	r6, #2
 8004b4e:	e742      	b.n	80049d6 <_dtoa_r+0x39e>
 8004b50:	9c07      	ldr	r4, [sp, #28]
 8004b52:	9704      	str	r7, [sp, #16]
 8004b54:	e761      	b.n	8004a1a <_dtoa_r+0x3e2>
 8004b56:	4b27      	ldr	r3, [pc, #156]	@ (8004bf4 <_dtoa_r+0x5bc>)
 8004b58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004b5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004b5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004b62:	4454      	add	r4, sl
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d053      	beq.n	8004c10 <_dtoa_r+0x5d8>
 8004b68:	4928      	ldr	r1, [pc, #160]	@ (8004c0c <_dtoa_r+0x5d4>)
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f7fb fe8e 	bl	800088c <__aeabi_ddiv>
 8004b70:	4633      	mov	r3, r6
 8004b72:	462a      	mov	r2, r5
 8004b74:	f7fb fba8 	bl	80002c8 <__aeabi_dsub>
 8004b78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b7c:	4656      	mov	r6, sl
 8004b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b82:	f7fc f809 	bl	8000b98 <__aeabi_d2iz>
 8004b86:	4605      	mov	r5, r0
 8004b88:	f7fb fcec 	bl	8000564 <__aeabi_i2d>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b94:	f7fb fb98 	bl	80002c8 <__aeabi_dsub>
 8004b98:	3530      	adds	r5, #48	@ 0x30
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ba2:	f806 5b01 	strb.w	r5, [r6], #1
 8004ba6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004baa:	f7fb ffb7 	bl	8000b1c <__aeabi_dcmplt>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d171      	bne.n	8004c96 <_dtoa_r+0x65e>
 8004bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bb6:	4911      	ldr	r1, [pc, #68]	@ (8004bfc <_dtoa_r+0x5c4>)
 8004bb8:	2000      	movs	r0, #0
 8004bba:	f7fb fb85 	bl	80002c8 <__aeabi_dsub>
 8004bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004bc2:	f7fb ffab 	bl	8000b1c <__aeabi_dcmplt>
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	f040 8095 	bne.w	8004cf6 <_dtoa_r+0x6be>
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	f43f af50 	beq.w	8004a72 <_dtoa_r+0x43a>
 8004bd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004c00 <_dtoa_r+0x5c8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f7fb fd2d 	bl	8000638 <__aeabi_dmul>
 8004bde:	4b08      	ldr	r3, [pc, #32]	@ (8004c00 <_dtoa_r+0x5c8>)
 8004be0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004be4:	2200      	movs	r2, #0
 8004be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bea:	f7fb fd25 	bl	8000638 <__aeabi_dmul>
 8004bee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bf2:	e7c4      	b.n	8004b7e <_dtoa_r+0x546>
 8004bf4:	080063e8 	.word	0x080063e8
 8004bf8:	080063c0 	.word	0x080063c0
 8004bfc:	3ff00000 	.word	0x3ff00000
 8004c00:	40240000 	.word	0x40240000
 8004c04:	401c0000 	.word	0x401c0000
 8004c08:	40140000 	.word	0x40140000
 8004c0c:	3fe00000 	.word	0x3fe00000
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	f7fb fd10 	bl	8000638 <__aeabi_dmul>
 8004c18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004c1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8004c1e:	4656      	mov	r6, sl
 8004c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c24:	f7fb ffb8 	bl	8000b98 <__aeabi_d2iz>
 8004c28:	4605      	mov	r5, r0
 8004c2a:	f7fb fc9b 	bl	8000564 <__aeabi_i2d>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c36:	f7fb fb47 	bl	80002c8 <__aeabi_dsub>
 8004c3a:	3530      	adds	r5, #48	@ 0x30
 8004c3c:	f806 5b01 	strb.w	r5, [r6], #1
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	42a6      	cmp	r6, r4
 8004c46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	d124      	bne.n	8004c9a <_dtoa_r+0x662>
 8004c50:	4bac      	ldr	r3, [pc, #688]	@ (8004f04 <_dtoa_r+0x8cc>)
 8004c52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004c56:	f7fb fb39 	bl	80002cc <__adddf3>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c62:	f7fb ff79 	bl	8000b58 <__aeabi_dcmpgt>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d145      	bne.n	8004cf6 <_dtoa_r+0x6be>
 8004c6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004c6e:	49a5      	ldr	r1, [pc, #660]	@ (8004f04 <_dtoa_r+0x8cc>)
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fb fb29 	bl	80002c8 <__aeabi_dsub>
 8004c76:	4602      	mov	r2, r0
 8004c78:	460b      	mov	r3, r1
 8004c7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c7e:	f7fb ff4d 	bl	8000b1c <__aeabi_dcmplt>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f43f aef5 	beq.w	8004a72 <_dtoa_r+0x43a>
 8004c88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004c8a:	1e73      	subs	r3, r6, #1
 8004c8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8004c8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004c92:	2b30      	cmp	r3, #48	@ 0x30
 8004c94:	d0f8      	beq.n	8004c88 <_dtoa_r+0x650>
 8004c96:	9f04      	ldr	r7, [sp, #16]
 8004c98:	e73e      	b.n	8004b18 <_dtoa_r+0x4e0>
 8004c9a:	4b9b      	ldr	r3, [pc, #620]	@ (8004f08 <_dtoa_r+0x8d0>)
 8004c9c:	f7fb fccc 	bl	8000638 <__aeabi_dmul>
 8004ca0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ca4:	e7bc      	b.n	8004c20 <_dtoa_r+0x5e8>
 8004ca6:	d10c      	bne.n	8004cc2 <_dtoa_r+0x68a>
 8004ca8:	4b98      	ldr	r3, [pc, #608]	@ (8004f0c <_dtoa_r+0x8d4>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cb0:	f7fb fcc2 	bl	8000638 <__aeabi_dmul>
 8004cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cb8:	f7fb ff44 	bl	8000b44 <__aeabi_dcmpge>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	f000 8157 	beq.w	8004f70 <_dtoa_r+0x938>
 8004cc2:	2400      	movs	r4, #0
 8004cc4:	4625      	mov	r5, r4
 8004cc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	4656      	mov	r6, sl
 8004cce:	2700      	movs	r7, #0
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	4658      	mov	r0, fp
 8004cd4:	f000 fbb4 	bl	8005440 <_Bfree>
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	d0dc      	beq.n	8004c96 <_dtoa_r+0x65e>
 8004cdc:	b12f      	cbz	r7, 8004cea <_dtoa_r+0x6b2>
 8004cde:	42af      	cmp	r7, r5
 8004ce0:	d003      	beq.n	8004cea <_dtoa_r+0x6b2>
 8004ce2:	4639      	mov	r1, r7
 8004ce4:	4658      	mov	r0, fp
 8004ce6:	f000 fbab 	bl	8005440 <_Bfree>
 8004cea:	4629      	mov	r1, r5
 8004cec:	4658      	mov	r0, fp
 8004cee:	f000 fba7 	bl	8005440 <_Bfree>
 8004cf2:	e7d0      	b.n	8004c96 <_dtoa_r+0x65e>
 8004cf4:	9704      	str	r7, [sp, #16]
 8004cf6:	4633      	mov	r3, r6
 8004cf8:	461e      	mov	r6, r3
 8004cfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cfe:	2a39      	cmp	r2, #57	@ 0x39
 8004d00:	d107      	bne.n	8004d12 <_dtoa_r+0x6da>
 8004d02:	459a      	cmp	sl, r3
 8004d04:	d1f8      	bne.n	8004cf8 <_dtoa_r+0x6c0>
 8004d06:	9a04      	ldr	r2, [sp, #16]
 8004d08:	3201      	adds	r2, #1
 8004d0a:	9204      	str	r2, [sp, #16]
 8004d0c:	2230      	movs	r2, #48	@ 0x30
 8004d0e:	f88a 2000 	strb.w	r2, [sl]
 8004d12:	781a      	ldrb	r2, [r3, #0]
 8004d14:	3201      	adds	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
 8004d18:	e7bd      	b.n	8004c96 <_dtoa_r+0x65e>
 8004d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f08 <_dtoa_r+0x8d0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f7fb fc8b 	bl	8000638 <__aeabi_dmul>
 8004d22:	2200      	movs	r2, #0
 8004d24:	2300      	movs	r3, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	460d      	mov	r5, r1
 8004d2a:	f7fb feed 	bl	8000b08 <__aeabi_dcmpeq>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f43f aebb 	beq.w	8004aaa <_dtoa_r+0x472>
 8004d34:	e6f0      	b.n	8004b18 <_dtoa_r+0x4e0>
 8004d36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	f000 80db 	beq.w	8004ef4 <_dtoa_r+0x8bc>
 8004d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d40:	2a01      	cmp	r2, #1
 8004d42:	f300 80bf 	bgt.w	8004ec4 <_dtoa_r+0x88c>
 8004d46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8004d48:	2a00      	cmp	r2, #0
 8004d4a:	f000 80b7 	beq.w	8004ebc <_dtoa_r+0x884>
 8004d4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004d52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d54:	4646      	mov	r6, r8
 8004d56:	9a08      	ldr	r2, [sp, #32]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	441a      	add	r2, r3
 8004d5c:	4658      	mov	r0, fp
 8004d5e:	4498      	add	r8, r3
 8004d60:	9208      	str	r2, [sp, #32]
 8004d62:	f000 fc21 	bl	80055a8 <__i2b>
 8004d66:	4605      	mov	r5, r0
 8004d68:	b15e      	cbz	r6, 8004d82 <_dtoa_r+0x74a>
 8004d6a:	9b08      	ldr	r3, [sp, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dd08      	ble.n	8004d82 <_dtoa_r+0x74a>
 8004d70:	42b3      	cmp	r3, r6
 8004d72:	9a08      	ldr	r2, [sp, #32]
 8004d74:	bfa8      	it	ge
 8004d76:	4633      	movge	r3, r6
 8004d78:	eba8 0803 	sub.w	r8, r8, r3
 8004d7c:	1af6      	subs	r6, r6, r3
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	9308      	str	r3, [sp, #32]
 8004d82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d84:	b1f3      	cbz	r3, 8004dc4 <_dtoa_r+0x78c>
 8004d86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80b7 	beq.w	8004efc <_dtoa_r+0x8c4>
 8004d8e:	b18c      	cbz	r4, 8004db4 <_dtoa_r+0x77c>
 8004d90:	4629      	mov	r1, r5
 8004d92:	4622      	mov	r2, r4
 8004d94:	4658      	mov	r0, fp
 8004d96:	f000 fcc7 	bl	8005728 <__pow5mult>
 8004d9a:	464a      	mov	r2, r9
 8004d9c:	4601      	mov	r1, r0
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4658      	mov	r0, fp
 8004da2:	f000 fc17 	bl	80055d4 <__multiply>
 8004da6:	4649      	mov	r1, r9
 8004da8:	9004      	str	r0, [sp, #16]
 8004daa:	4658      	mov	r0, fp
 8004dac:	f000 fb48 	bl	8005440 <_Bfree>
 8004db0:	9b04      	ldr	r3, [sp, #16]
 8004db2:	4699      	mov	r9, r3
 8004db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004db6:	1b1a      	subs	r2, r3, r4
 8004db8:	d004      	beq.n	8004dc4 <_dtoa_r+0x78c>
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4658      	mov	r0, fp
 8004dbe:	f000 fcb3 	bl	8005728 <__pow5mult>
 8004dc2:	4681      	mov	r9, r0
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	4658      	mov	r0, fp
 8004dc8:	f000 fbee 	bl	80055a8 <__i2b>
 8004dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004dce:	4604      	mov	r4, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 81cf 	beq.w	8005174 <_dtoa_r+0xb3c>
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	4601      	mov	r1, r0
 8004dda:	4658      	mov	r0, fp
 8004ddc:	f000 fca4 	bl	8005728 <__pow5mult>
 8004de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	4604      	mov	r4, r0
 8004de6:	f300 8095 	bgt.w	8004f14 <_dtoa_r+0x8dc>
 8004dea:	9b02      	ldr	r3, [sp, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f040 8087 	bne.w	8004f00 <_dtoa_r+0x8c8>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f040 8089 	bne.w	8004f10 <_dtoa_r+0x8d8>
 8004dfe:	9b03      	ldr	r3, [sp, #12]
 8004e00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004e04:	0d1b      	lsrs	r3, r3, #20
 8004e06:	051b      	lsls	r3, r3, #20
 8004e08:	b12b      	cbz	r3, 8004e16 <_dtoa_r+0x7de>
 8004e0a:	9b08      	ldr	r3, [sp, #32]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	9308      	str	r3, [sp, #32]
 8004e10:	f108 0801 	add.w	r8, r8, #1
 8004e14:	2301      	movs	r3, #1
 8004e16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 81b0 	beq.w	8005180 <_dtoa_r+0xb48>
 8004e20:	6923      	ldr	r3, [r4, #16]
 8004e22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004e26:	6918      	ldr	r0, [r3, #16]
 8004e28:	f000 fb72 	bl	8005510 <__hi0bits>
 8004e2c:	f1c0 0020 	rsb	r0, r0, #32
 8004e30:	9b08      	ldr	r3, [sp, #32]
 8004e32:	4418      	add	r0, r3
 8004e34:	f010 001f 	ands.w	r0, r0, #31
 8004e38:	d077      	beq.n	8004f2a <_dtoa_r+0x8f2>
 8004e3a:	f1c0 0320 	rsb	r3, r0, #32
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	dd6b      	ble.n	8004f1a <_dtoa_r+0x8e2>
 8004e42:	9b08      	ldr	r3, [sp, #32]
 8004e44:	f1c0 001c 	rsb	r0, r0, #28
 8004e48:	4403      	add	r3, r0
 8004e4a:	4480      	add	r8, r0
 8004e4c:	4406      	add	r6, r0
 8004e4e:	9308      	str	r3, [sp, #32]
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	dd05      	ble.n	8004e62 <_dtoa_r+0x82a>
 8004e56:	4649      	mov	r1, r9
 8004e58:	4642      	mov	r2, r8
 8004e5a:	4658      	mov	r0, fp
 8004e5c:	f000 fcbe 	bl	80057dc <__lshift>
 8004e60:	4681      	mov	r9, r0
 8004e62:	9b08      	ldr	r3, [sp, #32]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dd05      	ble.n	8004e74 <_dtoa_r+0x83c>
 8004e68:	4621      	mov	r1, r4
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	f000 fcb5 	bl	80057dc <__lshift>
 8004e72:	4604      	mov	r4, r0
 8004e74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d059      	beq.n	8004f2e <_dtoa_r+0x8f6>
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4648      	mov	r0, r9
 8004e7e:	f000 fd19 	bl	80058b4 <__mcmp>
 8004e82:	2800      	cmp	r0, #0
 8004e84:	da53      	bge.n	8004f2e <_dtoa_r+0x8f6>
 8004e86:	1e7b      	subs	r3, r7, #1
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	220a      	movs	r2, #10
 8004e90:	4658      	mov	r0, fp
 8004e92:	f000 faf7 	bl	8005484 <__multadd>
 8004e96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e98:	4681      	mov	r9, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 8172 	beq.w	8005184 <_dtoa_r+0xb4c>
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	220a      	movs	r2, #10
 8004ea6:	4658      	mov	r0, fp
 8004ea8:	f000 faec 	bl	8005484 <__multadd>
 8004eac:	9b00      	ldr	r3, [sp, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	4605      	mov	r5, r0
 8004eb2:	dc67      	bgt.n	8004f84 <_dtoa_r+0x94c>
 8004eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	dc41      	bgt.n	8004f3e <_dtoa_r+0x906>
 8004eba:	e063      	b.n	8004f84 <_dtoa_r+0x94c>
 8004ebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004ebe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004ec2:	e746      	b.n	8004d52 <_dtoa_r+0x71a>
 8004ec4:	9b07      	ldr	r3, [sp, #28]
 8004ec6:	1e5c      	subs	r4, r3, #1
 8004ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eca:	42a3      	cmp	r3, r4
 8004ecc:	bfbf      	itttt	lt
 8004ece:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004ed0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8004ed2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004ed4:	1ae3      	sublt	r3, r4, r3
 8004ed6:	bfb4      	ite	lt
 8004ed8:	18d2      	addlt	r2, r2, r3
 8004eda:	1b1c      	subge	r4, r3, r4
 8004edc:	9b07      	ldr	r3, [sp, #28]
 8004ede:	bfbc      	itt	lt
 8004ee0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8004ee2:	2400      	movlt	r4, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bfb5      	itete	lt
 8004ee8:	eba8 0603 	sublt.w	r6, r8, r3
 8004eec:	9b07      	ldrge	r3, [sp, #28]
 8004eee:	2300      	movlt	r3, #0
 8004ef0:	4646      	movge	r6, r8
 8004ef2:	e730      	b.n	8004d56 <_dtoa_r+0x71e>
 8004ef4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ef6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004ef8:	4646      	mov	r6, r8
 8004efa:	e735      	b.n	8004d68 <_dtoa_r+0x730>
 8004efc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004efe:	e75c      	b.n	8004dba <_dtoa_r+0x782>
 8004f00:	2300      	movs	r3, #0
 8004f02:	e788      	b.n	8004e16 <_dtoa_r+0x7de>
 8004f04:	3fe00000 	.word	0x3fe00000
 8004f08:	40240000 	.word	0x40240000
 8004f0c:	40140000 	.word	0x40140000
 8004f10:	9b02      	ldr	r3, [sp, #8]
 8004f12:	e780      	b.n	8004e16 <_dtoa_r+0x7de>
 8004f14:	2300      	movs	r3, #0
 8004f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f18:	e782      	b.n	8004e20 <_dtoa_r+0x7e8>
 8004f1a:	d099      	beq.n	8004e50 <_dtoa_r+0x818>
 8004f1c:	9a08      	ldr	r2, [sp, #32]
 8004f1e:	331c      	adds	r3, #28
 8004f20:	441a      	add	r2, r3
 8004f22:	4498      	add	r8, r3
 8004f24:	441e      	add	r6, r3
 8004f26:	9208      	str	r2, [sp, #32]
 8004f28:	e792      	b.n	8004e50 <_dtoa_r+0x818>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	e7f6      	b.n	8004f1c <_dtoa_r+0x8e4>
 8004f2e:	9b07      	ldr	r3, [sp, #28]
 8004f30:	9704      	str	r7, [sp, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dc20      	bgt.n	8004f78 <_dtoa_r+0x940>
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	dd1e      	ble.n	8004f7c <_dtoa_r+0x944>
 8004f3e:	9b00      	ldr	r3, [sp, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f47f aec0 	bne.w	8004cc6 <_dtoa_r+0x68e>
 8004f46:	4621      	mov	r1, r4
 8004f48:	2205      	movs	r2, #5
 8004f4a:	4658      	mov	r0, fp
 8004f4c:	f000 fa9a 	bl	8005484 <__multadd>
 8004f50:	4601      	mov	r1, r0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4648      	mov	r0, r9
 8004f56:	f000 fcad 	bl	80058b4 <__mcmp>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	f77f aeb3 	ble.w	8004cc6 <_dtoa_r+0x68e>
 8004f60:	4656      	mov	r6, sl
 8004f62:	2331      	movs	r3, #49	@ 0x31
 8004f64:	f806 3b01 	strb.w	r3, [r6], #1
 8004f68:	9b04      	ldr	r3, [sp, #16]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	9304      	str	r3, [sp, #16]
 8004f6e:	e6ae      	b.n	8004cce <_dtoa_r+0x696>
 8004f70:	9c07      	ldr	r4, [sp, #28]
 8004f72:	9704      	str	r7, [sp, #16]
 8004f74:	4625      	mov	r5, r4
 8004f76:	e7f3      	b.n	8004f60 <_dtoa_r+0x928>
 8004f78:	9b07      	ldr	r3, [sp, #28]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8104 	beq.w	800518c <_dtoa_r+0xb54>
 8004f84:	2e00      	cmp	r6, #0
 8004f86:	dd05      	ble.n	8004f94 <_dtoa_r+0x95c>
 8004f88:	4629      	mov	r1, r5
 8004f8a:	4632      	mov	r2, r6
 8004f8c:	4658      	mov	r0, fp
 8004f8e:	f000 fc25 	bl	80057dc <__lshift>
 8004f92:	4605      	mov	r5, r0
 8004f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d05a      	beq.n	8005050 <_dtoa_r+0xa18>
 8004f9a:	6869      	ldr	r1, [r5, #4]
 8004f9c:	4658      	mov	r0, fp
 8004f9e:	f000 fa0f 	bl	80053c0 <_Balloc>
 8004fa2:	4606      	mov	r6, r0
 8004fa4:	b928      	cbnz	r0, 8004fb2 <_dtoa_r+0x97a>
 8004fa6:	4b84      	ldr	r3, [pc, #528]	@ (80051b8 <_dtoa_r+0xb80>)
 8004fa8:	4602      	mov	r2, r0
 8004faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004fae:	f7ff bb5a 	b.w	8004666 <_dtoa_r+0x2e>
 8004fb2:	692a      	ldr	r2, [r5, #16]
 8004fb4:	3202      	adds	r2, #2
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	f105 010c 	add.w	r1, r5, #12
 8004fbc:	300c      	adds	r0, #12
 8004fbe:	f000 fe3d 	bl	8005c3c <memcpy>
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4658      	mov	r0, fp
 8004fc8:	f000 fc08 	bl	80057dc <__lshift>
 8004fcc:	f10a 0301 	add.w	r3, sl, #1
 8004fd0:	9307      	str	r3, [sp, #28]
 8004fd2:	9b00      	ldr	r3, [sp, #0]
 8004fd4:	4453      	add	r3, sl
 8004fd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fd8:	9b02      	ldr	r3, [sp, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	462f      	mov	r7, r5
 8004fe0:	930a      	str	r3, [sp, #40]	@ 0x28
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	9b07      	ldr	r3, [sp, #28]
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	4648      	mov	r0, r9
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	f7ff fa98 	bl	8004522 <quorem>
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	9002      	str	r0, [sp, #8]
 8004ff6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004ffa:	4648      	mov	r0, r9
 8004ffc:	f000 fc5a 	bl	80058b4 <__mcmp>
 8005000:	462a      	mov	r2, r5
 8005002:	9008      	str	r0, [sp, #32]
 8005004:	4621      	mov	r1, r4
 8005006:	4658      	mov	r0, fp
 8005008:	f000 fc70 	bl	80058ec <__mdiff>
 800500c:	68c2      	ldr	r2, [r0, #12]
 800500e:	4606      	mov	r6, r0
 8005010:	bb02      	cbnz	r2, 8005054 <_dtoa_r+0xa1c>
 8005012:	4601      	mov	r1, r0
 8005014:	4648      	mov	r0, r9
 8005016:	f000 fc4d 	bl	80058b4 <__mcmp>
 800501a:	4602      	mov	r2, r0
 800501c:	4631      	mov	r1, r6
 800501e:	4658      	mov	r0, fp
 8005020:	920e      	str	r2, [sp, #56]	@ 0x38
 8005022:	f000 fa0d 	bl	8005440 <_Bfree>
 8005026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800502a:	9e07      	ldr	r6, [sp, #28]
 800502c:	ea43 0102 	orr.w	r1, r3, r2
 8005030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005032:	4319      	orrs	r1, r3
 8005034:	d110      	bne.n	8005058 <_dtoa_r+0xa20>
 8005036:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800503a:	d029      	beq.n	8005090 <_dtoa_r+0xa58>
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	2b00      	cmp	r3, #0
 8005040:	dd02      	ble.n	8005048 <_dtoa_r+0xa10>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005048:	9b00      	ldr	r3, [sp, #0]
 800504a:	f883 8000 	strb.w	r8, [r3]
 800504e:	e63f      	b.n	8004cd0 <_dtoa_r+0x698>
 8005050:	4628      	mov	r0, r5
 8005052:	e7bb      	b.n	8004fcc <_dtoa_r+0x994>
 8005054:	2201      	movs	r2, #1
 8005056:	e7e1      	b.n	800501c <_dtoa_r+0x9e4>
 8005058:	9b08      	ldr	r3, [sp, #32]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db04      	blt.n	8005068 <_dtoa_r+0xa30>
 800505e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005060:	430b      	orrs	r3, r1
 8005062:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005064:	430b      	orrs	r3, r1
 8005066:	d120      	bne.n	80050aa <_dtoa_r+0xa72>
 8005068:	2a00      	cmp	r2, #0
 800506a:	dded      	ble.n	8005048 <_dtoa_r+0xa10>
 800506c:	4649      	mov	r1, r9
 800506e:	2201      	movs	r2, #1
 8005070:	4658      	mov	r0, fp
 8005072:	f000 fbb3 	bl	80057dc <__lshift>
 8005076:	4621      	mov	r1, r4
 8005078:	4681      	mov	r9, r0
 800507a:	f000 fc1b 	bl	80058b4 <__mcmp>
 800507e:	2800      	cmp	r0, #0
 8005080:	dc03      	bgt.n	800508a <_dtoa_r+0xa52>
 8005082:	d1e1      	bne.n	8005048 <_dtoa_r+0xa10>
 8005084:	f018 0f01 	tst.w	r8, #1
 8005088:	d0de      	beq.n	8005048 <_dtoa_r+0xa10>
 800508a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800508e:	d1d8      	bne.n	8005042 <_dtoa_r+0xa0a>
 8005090:	9a00      	ldr	r2, [sp, #0]
 8005092:	2339      	movs	r3, #57	@ 0x39
 8005094:	7013      	strb	r3, [r2, #0]
 8005096:	4633      	mov	r3, r6
 8005098:	461e      	mov	r6, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80050a0:	2a39      	cmp	r2, #57	@ 0x39
 80050a2:	d052      	beq.n	800514a <_dtoa_r+0xb12>
 80050a4:	3201      	adds	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e612      	b.n	8004cd0 <_dtoa_r+0x698>
 80050aa:	2a00      	cmp	r2, #0
 80050ac:	dd07      	ble.n	80050be <_dtoa_r+0xa86>
 80050ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80050b2:	d0ed      	beq.n	8005090 <_dtoa_r+0xa58>
 80050b4:	9a00      	ldr	r2, [sp, #0]
 80050b6:	f108 0301 	add.w	r3, r8, #1
 80050ba:	7013      	strb	r3, [r2, #0]
 80050bc:	e608      	b.n	8004cd0 <_dtoa_r+0x698>
 80050be:	9b07      	ldr	r3, [sp, #28]
 80050c0:	9a07      	ldr	r2, [sp, #28]
 80050c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80050c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d028      	beq.n	800511e <_dtoa_r+0xae6>
 80050cc:	4649      	mov	r1, r9
 80050ce:	2300      	movs	r3, #0
 80050d0:	220a      	movs	r2, #10
 80050d2:	4658      	mov	r0, fp
 80050d4:	f000 f9d6 	bl	8005484 <__multadd>
 80050d8:	42af      	cmp	r7, r5
 80050da:	4681      	mov	r9, r0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f04f 020a 	mov.w	r2, #10
 80050e4:	4639      	mov	r1, r7
 80050e6:	4658      	mov	r0, fp
 80050e8:	d107      	bne.n	80050fa <_dtoa_r+0xac2>
 80050ea:	f000 f9cb 	bl	8005484 <__multadd>
 80050ee:	4607      	mov	r7, r0
 80050f0:	4605      	mov	r5, r0
 80050f2:	9b07      	ldr	r3, [sp, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	9307      	str	r3, [sp, #28]
 80050f8:	e774      	b.n	8004fe4 <_dtoa_r+0x9ac>
 80050fa:	f000 f9c3 	bl	8005484 <__multadd>
 80050fe:	4629      	mov	r1, r5
 8005100:	4607      	mov	r7, r0
 8005102:	2300      	movs	r3, #0
 8005104:	220a      	movs	r2, #10
 8005106:	4658      	mov	r0, fp
 8005108:	f000 f9bc 	bl	8005484 <__multadd>
 800510c:	4605      	mov	r5, r0
 800510e:	e7f0      	b.n	80050f2 <_dtoa_r+0xaba>
 8005110:	9b00      	ldr	r3, [sp, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	bfcc      	ite	gt
 8005116:	461e      	movgt	r6, r3
 8005118:	2601      	movle	r6, #1
 800511a:	4456      	add	r6, sl
 800511c:	2700      	movs	r7, #0
 800511e:	4649      	mov	r1, r9
 8005120:	2201      	movs	r2, #1
 8005122:	4658      	mov	r0, fp
 8005124:	f000 fb5a 	bl	80057dc <__lshift>
 8005128:	4621      	mov	r1, r4
 800512a:	4681      	mov	r9, r0
 800512c:	f000 fbc2 	bl	80058b4 <__mcmp>
 8005130:	2800      	cmp	r0, #0
 8005132:	dcb0      	bgt.n	8005096 <_dtoa_r+0xa5e>
 8005134:	d102      	bne.n	800513c <_dtoa_r+0xb04>
 8005136:	f018 0f01 	tst.w	r8, #1
 800513a:	d1ac      	bne.n	8005096 <_dtoa_r+0xa5e>
 800513c:	4633      	mov	r3, r6
 800513e:	461e      	mov	r6, r3
 8005140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005144:	2a30      	cmp	r2, #48	@ 0x30
 8005146:	d0fa      	beq.n	800513e <_dtoa_r+0xb06>
 8005148:	e5c2      	b.n	8004cd0 <_dtoa_r+0x698>
 800514a:	459a      	cmp	sl, r3
 800514c:	d1a4      	bne.n	8005098 <_dtoa_r+0xa60>
 800514e:	9b04      	ldr	r3, [sp, #16]
 8005150:	3301      	adds	r3, #1
 8005152:	9304      	str	r3, [sp, #16]
 8005154:	2331      	movs	r3, #49	@ 0x31
 8005156:	f88a 3000 	strb.w	r3, [sl]
 800515a:	e5b9      	b.n	8004cd0 <_dtoa_r+0x698>
 800515c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800515e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80051bc <_dtoa_r+0xb84>
 8005162:	b11b      	cbz	r3, 800516c <_dtoa_r+0xb34>
 8005164:	f10a 0308 	add.w	r3, sl, #8
 8005168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	4650      	mov	r0, sl
 800516e:	b019      	add	sp, #100	@ 0x64
 8005170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005176:	2b01      	cmp	r3, #1
 8005178:	f77f ae37 	ble.w	8004dea <_dtoa_r+0x7b2>
 800517c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800517e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005180:	2001      	movs	r0, #1
 8005182:	e655      	b.n	8004e30 <_dtoa_r+0x7f8>
 8005184:	9b00      	ldr	r3, [sp, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	f77f aed6 	ble.w	8004f38 <_dtoa_r+0x900>
 800518c:	4656      	mov	r6, sl
 800518e:	4621      	mov	r1, r4
 8005190:	4648      	mov	r0, r9
 8005192:	f7ff f9c6 	bl	8004522 <quorem>
 8005196:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800519a:	f806 8b01 	strb.w	r8, [r6], #1
 800519e:	9b00      	ldr	r3, [sp, #0]
 80051a0:	eba6 020a 	sub.w	r2, r6, sl
 80051a4:	4293      	cmp	r3, r2
 80051a6:	ddb3      	ble.n	8005110 <_dtoa_r+0xad8>
 80051a8:	4649      	mov	r1, r9
 80051aa:	2300      	movs	r3, #0
 80051ac:	220a      	movs	r2, #10
 80051ae:	4658      	mov	r0, fp
 80051b0:	f000 f968 	bl	8005484 <__multadd>
 80051b4:	4681      	mov	r9, r0
 80051b6:	e7ea      	b.n	800518e <_dtoa_r+0xb56>
 80051b8:	08006348 	.word	0x08006348
 80051bc:	080062cc 	.word	0x080062cc

080051c0 <_free_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4605      	mov	r5, r0
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d041      	beq.n	800524c <_free_r+0x8c>
 80051c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051cc:	1f0c      	subs	r4, r1, #4
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bfb8      	it	lt
 80051d2:	18e4      	addlt	r4, r4, r3
 80051d4:	f000 f8e8 	bl	80053a8 <__malloc_lock>
 80051d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005250 <_free_r+0x90>)
 80051da:	6813      	ldr	r3, [r2, #0]
 80051dc:	b933      	cbnz	r3, 80051ec <_free_r+0x2c>
 80051de:	6063      	str	r3, [r4, #4]
 80051e0:	6014      	str	r4, [r2, #0]
 80051e2:	4628      	mov	r0, r5
 80051e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051e8:	f000 b8e4 	b.w	80053b4 <__malloc_unlock>
 80051ec:	42a3      	cmp	r3, r4
 80051ee:	d908      	bls.n	8005202 <_free_r+0x42>
 80051f0:	6820      	ldr	r0, [r4, #0]
 80051f2:	1821      	adds	r1, r4, r0
 80051f4:	428b      	cmp	r3, r1
 80051f6:	bf01      	itttt	eq
 80051f8:	6819      	ldreq	r1, [r3, #0]
 80051fa:	685b      	ldreq	r3, [r3, #4]
 80051fc:	1809      	addeq	r1, r1, r0
 80051fe:	6021      	streq	r1, [r4, #0]
 8005200:	e7ed      	b.n	80051de <_free_r+0x1e>
 8005202:	461a      	mov	r2, r3
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	b10b      	cbz	r3, 800520c <_free_r+0x4c>
 8005208:	42a3      	cmp	r3, r4
 800520a:	d9fa      	bls.n	8005202 <_free_r+0x42>
 800520c:	6811      	ldr	r1, [r2, #0]
 800520e:	1850      	adds	r0, r2, r1
 8005210:	42a0      	cmp	r0, r4
 8005212:	d10b      	bne.n	800522c <_free_r+0x6c>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	4401      	add	r1, r0
 8005218:	1850      	adds	r0, r2, r1
 800521a:	4283      	cmp	r3, r0
 800521c:	6011      	str	r1, [r2, #0]
 800521e:	d1e0      	bne.n	80051e2 <_free_r+0x22>
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	6053      	str	r3, [r2, #4]
 8005226:	4408      	add	r0, r1
 8005228:	6010      	str	r0, [r2, #0]
 800522a:	e7da      	b.n	80051e2 <_free_r+0x22>
 800522c:	d902      	bls.n	8005234 <_free_r+0x74>
 800522e:	230c      	movs	r3, #12
 8005230:	602b      	str	r3, [r5, #0]
 8005232:	e7d6      	b.n	80051e2 <_free_r+0x22>
 8005234:	6820      	ldr	r0, [r4, #0]
 8005236:	1821      	adds	r1, r4, r0
 8005238:	428b      	cmp	r3, r1
 800523a:	bf04      	itt	eq
 800523c:	6819      	ldreq	r1, [r3, #0]
 800523e:	685b      	ldreq	r3, [r3, #4]
 8005240:	6063      	str	r3, [r4, #4]
 8005242:	bf04      	itt	eq
 8005244:	1809      	addeq	r1, r1, r0
 8005246:	6021      	streq	r1, [r4, #0]
 8005248:	6054      	str	r4, [r2, #4]
 800524a:	e7ca      	b.n	80051e2 <_free_r+0x22>
 800524c:	bd38      	pop	{r3, r4, r5, pc}
 800524e:	bf00      	nop
 8005250:	200003e4 	.word	0x200003e4

08005254 <malloc>:
 8005254:	4b02      	ldr	r3, [pc, #8]	@ (8005260 <malloc+0xc>)
 8005256:	4601      	mov	r1, r0
 8005258:	6818      	ldr	r0, [r3, #0]
 800525a:	f000 b825 	b.w	80052a8 <_malloc_r>
 800525e:	bf00      	nop
 8005260:	20000028 	.word	0x20000028

08005264 <sbrk_aligned>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4e0f      	ldr	r6, [pc, #60]	@ (80052a4 <sbrk_aligned+0x40>)
 8005268:	460c      	mov	r4, r1
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	4605      	mov	r5, r0
 800526e:	b911      	cbnz	r1, 8005276 <sbrk_aligned+0x12>
 8005270:	f000 fcd4 	bl	8005c1c <_sbrk_r>
 8005274:	6030      	str	r0, [r6, #0]
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 fccf 	bl	8005c1c <_sbrk_r>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d103      	bne.n	800528a <sbrk_aligned+0x26>
 8005282:	f04f 34ff 	mov.w	r4, #4294967295
 8005286:	4620      	mov	r0, r4
 8005288:	bd70      	pop	{r4, r5, r6, pc}
 800528a:	1cc4      	adds	r4, r0, #3
 800528c:	f024 0403 	bic.w	r4, r4, #3
 8005290:	42a0      	cmp	r0, r4
 8005292:	d0f8      	beq.n	8005286 <sbrk_aligned+0x22>
 8005294:	1a21      	subs	r1, r4, r0
 8005296:	4628      	mov	r0, r5
 8005298:	f000 fcc0 	bl	8005c1c <_sbrk_r>
 800529c:	3001      	adds	r0, #1
 800529e:	d1f2      	bne.n	8005286 <sbrk_aligned+0x22>
 80052a0:	e7ef      	b.n	8005282 <sbrk_aligned+0x1e>
 80052a2:	bf00      	nop
 80052a4:	200003e0 	.word	0x200003e0

080052a8 <_malloc_r>:
 80052a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ac:	1ccd      	adds	r5, r1, #3
 80052ae:	f025 0503 	bic.w	r5, r5, #3
 80052b2:	3508      	adds	r5, #8
 80052b4:	2d0c      	cmp	r5, #12
 80052b6:	bf38      	it	cc
 80052b8:	250c      	movcc	r5, #12
 80052ba:	2d00      	cmp	r5, #0
 80052bc:	4606      	mov	r6, r0
 80052be:	db01      	blt.n	80052c4 <_malloc_r+0x1c>
 80052c0:	42a9      	cmp	r1, r5
 80052c2:	d904      	bls.n	80052ce <_malloc_r+0x26>
 80052c4:	230c      	movs	r3, #12
 80052c6:	6033      	str	r3, [r6, #0]
 80052c8:	2000      	movs	r0, #0
 80052ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053a4 <_malloc_r+0xfc>
 80052d2:	f000 f869 	bl	80053a8 <__malloc_lock>
 80052d6:	f8d8 3000 	ldr.w	r3, [r8]
 80052da:	461c      	mov	r4, r3
 80052dc:	bb44      	cbnz	r4, 8005330 <_malloc_r+0x88>
 80052de:	4629      	mov	r1, r5
 80052e0:	4630      	mov	r0, r6
 80052e2:	f7ff ffbf 	bl	8005264 <sbrk_aligned>
 80052e6:	1c43      	adds	r3, r0, #1
 80052e8:	4604      	mov	r4, r0
 80052ea:	d158      	bne.n	800539e <_malloc_r+0xf6>
 80052ec:	f8d8 4000 	ldr.w	r4, [r8]
 80052f0:	4627      	mov	r7, r4
 80052f2:	2f00      	cmp	r7, #0
 80052f4:	d143      	bne.n	800537e <_malloc_r+0xd6>
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	d04b      	beq.n	8005392 <_malloc_r+0xea>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	4639      	mov	r1, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	eb04 0903 	add.w	r9, r4, r3
 8005304:	f000 fc8a 	bl	8005c1c <_sbrk_r>
 8005308:	4581      	cmp	r9, r0
 800530a:	d142      	bne.n	8005392 <_malloc_r+0xea>
 800530c:	6821      	ldr	r1, [r4, #0]
 800530e:	1a6d      	subs	r5, r5, r1
 8005310:	4629      	mov	r1, r5
 8005312:	4630      	mov	r0, r6
 8005314:	f7ff ffa6 	bl	8005264 <sbrk_aligned>
 8005318:	3001      	adds	r0, #1
 800531a:	d03a      	beq.n	8005392 <_malloc_r+0xea>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	442b      	add	r3, r5
 8005320:	6023      	str	r3, [r4, #0]
 8005322:	f8d8 3000 	ldr.w	r3, [r8]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	bb62      	cbnz	r2, 8005384 <_malloc_r+0xdc>
 800532a:	f8c8 7000 	str.w	r7, [r8]
 800532e:	e00f      	b.n	8005350 <_malloc_r+0xa8>
 8005330:	6822      	ldr	r2, [r4, #0]
 8005332:	1b52      	subs	r2, r2, r5
 8005334:	d420      	bmi.n	8005378 <_malloc_r+0xd0>
 8005336:	2a0b      	cmp	r2, #11
 8005338:	d917      	bls.n	800536a <_malloc_r+0xc2>
 800533a:	1961      	adds	r1, r4, r5
 800533c:	42a3      	cmp	r3, r4
 800533e:	6025      	str	r5, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	6059      	strne	r1, [r3, #4]
 8005344:	6863      	ldr	r3, [r4, #4]
 8005346:	bf08      	it	eq
 8005348:	f8c8 1000 	streq.w	r1, [r8]
 800534c:	5162      	str	r2, [r4, r5]
 800534e:	604b      	str	r3, [r1, #4]
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f82f 	bl	80053b4 <__malloc_unlock>
 8005356:	f104 000b 	add.w	r0, r4, #11
 800535a:	1d23      	adds	r3, r4, #4
 800535c:	f020 0007 	bic.w	r0, r0, #7
 8005360:	1ac2      	subs	r2, r0, r3
 8005362:	bf1c      	itt	ne
 8005364:	1a1b      	subne	r3, r3, r0
 8005366:	50a3      	strne	r3, [r4, r2]
 8005368:	e7af      	b.n	80052ca <_malloc_r+0x22>
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	42a3      	cmp	r3, r4
 800536e:	bf0c      	ite	eq
 8005370:	f8c8 2000 	streq.w	r2, [r8]
 8005374:	605a      	strne	r2, [r3, #4]
 8005376:	e7eb      	b.n	8005350 <_malloc_r+0xa8>
 8005378:	4623      	mov	r3, r4
 800537a:	6864      	ldr	r4, [r4, #4]
 800537c:	e7ae      	b.n	80052dc <_malloc_r+0x34>
 800537e:	463c      	mov	r4, r7
 8005380:	687f      	ldr	r7, [r7, #4]
 8005382:	e7b6      	b.n	80052f2 <_malloc_r+0x4a>
 8005384:	461a      	mov	r2, r3
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	42a3      	cmp	r3, r4
 800538a:	d1fb      	bne.n	8005384 <_malloc_r+0xdc>
 800538c:	2300      	movs	r3, #0
 800538e:	6053      	str	r3, [r2, #4]
 8005390:	e7de      	b.n	8005350 <_malloc_r+0xa8>
 8005392:	230c      	movs	r3, #12
 8005394:	6033      	str	r3, [r6, #0]
 8005396:	4630      	mov	r0, r6
 8005398:	f000 f80c 	bl	80053b4 <__malloc_unlock>
 800539c:	e794      	b.n	80052c8 <_malloc_r+0x20>
 800539e:	6005      	str	r5, [r0, #0]
 80053a0:	e7d6      	b.n	8005350 <_malloc_r+0xa8>
 80053a2:	bf00      	nop
 80053a4:	200003e4 	.word	0x200003e4

080053a8 <__malloc_lock>:
 80053a8:	4801      	ldr	r0, [pc, #4]	@ (80053b0 <__malloc_lock+0x8>)
 80053aa:	f7ff b8b8 	b.w	800451e <__retarget_lock_acquire_recursive>
 80053ae:	bf00      	nop
 80053b0:	200003dc 	.word	0x200003dc

080053b4 <__malloc_unlock>:
 80053b4:	4801      	ldr	r0, [pc, #4]	@ (80053bc <__malloc_unlock+0x8>)
 80053b6:	f7ff b8b3 	b.w	8004520 <__retarget_lock_release_recursive>
 80053ba:	bf00      	nop
 80053bc:	200003dc 	.word	0x200003dc

080053c0 <_Balloc>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	69c6      	ldr	r6, [r0, #28]
 80053c4:	4604      	mov	r4, r0
 80053c6:	460d      	mov	r5, r1
 80053c8:	b976      	cbnz	r6, 80053e8 <_Balloc+0x28>
 80053ca:	2010      	movs	r0, #16
 80053cc:	f7ff ff42 	bl	8005254 <malloc>
 80053d0:	4602      	mov	r2, r0
 80053d2:	61e0      	str	r0, [r4, #28]
 80053d4:	b920      	cbnz	r0, 80053e0 <_Balloc+0x20>
 80053d6:	4b18      	ldr	r3, [pc, #96]	@ (8005438 <_Balloc+0x78>)
 80053d8:	4818      	ldr	r0, [pc, #96]	@ (800543c <_Balloc+0x7c>)
 80053da:	216b      	movs	r1, #107	@ 0x6b
 80053dc:	f000 fc3c 	bl	8005c58 <__assert_func>
 80053e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80053e4:	6006      	str	r6, [r0, #0]
 80053e6:	60c6      	str	r6, [r0, #12]
 80053e8:	69e6      	ldr	r6, [r4, #28]
 80053ea:	68f3      	ldr	r3, [r6, #12]
 80053ec:	b183      	cbz	r3, 8005410 <_Balloc+0x50>
 80053ee:	69e3      	ldr	r3, [r4, #28]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80053f6:	b9b8      	cbnz	r0, 8005428 <_Balloc+0x68>
 80053f8:	2101      	movs	r1, #1
 80053fa:	fa01 f605 	lsl.w	r6, r1, r5
 80053fe:	1d72      	adds	r2, r6, #5
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	4620      	mov	r0, r4
 8005404:	f000 fc46 	bl	8005c94 <_calloc_r>
 8005408:	b160      	cbz	r0, 8005424 <_Balloc+0x64>
 800540a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800540e:	e00e      	b.n	800542e <_Balloc+0x6e>
 8005410:	2221      	movs	r2, #33	@ 0x21
 8005412:	2104      	movs	r1, #4
 8005414:	4620      	mov	r0, r4
 8005416:	f000 fc3d 	bl	8005c94 <_calloc_r>
 800541a:	69e3      	ldr	r3, [r4, #28]
 800541c:	60f0      	str	r0, [r6, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e4      	bne.n	80053ee <_Balloc+0x2e>
 8005424:	2000      	movs	r0, #0
 8005426:	bd70      	pop	{r4, r5, r6, pc}
 8005428:	6802      	ldr	r2, [r0, #0]
 800542a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800542e:	2300      	movs	r3, #0
 8005430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005434:	e7f7      	b.n	8005426 <_Balloc+0x66>
 8005436:	bf00      	nop
 8005438:	080062d9 	.word	0x080062d9
 800543c:	08006359 	.word	0x08006359

08005440 <_Bfree>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	69c6      	ldr	r6, [r0, #28]
 8005444:	4605      	mov	r5, r0
 8005446:	460c      	mov	r4, r1
 8005448:	b976      	cbnz	r6, 8005468 <_Bfree+0x28>
 800544a:	2010      	movs	r0, #16
 800544c:	f7ff ff02 	bl	8005254 <malloc>
 8005450:	4602      	mov	r2, r0
 8005452:	61e8      	str	r0, [r5, #28]
 8005454:	b920      	cbnz	r0, 8005460 <_Bfree+0x20>
 8005456:	4b09      	ldr	r3, [pc, #36]	@ (800547c <_Bfree+0x3c>)
 8005458:	4809      	ldr	r0, [pc, #36]	@ (8005480 <_Bfree+0x40>)
 800545a:	218f      	movs	r1, #143	@ 0x8f
 800545c:	f000 fbfc 	bl	8005c58 <__assert_func>
 8005460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005464:	6006      	str	r6, [r0, #0]
 8005466:	60c6      	str	r6, [r0, #12]
 8005468:	b13c      	cbz	r4, 800547a <_Bfree+0x3a>
 800546a:	69eb      	ldr	r3, [r5, #28]
 800546c:	6862      	ldr	r2, [r4, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005474:	6021      	str	r1, [r4, #0]
 8005476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	080062d9 	.word	0x080062d9
 8005480:	08006359 	.word	0x08006359

08005484 <__multadd>:
 8005484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005488:	690d      	ldr	r5, [r1, #16]
 800548a:	4607      	mov	r7, r0
 800548c:	460c      	mov	r4, r1
 800548e:	461e      	mov	r6, r3
 8005490:	f101 0c14 	add.w	ip, r1, #20
 8005494:	2000      	movs	r0, #0
 8005496:	f8dc 3000 	ldr.w	r3, [ip]
 800549a:	b299      	uxth	r1, r3
 800549c:	fb02 6101 	mla	r1, r2, r1, r6
 80054a0:	0c1e      	lsrs	r6, r3, #16
 80054a2:	0c0b      	lsrs	r3, r1, #16
 80054a4:	fb02 3306 	mla	r3, r2, r6, r3
 80054a8:	b289      	uxth	r1, r1
 80054aa:	3001      	adds	r0, #1
 80054ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054b0:	4285      	cmp	r5, r0
 80054b2:	f84c 1b04 	str.w	r1, [ip], #4
 80054b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054ba:	dcec      	bgt.n	8005496 <__multadd+0x12>
 80054bc:	b30e      	cbz	r6, 8005502 <__multadd+0x7e>
 80054be:	68a3      	ldr	r3, [r4, #8]
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	dc19      	bgt.n	80054f8 <__multadd+0x74>
 80054c4:	6861      	ldr	r1, [r4, #4]
 80054c6:	4638      	mov	r0, r7
 80054c8:	3101      	adds	r1, #1
 80054ca:	f7ff ff79 	bl	80053c0 <_Balloc>
 80054ce:	4680      	mov	r8, r0
 80054d0:	b928      	cbnz	r0, 80054de <__multadd+0x5a>
 80054d2:	4602      	mov	r2, r0
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <__multadd+0x84>)
 80054d6:	480d      	ldr	r0, [pc, #52]	@ (800550c <__multadd+0x88>)
 80054d8:	21ba      	movs	r1, #186	@ 0xba
 80054da:	f000 fbbd 	bl	8005c58 <__assert_func>
 80054de:	6922      	ldr	r2, [r4, #16]
 80054e0:	3202      	adds	r2, #2
 80054e2:	f104 010c 	add.w	r1, r4, #12
 80054e6:	0092      	lsls	r2, r2, #2
 80054e8:	300c      	adds	r0, #12
 80054ea:	f000 fba7 	bl	8005c3c <memcpy>
 80054ee:	4621      	mov	r1, r4
 80054f0:	4638      	mov	r0, r7
 80054f2:	f7ff ffa5 	bl	8005440 <_Bfree>
 80054f6:	4644      	mov	r4, r8
 80054f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054fc:	3501      	adds	r5, #1
 80054fe:	615e      	str	r6, [r3, #20]
 8005500:	6125      	str	r5, [r4, #16]
 8005502:	4620      	mov	r0, r4
 8005504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005508:	08006348 	.word	0x08006348
 800550c:	08006359 	.word	0x08006359

08005510 <__hi0bits>:
 8005510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005514:	4603      	mov	r3, r0
 8005516:	bf36      	itet	cc
 8005518:	0403      	lslcc	r3, r0, #16
 800551a:	2000      	movcs	r0, #0
 800551c:	2010      	movcc	r0, #16
 800551e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005522:	bf3c      	itt	cc
 8005524:	021b      	lslcc	r3, r3, #8
 8005526:	3008      	addcc	r0, #8
 8005528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800552c:	bf3c      	itt	cc
 800552e:	011b      	lslcc	r3, r3, #4
 8005530:	3004      	addcc	r0, #4
 8005532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005536:	bf3c      	itt	cc
 8005538:	009b      	lslcc	r3, r3, #2
 800553a:	3002      	addcc	r0, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	db05      	blt.n	800554c <__hi0bits+0x3c>
 8005540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005544:	f100 0001 	add.w	r0, r0, #1
 8005548:	bf08      	it	eq
 800554a:	2020      	moveq	r0, #32
 800554c:	4770      	bx	lr

0800554e <__lo0bits>:
 800554e:	6803      	ldr	r3, [r0, #0]
 8005550:	4602      	mov	r2, r0
 8005552:	f013 0007 	ands.w	r0, r3, #7
 8005556:	d00b      	beq.n	8005570 <__lo0bits+0x22>
 8005558:	07d9      	lsls	r1, r3, #31
 800555a:	d421      	bmi.n	80055a0 <__lo0bits+0x52>
 800555c:	0798      	lsls	r0, r3, #30
 800555e:	bf49      	itett	mi
 8005560:	085b      	lsrmi	r3, r3, #1
 8005562:	089b      	lsrpl	r3, r3, #2
 8005564:	2001      	movmi	r0, #1
 8005566:	6013      	strmi	r3, [r2, #0]
 8005568:	bf5c      	itt	pl
 800556a:	6013      	strpl	r3, [r2, #0]
 800556c:	2002      	movpl	r0, #2
 800556e:	4770      	bx	lr
 8005570:	b299      	uxth	r1, r3
 8005572:	b909      	cbnz	r1, 8005578 <__lo0bits+0x2a>
 8005574:	0c1b      	lsrs	r3, r3, #16
 8005576:	2010      	movs	r0, #16
 8005578:	b2d9      	uxtb	r1, r3
 800557a:	b909      	cbnz	r1, 8005580 <__lo0bits+0x32>
 800557c:	3008      	adds	r0, #8
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	0719      	lsls	r1, r3, #28
 8005582:	bf04      	itt	eq
 8005584:	091b      	lsreq	r3, r3, #4
 8005586:	3004      	addeq	r0, #4
 8005588:	0799      	lsls	r1, r3, #30
 800558a:	bf04      	itt	eq
 800558c:	089b      	lsreq	r3, r3, #2
 800558e:	3002      	addeq	r0, #2
 8005590:	07d9      	lsls	r1, r3, #31
 8005592:	d403      	bmi.n	800559c <__lo0bits+0x4e>
 8005594:	085b      	lsrs	r3, r3, #1
 8005596:	f100 0001 	add.w	r0, r0, #1
 800559a:	d003      	beq.n	80055a4 <__lo0bits+0x56>
 800559c:	6013      	str	r3, [r2, #0]
 800559e:	4770      	bx	lr
 80055a0:	2000      	movs	r0, #0
 80055a2:	4770      	bx	lr
 80055a4:	2020      	movs	r0, #32
 80055a6:	4770      	bx	lr

080055a8 <__i2b>:
 80055a8:	b510      	push	{r4, lr}
 80055aa:	460c      	mov	r4, r1
 80055ac:	2101      	movs	r1, #1
 80055ae:	f7ff ff07 	bl	80053c0 <_Balloc>
 80055b2:	4602      	mov	r2, r0
 80055b4:	b928      	cbnz	r0, 80055c2 <__i2b+0x1a>
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <__i2b+0x24>)
 80055b8:	4805      	ldr	r0, [pc, #20]	@ (80055d0 <__i2b+0x28>)
 80055ba:	f240 1145 	movw	r1, #325	@ 0x145
 80055be:	f000 fb4b 	bl	8005c58 <__assert_func>
 80055c2:	2301      	movs	r3, #1
 80055c4:	6144      	str	r4, [r0, #20]
 80055c6:	6103      	str	r3, [r0, #16]
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	bf00      	nop
 80055cc:	08006348 	.word	0x08006348
 80055d0:	08006359 	.word	0x08006359

080055d4 <__multiply>:
 80055d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d8:	4614      	mov	r4, r2
 80055da:	690a      	ldr	r2, [r1, #16]
 80055dc:	6923      	ldr	r3, [r4, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	bfa8      	it	ge
 80055e2:	4623      	movge	r3, r4
 80055e4:	460f      	mov	r7, r1
 80055e6:	bfa4      	itt	ge
 80055e8:	460c      	movge	r4, r1
 80055ea:	461f      	movge	r7, r3
 80055ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80055f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80055f4:	68a3      	ldr	r3, [r4, #8]
 80055f6:	6861      	ldr	r1, [r4, #4]
 80055f8:	eb0a 0609 	add.w	r6, sl, r9
 80055fc:	42b3      	cmp	r3, r6
 80055fe:	b085      	sub	sp, #20
 8005600:	bfb8      	it	lt
 8005602:	3101      	addlt	r1, #1
 8005604:	f7ff fedc 	bl	80053c0 <_Balloc>
 8005608:	b930      	cbnz	r0, 8005618 <__multiply+0x44>
 800560a:	4602      	mov	r2, r0
 800560c:	4b44      	ldr	r3, [pc, #272]	@ (8005720 <__multiply+0x14c>)
 800560e:	4845      	ldr	r0, [pc, #276]	@ (8005724 <__multiply+0x150>)
 8005610:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005614:	f000 fb20 	bl	8005c58 <__assert_func>
 8005618:	f100 0514 	add.w	r5, r0, #20
 800561c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005620:	462b      	mov	r3, r5
 8005622:	2200      	movs	r2, #0
 8005624:	4543      	cmp	r3, r8
 8005626:	d321      	bcc.n	800566c <__multiply+0x98>
 8005628:	f107 0114 	add.w	r1, r7, #20
 800562c:	f104 0214 	add.w	r2, r4, #20
 8005630:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005634:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005638:	9302      	str	r3, [sp, #8]
 800563a:	1b13      	subs	r3, r2, r4
 800563c:	3b15      	subs	r3, #21
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	3304      	adds	r3, #4
 8005644:	f104 0715 	add.w	r7, r4, #21
 8005648:	42ba      	cmp	r2, r7
 800564a:	bf38      	it	cc
 800564c:	2304      	movcc	r3, #4
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	9b02      	ldr	r3, [sp, #8]
 8005652:	9103      	str	r1, [sp, #12]
 8005654:	428b      	cmp	r3, r1
 8005656:	d80c      	bhi.n	8005672 <__multiply+0x9e>
 8005658:	2e00      	cmp	r6, #0
 800565a:	dd03      	ble.n	8005664 <__multiply+0x90>
 800565c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005660:	2b00      	cmp	r3, #0
 8005662:	d05b      	beq.n	800571c <__multiply+0x148>
 8005664:	6106      	str	r6, [r0, #16]
 8005666:	b005      	add	sp, #20
 8005668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566c:	f843 2b04 	str.w	r2, [r3], #4
 8005670:	e7d8      	b.n	8005624 <__multiply+0x50>
 8005672:	f8b1 a000 	ldrh.w	sl, [r1]
 8005676:	f1ba 0f00 	cmp.w	sl, #0
 800567a:	d024      	beq.n	80056c6 <__multiply+0xf2>
 800567c:	f104 0e14 	add.w	lr, r4, #20
 8005680:	46a9      	mov	r9, r5
 8005682:	f04f 0c00 	mov.w	ip, #0
 8005686:	f85e 7b04 	ldr.w	r7, [lr], #4
 800568a:	f8d9 3000 	ldr.w	r3, [r9]
 800568e:	fa1f fb87 	uxth.w	fp, r7
 8005692:	b29b      	uxth	r3, r3
 8005694:	fb0a 330b 	mla	r3, sl, fp, r3
 8005698:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800569c:	f8d9 7000 	ldr.w	r7, [r9]
 80056a0:	4463      	add	r3, ip
 80056a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80056a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80056aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056b4:	4572      	cmp	r2, lr
 80056b6:	f849 3b04 	str.w	r3, [r9], #4
 80056ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80056be:	d8e2      	bhi.n	8005686 <__multiply+0xb2>
 80056c0:	9b01      	ldr	r3, [sp, #4]
 80056c2:	f845 c003 	str.w	ip, [r5, r3]
 80056c6:	9b03      	ldr	r3, [sp, #12]
 80056c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80056cc:	3104      	adds	r1, #4
 80056ce:	f1b9 0f00 	cmp.w	r9, #0
 80056d2:	d021      	beq.n	8005718 <__multiply+0x144>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	f104 0c14 	add.w	ip, r4, #20
 80056da:	46ae      	mov	lr, r5
 80056dc:	f04f 0a00 	mov.w	sl, #0
 80056e0:	f8bc b000 	ldrh.w	fp, [ip]
 80056e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80056e8:	fb09 770b 	mla	r7, r9, fp, r7
 80056ec:	4457      	add	r7, sl
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80056f4:	f84e 3b04 	str.w	r3, [lr], #4
 80056f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005700:	f8be 3000 	ldrh.w	r3, [lr]
 8005704:	fb09 330a 	mla	r3, r9, sl, r3
 8005708:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800570c:	4562      	cmp	r2, ip
 800570e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005712:	d8e5      	bhi.n	80056e0 <__multiply+0x10c>
 8005714:	9f01      	ldr	r7, [sp, #4]
 8005716:	51eb      	str	r3, [r5, r7]
 8005718:	3504      	adds	r5, #4
 800571a:	e799      	b.n	8005650 <__multiply+0x7c>
 800571c:	3e01      	subs	r6, #1
 800571e:	e79b      	b.n	8005658 <__multiply+0x84>
 8005720:	08006348 	.word	0x08006348
 8005724:	08006359 	.word	0x08006359

08005728 <__pow5mult>:
 8005728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800572c:	4615      	mov	r5, r2
 800572e:	f012 0203 	ands.w	r2, r2, #3
 8005732:	4607      	mov	r7, r0
 8005734:	460e      	mov	r6, r1
 8005736:	d007      	beq.n	8005748 <__pow5mult+0x20>
 8005738:	4c25      	ldr	r4, [pc, #148]	@ (80057d0 <__pow5mult+0xa8>)
 800573a:	3a01      	subs	r2, #1
 800573c:	2300      	movs	r3, #0
 800573e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005742:	f7ff fe9f 	bl	8005484 <__multadd>
 8005746:	4606      	mov	r6, r0
 8005748:	10ad      	asrs	r5, r5, #2
 800574a:	d03d      	beq.n	80057c8 <__pow5mult+0xa0>
 800574c:	69fc      	ldr	r4, [r7, #28]
 800574e:	b97c      	cbnz	r4, 8005770 <__pow5mult+0x48>
 8005750:	2010      	movs	r0, #16
 8005752:	f7ff fd7f 	bl	8005254 <malloc>
 8005756:	4602      	mov	r2, r0
 8005758:	61f8      	str	r0, [r7, #28]
 800575a:	b928      	cbnz	r0, 8005768 <__pow5mult+0x40>
 800575c:	4b1d      	ldr	r3, [pc, #116]	@ (80057d4 <__pow5mult+0xac>)
 800575e:	481e      	ldr	r0, [pc, #120]	@ (80057d8 <__pow5mult+0xb0>)
 8005760:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005764:	f000 fa78 	bl	8005c58 <__assert_func>
 8005768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800576c:	6004      	str	r4, [r0, #0]
 800576e:	60c4      	str	r4, [r0, #12]
 8005770:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005778:	b94c      	cbnz	r4, 800578e <__pow5mult+0x66>
 800577a:	f240 2171 	movw	r1, #625	@ 0x271
 800577e:	4638      	mov	r0, r7
 8005780:	f7ff ff12 	bl	80055a8 <__i2b>
 8005784:	2300      	movs	r3, #0
 8005786:	f8c8 0008 	str.w	r0, [r8, #8]
 800578a:	4604      	mov	r4, r0
 800578c:	6003      	str	r3, [r0, #0]
 800578e:	f04f 0900 	mov.w	r9, #0
 8005792:	07eb      	lsls	r3, r5, #31
 8005794:	d50a      	bpl.n	80057ac <__pow5mult+0x84>
 8005796:	4631      	mov	r1, r6
 8005798:	4622      	mov	r2, r4
 800579a:	4638      	mov	r0, r7
 800579c:	f7ff ff1a 	bl	80055d4 <__multiply>
 80057a0:	4631      	mov	r1, r6
 80057a2:	4680      	mov	r8, r0
 80057a4:	4638      	mov	r0, r7
 80057a6:	f7ff fe4b 	bl	8005440 <_Bfree>
 80057aa:	4646      	mov	r6, r8
 80057ac:	106d      	asrs	r5, r5, #1
 80057ae:	d00b      	beq.n	80057c8 <__pow5mult+0xa0>
 80057b0:	6820      	ldr	r0, [r4, #0]
 80057b2:	b938      	cbnz	r0, 80057c4 <__pow5mult+0x9c>
 80057b4:	4622      	mov	r2, r4
 80057b6:	4621      	mov	r1, r4
 80057b8:	4638      	mov	r0, r7
 80057ba:	f7ff ff0b 	bl	80055d4 <__multiply>
 80057be:	6020      	str	r0, [r4, #0]
 80057c0:	f8c0 9000 	str.w	r9, [r0]
 80057c4:	4604      	mov	r4, r0
 80057c6:	e7e4      	b.n	8005792 <__pow5mult+0x6a>
 80057c8:	4630      	mov	r0, r6
 80057ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ce:	bf00      	nop
 80057d0:	080063b4 	.word	0x080063b4
 80057d4:	080062d9 	.word	0x080062d9
 80057d8:	08006359 	.word	0x08006359

080057dc <__lshift>:
 80057dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057e0:	460c      	mov	r4, r1
 80057e2:	6849      	ldr	r1, [r1, #4]
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80057ea:	68a3      	ldr	r3, [r4, #8]
 80057ec:	4607      	mov	r7, r0
 80057ee:	4691      	mov	r9, r2
 80057f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057f4:	f108 0601 	add.w	r6, r8, #1
 80057f8:	42b3      	cmp	r3, r6
 80057fa:	db0b      	blt.n	8005814 <__lshift+0x38>
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff fddf 	bl	80053c0 <_Balloc>
 8005802:	4605      	mov	r5, r0
 8005804:	b948      	cbnz	r0, 800581a <__lshift+0x3e>
 8005806:	4602      	mov	r2, r0
 8005808:	4b28      	ldr	r3, [pc, #160]	@ (80058ac <__lshift+0xd0>)
 800580a:	4829      	ldr	r0, [pc, #164]	@ (80058b0 <__lshift+0xd4>)
 800580c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005810:	f000 fa22 	bl	8005c58 <__assert_func>
 8005814:	3101      	adds	r1, #1
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	e7ee      	b.n	80057f8 <__lshift+0x1c>
 800581a:	2300      	movs	r3, #0
 800581c:	f100 0114 	add.w	r1, r0, #20
 8005820:	f100 0210 	add.w	r2, r0, #16
 8005824:	4618      	mov	r0, r3
 8005826:	4553      	cmp	r3, sl
 8005828:	db33      	blt.n	8005892 <__lshift+0xb6>
 800582a:	6920      	ldr	r0, [r4, #16]
 800582c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005830:	f104 0314 	add.w	r3, r4, #20
 8005834:	f019 091f 	ands.w	r9, r9, #31
 8005838:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800583c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005840:	d02b      	beq.n	800589a <__lshift+0xbe>
 8005842:	f1c9 0e20 	rsb	lr, r9, #32
 8005846:	468a      	mov	sl, r1
 8005848:	2200      	movs	r2, #0
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	fa00 f009 	lsl.w	r0, r0, r9
 8005850:	4310      	orrs	r0, r2
 8005852:	f84a 0b04 	str.w	r0, [sl], #4
 8005856:	f853 2b04 	ldr.w	r2, [r3], #4
 800585a:	459c      	cmp	ip, r3
 800585c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005860:	d8f3      	bhi.n	800584a <__lshift+0x6e>
 8005862:	ebac 0304 	sub.w	r3, ip, r4
 8005866:	3b15      	subs	r3, #21
 8005868:	f023 0303 	bic.w	r3, r3, #3
 800586c:	3304      	adds	r3, #4
 800586e:	f104 0015 	add.w	r0, r4, #21
 8005872:	4584      	cmp	ip, r0
 8005874:	bf38      	it	cc
 8005876:	2304      	movcc	r3, #4
 8005878:	50ca      	str	r2, [r1, r3]
 800587a:	b10a      	cbz	r2, 8005880 <__lshift+0xa4>
 800587c:	f108 0602 	add.w	r6, r8, #2
 8005880:	3e01      	subs	r6, #1
 8005882:	4638      	mov	r0, r7
 8005884:	612e      	str	r6, [r5, #16]
 8005886:	4621      	mov	r1, r4
 8005888:	f7ff fdda 	bl	8005440 <_Bfree>
 800588c:	4628      	mov	r0, r5
 800588e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005892:	f842 0f04 	str.w	r0, [r2, #4]!
 8005896:	3301      	adds	r3, #1
 8005898:	e7c5      	b.n	8005826 <__lshift+0x4a>
 800589a:	3904      	subs	r1, #4
 800589c:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80058a4:	459c      	cmp	ip, r3
 80058a6:	d8f9      	bhi.n	800589c <__lshift+0xc0>
 80058a8:	e7ea      	b.n	8005880 <__lshift+0xa4>
 80058aa:	bf00      	nop
 80058ac:	08006348 	.word	0x08006348
 80058b0:	08006359 	.word	0x08006359

080058b4 <__mcmp>:
 80058b4:	690a      	ldr	r2, [r1, #16]
 80058b6:	4603      	mov	r3, r0
 80058b8:	6900      	ldr	r0, [r0, #16]
 80058ba:	1a80      	subs	r0, r0, r2
 80058bc:	b530      	push	{r4, r5, lr}
 80058be:	d10e      	bne.n	80058de <__mcmp+0x2a>
 80058c0:	3314      	adds	r3, #20
 80058c2:	3114      	adds	r1, #20
 80058c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80058c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80058cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80058d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80058d4:	4295      	cmp	r5, r2
 80058d6:	d003      	beq.n	80058e0 <__mcmp+0x2c>
 80058d8:	d205      	bcs.n	80058e6 <__mcmp+0x32>
 80058da:	f04f 30ff 	mov.w	r0, #4294967295
 80058de:	bd30      	pop	{r4, r5, pc}
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d3f3      	bcc.n	80058cc <__mcmp+0x18>
 80058e4:	e7fb      	b.n	80058de <__mcmp+0x2a>
 80058e6:	2001      	movs	r0, #1
 80058e8:	e7f9      	b.n	80058de <__mcmp+0x2a>
	...

080058ec <__mdiff>:
 80058ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	4689      	mov	r9, r1
 80058f2:	4606      	mov	r6, r0
 80058f4:	4611      	mov	r1, r2
 80058f6:	4648      	mov	r0, r9
 80058f8:	4614      	mov	r4, r2
 80058fa:	f7ff ffdb 	bl	80058b4 <__mcmp>
 80058fe:	1e05      	subs	r5, r0, #0
 8005900:	d112      	bne.n	8005928 <__mdiff+0x3c>
 8005902:	4629      	mov	r1, r5
 8005904:	4630      	mov	r0, r6
 8005906:	f7ff fd5b 	bl	80053c0 <_Balloc>
 800590a:	4602      	mov	r2, r0
 800590c:	b928      	cbnz	r0, 800591a <__mdiff+0x2e>
 800590e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a0c <__mdiff+0x120>)
 8005910:	f240 2137 	movw	r1, #567	@ 0x237
 8005914:	483e      	ldr	r0, [pc, #248]	@ (8005a10 <__mdiff+0x124>)
 8005916:	f000 f99f 	bl	8005c58 <__assert_func>
 800591a:	2301      	movs	r3, #1
 800591c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005920:	4610      	mov	r0, r2
 8005922:	b003      	add	sp, #12
 8005924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005928:	bfbc      	itt	lt
 800592a:	464b      	movlt	r3, r9
 800592c:	46a1      	movlt	r9, r4
 800592e:	4630      	mov	r0, r6
 8005930:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005934:	bfba      	itte	lt
 8005936:	461c      	movlt	r4, r3
 8005938:	2501      	movlt	r5, #1
 800593a:	2500      	movge	r5, #0
 800593c:	f7ff fd40 	bl	80053c0 <_Balloc>
 8005940:	4602      	mov	r2, r0
 8005942:	b918      	cbnz	r0, 800594c <__mdiff+0x60>
 8005944:	4b31      	ldr	r3, [pc, #196]	@ (8005a0c <__mdiff+0x120>)
 8005946:	f240 2145 	movw	r1, #581	@ 0x245
 800594a:	e7e3      	b.n	8005914 <__mdiff+0x28>
 800594c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005950:	6926      	ldr	r6, [r4, #16]
 8005952:	60c5      	str	r5, [r0, #12]
 8005954:	f109 0310 	add.w	r3, r9, #16
 8005958:	f109 0514 	add.w	r5, r9, #20
 800595c:	f104 0e14 	add.w	lr, r4, #20
 8005960:	f100 0b14 	add.w	fp, r0, #20
 8005964:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005968:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	46d9      	mov	r9, fp
 8005970:	f04f 0c00 	mov.w	ip, #0
 8005974:	9b01      	ldr	r3, [sp, #4]
 8005976:	f85e 0b04 	ldr.w	r0, [lr], #4
 800597a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800597e:	9301      	str	r3, [sp, #4]
 8005980:	fa1f f38a 	uxth.w	r3, sl
 8005984:	4619      	mov	r1, r3
 8005986:	b283      	uxth	r3, r0
 8005988:	1acb      	subs	r3, r1, r3
 800598a:	0c00      	lsrs	r0, r0, #16
 800598c:	4463      	add	r3, ip
 800598e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005992:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005996:	b29b      	uxth	r3, r3
 8005998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800599c:	4576      	cmp	r6, lr
 800599e:	f849 3b04 	str.w	r3, [r9], #4
 80059a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80059a6:	d8e5      	bhi.n	8005974 <__mdiff+0x88>
 80059a8:	1b33      	subs	r3, r6, r4
 80059aa:	3b15      	subs	r3, #21
 80059ac:	f023 0303 	bic.w	r3, r3, #3
 80059b0:	3415      	adds	r4, #21
 80059b2:	3304      	adds	r3, #4
 80059b4:	42a6      	cmp	r6, r4
 80059b6:	bf38      	it	cc
 80059b8:	2304      	movcc	r3, #4
 80059ba:	441d      	add	r5, r3
 80059bc:	445b      	add	r3, fp
 80059be:	461e      	mov	r6, r3
 80059c0:	462c      	mov	r4, r5
 80059c2:	4544      	cmp	r4, r8
 80059c4:	d30e      	bcc.n	80059e4 <__mdiff+0xf8>
 80059c6:	f108 0103 	add.w	r1, r8, #3
 80059ca:	1b49      	subs	r1, r1, r5
 80059cc:	f021 0103 	bic.w	r1, r1, #3
 80059d0:	3d03      	subs	r5, #3
 80059d2:	45a8      	cmp	r8, r5
 80059d4:	bf38      	it	cc
 80059d6:	2100      	movcc	r1, #0
 80059d8:	440b      	add	r3, r1
 80059da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80059de:	b191      	cbz	r1, 8005a06 <__mdiff+0x11a>
 80059e0:	6117      	str	r7, [r2, #16]
 80059e2:	e79d      	b.n	8005920 <__mdiff+0x34>
 80059e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80059e8:	46e6      	mov	lr, ip
 80059ea:	0c08      	lsrs	r0, r1, #16
 80059ec:	fa1c fc81 	uxtah	ip, ip, r1
 80059f0:	4471      	add	r1, lr
 80059f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80059f6:	b289      	uxth	r1, r1
 80059f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80059fc:	f846 1b04 	str.w	r1, [r6], #4
 8005a00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005a04:	e7dd      	b.n	80059c2 <__mdiff+0xd6>
 8005a06:	3f01      	subs	r7, #1
 8005a08:	e7e7      	b.n	80059da <__mdiff+0xee>
 8005a0a:	bf00      	nop
 8005a0c:	08006348 	.word	0x08006348
 8005a10:	08006359 	.word	0x08006359

08005a14 <__d2b>:
 8005a14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	460f      	mov	r7, r1
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	ec59 8b10 	vmov	r8, r9, d0
 8005a20:	4616      	mov	r6, r2
 8005a22:	f7ff fccd 	bl	80053c0 <_Balloc>
 8005a26:	4604      	mov	r4, r0
 8005a28:	b930      	cbnz	r0, 8005a38 <__d2b+0x24>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b23      	ldr	r3, [pc, #140]	@ (8005abc <__d2b+0xa8>)
 8005a2e:	4824      	ldr	r0, [pc, #144]	@ (8005ac0 <__d2b+0xac>)
 8005a30:	f240 310f 	movw	r1, #783	@ 0x30f
 8005a34:	f000 f910 	bl	8005c58 <__assert_func>
 8005a38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a40:	b10d      	cbz	r5, 8005a46 <__d2b+0x32>
 8005a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	f1b8 0300 	subs.w	r3, r8, #0
 8005a4c:	d023      	beq.n	8005a96 <__d2b+0x82>
 8005a4e:	4668      	mov	r0, sp
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	f7ff fd7c 	bl	800554e <__lo0bits>
 8005a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a5a:	b1d0      	cbz	r0, 8005a92 <__d2b+0x7e>
 8005a5c:	f1c0 0320 	rsb	r3, r0, #32
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	430b      	orrs	r3, r1
 8005a66:	40c2      	lsrs	r2, r0
 8005a68:	6163      	str	r3, [r4, #20]
 8005a6a:	9201      	str	r2, [sp, #4]
 8005a6c:	9b01      	ldr	r3, [sp, #4]
 8005a6e:	61a3      	str	r3, [r4, #24]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bf0c      	ite	eq
 8005a74:	2201      	moveq	r2, #1
 8005a76:	2202      	movne	r2, #2
 8005a78:	6122      	str	r2, [r4, #16]
 8005a7a:	b1a5      	cbz	r5, 8005aa6 <__d2b+0x92>
 8005a7c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005a80:	4405      	add	r5, r0
 8005a82:	603d      	str	r5, [r7, #0]
 8005a84:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005a88:	6030      	str	r0, [r6, #0]
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	b003      	add	sp, #12
 8005a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a92:	6161      	str	r1, [r4, #20]
 8005a94:	e7ea      	b.n	8005a6c <__d2b+0x58>
 8005a96:	a801      	add	r0, sp, #4
 8005a98:	f7ff fd59 	bl	800554e <__lo0bits>
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	6163      	str	r3, [r4, #20]
 8005aa0:	3020      	adds	r0, #32
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	e7e8      	b.n	8005a78 <__d2b+0x64>
 8005aa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005aaa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005aae:	6038      	str	r0, [r7, #0]
 8005ab0:	6918      	ldr	r0, [r3, #16]
 8005ab2:	f7ff fd2d 	bl	8005510 <__hi0bits>
 8005ab6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005aba:	e7e5      	b.n	8005a88 <__d2b+0x74>
 8005abc:	08006348 	.word	0x08006348
 8005ac0:	08006359 	.word	0x08006359

08005ac4 <__sflush_r>:
 8005ac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	0716      	lsls	r6, r2, #28
 8005ace:	4605      	mov	r5, r0
 8005ad0:	460c      	mov	r4, r1
 8005ad2:	d454      	bmi.n	8005b7e <__sflush_r+0xba>
 8005ad4:	684b      	ldr	r3, [r1, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	dc02      	bgt.n	8005ae0 <__sflush_r+0x1c>
 8005ada:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd48      	ble.n	8005b72 <__sflush_r+0xae>
 8005ae0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ae2:	2e00      	cmp	r6, #0
 8005ae4:	d045      	beq.n	8005b72 <__sflush_r+0xae>
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005aec:	682f      	ldr	r7, [r5, #0]
 8005aee:	6a21      	ldr	r1, [r4, #32]
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	d030      	beq.n	8005b56 <__sflush_r+0x92>
 8005af4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	0759      	lsls	r1, r3, #29
 8005afa:	d505      	bpl.n	8005b08 <__sflush_r+0x44>
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	1ad2      	subs	r2, r2, r3
 8005b00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b02:	b10b      	cbz	r3, 8005b08 <__sflush_r+0x44>
 8005b04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b06:	1ad2      	subs	r2, r2, r3
 8005b08:	2300      	movs	r3, #0
 8005b0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b0c:	6a21      	ldr	r1, [r4, #32]
 8005b0e:	4628      	mov	r0, r5
 8005b10:	47b0      	blx	r6
 8005b12:	1c43      	adds	r3, r0, #1
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	d106      	bne.n	8005b26 <__sflush_r+0x62>
 8005b18:	6829      	ldr	r1, [r5, #0]
 8005b1a:	291d      	cmp	r1, #29
 8005b1c:	d82b      	bhi.n	8005b76 <__sflush_r+0xb2>
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bc8 <__sflush_r+0x104>)
 8005b20:	410a      	asrs	r2, r1
 8005b22:	07d6      	lsls	r6, r2, #31
 8005b24:	d427      	bmi.n	8005b76 <__sflush_r+0xb2>
 8005b26:	2200      	movs	r2, #0
 8005b28:	6062      	str	r2, [r4, #4]
 8005b2a:	04d9      	lsls	r1, r3, #19
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	6022      	str	r2, [r4, #0]
 8005b30:	d504      	bpl.n	8005b3c <__sflush_r+0x78>
 8005b32:	1c42      	adds	r2, r0, #1
 8005b34:	d101      	bne.n	8005b3a <__sflush_r+0x76>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	b903      	cbnz	r3, 8005b3c <__sflush_r+0x78>
 8005b3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b3e:	602f      	str	r7, [r5, #0]
 8005b40:	b1b9      	cbz	r1, 8005b72 <__sflush_r+0xae>
 8005b42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b46:	4299      	cmp	r1, r3
 8005b48:	d002      	beq.n	8005b50 <__sflush_r+0x8c>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f7ff fb38 	bl	80051c0 <_free_r>
 8005b50:	2300      	movs	r3, #0
 8005b52:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b54:	e00d      	b.n	8005b72 <__sflush_r+0xae>
 8005b56:	2301      	movs	r3, #1
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b0      	blx	r6
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	1c50      	adds	r0, r2, #1
 8005b60:	d1c9      	bne.n	8005af6 <__sflush_r+0x32>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0c6      	beq.n	8005af6 <__sflush_r+0x32>
 8005b68:	2b1d      	cmp	r3, #29
 8005b6a:	d001      	beq.n	8005b70 <__sflush_r+0xac>
 8005b6c:	2b16      	cmp	r3, #22
 8005b6e:	d11e      	bne.n	8005bae <__sflush_r+0xea>
 8005b70:	602f      	str	r7, [r5, #0]
 8005b72:	2000      	movs	r0, #0
 8005b74:	e022      	b.n	8005bbc <__sflush_r+0xf8>
 8005b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7a:	b21b      	sxth	r3, r3
 8005b7c:	e01b      	b.n	8005bb6 <__sflush_r+0xf2>
 8005b7e:	690f      	ldr	r7, [r1, #16]
 8005b80:	2f00      	cmp	r7, #0
 8005b82:	d0f6      	beq.n	8005b72 <__sflush_r+0xae>
 8005b84:	0793      	lsls	r3, r2, #30
 8005b86:	680e      	ldr	r6, [r1, #0]
 8005b88:	bf08      	it	eq
 8005b8a:	694b      	ldreq	r3, [r1, #20]
 8005b8c:	600f      	str	r7, [r1, #0]
 8005b8e:	bf18      	it	ne
 8005b90:	2300      	movne	r3, #0
 8005b92:	eba6 0807 	sub.w	r8, r6, r7
 8005b96:	608b      	str	r3, [r1, #8]
 8005b98:	f1b8 0f00 	cmp.w	r8, #0
 8005b9c:	dde9      	ble.n	8005b72 <__sflush_r+0xae>
 8005b9e:	6a21      	ldr	r1, [r4, #32]
 8005ba0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ba2:	4643      	mov	r3, r8
 8005ba4:	463a      	mov	r2, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b0      	blx	r6
 8005baa:	2800      	cmp	r0, #0
 8005bac:	dc08      	bgt.n	8005bc0 <__sflush_r+0xfc>
 8005bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb6:	81a3      	strh	r3, [r4, #12]
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc0:	4407      	add	r7, r0
 8005bc2:	eba8 0800 	sub.w	r8, r8, r0
 8005bc6:	e7e7      	b.n	8005b98 <__sflush_r+0xd4>
 8005bc8:	dfbffffe 	.word	0xdfbffffe

08005bcc <_fflush_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	690b      	ldr	r3, [r1, #16]
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	b913      	cbnz	r3, 8005bdc <_fflush_r+0x10>
 8005bd6:	2500      	movs	r5, #0
 8005bd8:	4628      	mov	r0, r5
 8005bda:	bd38      	pop	{r3, r4, r5, pc}
 8005bdc:	b118      	cbz	r0, 8005be6 <_fflush_r+0x1a>
 8005bde:	6a03      	ldr	r3, [r0, #32]
 8005be0:	b90b      	cbnz	r3, 8005be6 <_fflush_r+0x1a>
 8005be2:	f7fe fba5 	bl	8004330 <__sinit>
 8005be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f3      	beq.n	8005bd6 <_fflush_r+0xa>
 8005bee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bf0:	07d0      	lsls	r0, r2, #31
 8005bf2:	d404      	bmi.n	8005bfe <_fflush_r+0x32>
 8005bf4:	0599      	lsls	r1, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_fflush_r+0x32>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bfa:	f7fe fc90 	bl	800451e <__retarget_lock_acquire_recursive>
 8005bfe:	4628      	mov	r0, r5
 8005c00:	4621      	mov	r1, r4
 8005c02:	f7ff ff5f 	bl	8005ac4 <__sflush_r>
 8005c06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c08:	07da      	lsls	r2, r3, #31
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	d4e4      	bmi.n	8005bd8 <_fflush_r+0xc>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	059b      	lsls	r3, r3, #22
 8005c12:	d4e1      	bmi.n	8005bd8 <_fflush_r+0xc>
 8005c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c16:	f7fe fc83 	bl	8004520 <__retarget_lock_release_recursive>
 8005c1a:	e7dd      	b.n	8005bd8 <_fflush_r+0xc>

08005c1c <_sbrk_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4d06      	ldr	r5, [pc, #24]	@ (8005c38 <_sbrk_r+0x1c>)
 8005c20:	2300      	movs	r3, #0
 8005c22:	4604      	mov	r4, r0
 8005c24:	4608      	mov	r0, r1
 8005c26:	602b      	str	r3, [r5, #0]
 8005c28:	f7fb fc8a 	bl	8001540 <_sbrk>
 8005c2c:	1c43      	adds	r3, r0, #1
 8005c2e:	d102      	bne.n	8005c36 <_sbrk_r+0x1a>
 8005c30:	682b      	ldr	r3, [r5, #0]
 8005c32:	b103      	cbz	r3, 8005c36 <_sbrk_r+0x1a>
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	bd38      	pop	{r3, r4, r5, pc}
 8005c38:	200003d8 	.word	0x200003d8

08005c3c <memcpy>:
 8005c3c:	440a      	add	r2, r1
 8005c3e:	4291      	cmp	r1, r2
 8005c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c44:	d100      	bne.n	8005c48 <memcpy+0xc>
 8005c46:	4770      	bx	lr
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c52:	4291      	cmp	r1, r2
 8005c54:	d1f9      	bne.n	8005c4a <memcpy+0xe>
 8005c56:	bd10      	pop	{r4, pc}

08005c58 <__assert_func>:
 8005c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c5a:	4614      	mov	r4, r2
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <__assert_func+0x2c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4605      	mov	r5, r0
 8005c64:	68d8      	ldr	r0, [r3, #12]
 8005c66:	b954      	cbnz	r4, 8005c7e <__assert_func+0x26>
 8005c68:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <__assert_func+0x30>)
 8005c6a:	461c      	mov	r4, r3
 8005c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c70:	9100      	str	r1, [sp, #0]
 8005c72:	462b      	mov	r3, r5
 8005c74:	4905      	ldr	r1, [pc, #20]	@ (8005c8c <__assert_func+0x34>)
 8005c76:	f000 f841 	bl	8005cfc <fiprintf>
 8005c7a:	f000 f851 	bl	8005d20 <abort>
 8005c7e:	4b04      	ldr	r3, [pc, #16]	@ (8005c90 <__assert_func+0x38>)
 8005c80:	e7f4      	b.n	8005c6c <__assert_func+0x14>
 8005c82:	bf00      	nop
 8005c84:	20000028 	.word	0x20000028
 8005c88:	080064f5 	.word	0x080064f5
 8005c8c:	080064c7 	.word	0x080064c7
 8005c90:	080064ba 	.word	0x080064ba

08005c94 <_calloc_r>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	fba1 5402 	umull	r5, r4, r1, r2
 8005c9a:	b93c      	cbnz	r4, 8005cac <_calloc_r+0x18>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f7ff fb03 	bl	80052a8 <_malloc_r>
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	b928      	cbnz	r0, 8005cb2 <_calloc_r+0x1e>
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	4630      	mov	r0, r6
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	220c      	movs	r2, #12
 8005cae:	6002      	str	r2, [r0, #0]
 8005cb0:	e7f9      	b.n	8005ca6 <_calloc_r+0x12>
 8005cb2:	462a      	mov	r2, r5
 8005cb4:	4621      	mov	r1, r4
 8005cb6:	f7fe fbb4 	bl	8004422 <memset>
 8005cba:	e7f5      	b.n	8005ca8 <_calloc_r+0x14>

08005cbc <__ascii_mbtowc>:
 8005cbc:	b082      	sub	sp, #8
 8005cbe:	b901      	cbnz	r1, 8005cc2 <__ascii_mbtowc+0x6>
 8005cc0:	a901      	add	r1, sp, #4
 8005cc2:	b142      	cbz	r2, 8005cd6 <__ascii_mbtowc+0x1a>
 8005cc4:	b14b      	cbz	r3, 8005cda <__ascii_mbtowc+0x1e>
 8005cc6:	7813      	ldrb	r3, [r2, #0]
 8005cc8:	600b      	str	r3, [r1, #0]
 8005cca:	7812      	ldrb	r2, [r2, #0]
 8005ccc:	1e10      	subs	r0, r2, #0
 8005cce:	bf18      	it	ne
 8005cd0:	2001      	movne	r0, #1
 8005cd2:	b002      	add	sp, #8
 8005cd4:	4770      	bx	lr
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	e7fb      	b.n	8005cd2 <__ascii_mbtowc+0x16>
 8005cda:	f06f 0001 	mvn.w	r0, #1
 8005cde:	e7f8      	b.n	8005cd2 <__ascii_mbtowc+0x16>

08005ce0 <__ascii_wctomb>:
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	4608      	mov	r0, r1
 8005ce4:	b141      	cbz	r1, 8005cf8 <__ascii_wctomb+0x18>
 8005ce6:	2aff      	cmp	r2, #255	@ 0xff
 8005ce8:	d904      	bls.n	8005cf4 <__ascii_wctomb+0x14>
 8005cea:	228a      	movs	r2, #138	@ 0x8a
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf2:	4770      	bx	lr
 8005cf4:	700a      	strb	r2, [r1, #0]
 8005cf6:	2001      	movs	r0, #1
 8005cf8:	4770      	bx	lr
	...

08005cfc <fiprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	b503      	push	{r0, r1, lr}
 8005d00:	4601      	mov	r1, r0
 8005d02:	ab03      	add	r3, sp, #12
 8005d04:	4805      	ldr	r0, [pc, #20]	@ (8005d1c <fiprintf+0x20>)
 8005d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d0a:	6800      	ldr	r0, [r0, #0]
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f000 f837 	bl	8005d80 <_vfiprintf_r>
 8005d12:	b002      	add	sp, #8
 8005d14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d18:	b003      	add	sp, #12
 8005d1a:	4770      	bx	lr
 8005d1c:	20000028 	.word	0x20000028

08005d20 <abort>:
 8005d20:	b508      	push	{r3, lr}
 8005d22:	2006      	movs	r0, #6
 8005d24:	f000 fa00 	bl	8006128 <raise>
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f7fb fb91 	bl	8001450 <_exit>

08005d2e <__sfputc_r>:
 8005d2e:	6893      	ldr	r3, [r2, #8]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	b410      	push	{r4}
 8005d36:	6093      	str	r3, [r2, #8]
 8005d38:	da08      	bge.n	8005d4c <__sfputc_r+0x1e>
 8005d3a:	6994      	ldr	r4, [r2, #24]
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	db01      	blt.n	8005d44 <__sfputc_r+0x16>
 8005d40:	290a      	cmp	r1, #10
 8005d42:	d103      	bne.n	8005d4c <__sfputc_r+0x1e>
 8005d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d48:	f000 b932 	b.w	8005fb0 <__swbuf_r>
 8005d4c:	6813      	ldr	r3, [r2, #0]
 8005d4e:	1c58      	adds	r0, r3, #1
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	7019      	strb	r1, [r3, #0]
 8005d54:	4608      	mov	r0, r1
 8005d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <__sfputs_r>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	4606      	mov	r6, r0
 8005d60:	460f      	mov	r7, r1
 8005d62:	4614      	mov	r4, r2
 8005d64:	18d5      	adds	r5, r2, r3
 8005d66:	42ac      	cmp	r4, r5
 8005d68:	d101      	bne.n	8005d6e <__sfputs_r+0x12>
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	e007      	b.n	8005d7e <__sfputs_r+0x22>
 8005d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d72:	463a      	mov	r2, r7
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff ffda 	bl	8005d2e <__sfputc_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	d1f3      	bne.n	8005d66 <__sfputs_r+0xa>
 8005d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d80 <_vfiprintf_r>:
 8005d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	460d      	mov	r5, r1
 8005d86:	b09d      	sub	sp, #116	@ 0x74
 8005d88:	4614      	mov	r4, r2
 8005d8a:	4698      	mov	r8, r3
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	b118      	cbz	r0, 8005d98 <_vfiprintf_r+0x18>
 8005d90:	6a03      	ldr	r3, [r0, #32]
 8005d92:	b90b      	cbnz	r3, 8005d98 <_vfiprintf_r+0x18>
 8005d94:	f7fe facc 	bl	8004330 <__sinit>
 8005d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d9a:	07d9      	lsls	r1, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_vfiprintf_r+0x2a>
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	059a      	lsls	r2, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_vfiprintf_r+0x2a>
 8005da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005da6:	f7fe fbba 	bl	800451e <__retarget_lock_acquire_recursive>
 8005daa:	89ab      	ldrh	r3, [r5, #12]
 8005dac:	071b      	lsls	r3, r3, #28
 8005dae:	d501      	bpl.n	8005db4 <_vfiprintf_r+0x34>
 8005db0:	692b      	ldr	r3, [r5, #16]
 8005db2:	b99b      	cbnz	r3, 8005ddc <_vfiprintf_r+0x5c>
 8005db4:	4629      	mov	r1, r5
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 f938 	bl	800602c <__swsetup_r>
 8005dbc:	b170      	cbz	r0, 8005ddc <_vfiprintf_r+0x5c>
 8005dbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dc0:	07dc      	lsls	r4, r3, #31
 8005dc2:	d504      	bpl.n	8005dce <_vfiprintf_r+0x4e>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	b01d      	add	sp, #116	@ 0x74
 8005dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dce:	89ab      	ldrh	r3, [r5, #12]
 8005dd0:	0598      	lsls	r0, r3, #22
 8005dd2:	d4f7      	bmi.n	8005dc4 <_vfiprintf_r+0x44>
 8005dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dd6:	f7fe fba3 	bl	8004520 <__retarget_lock_release_recursive>
 8005dda:	e7f3      	b.n	8005dc4 <_vfiprintf_r+0x44>
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8005de0:	2320      	movs	r3, #32
 8005de2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dea:	2330      	movs	r3, #48	@ 0x30
 8005dec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f9c <_vfiprintf_r+0x21c>
 8005df0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005df4:	f04f 0901 	mov.w	r9, #1
 8005df8:	4623      	mov	r3, r4
 8005dfa:	469a      	mov	sl, r3
 8005dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e00:	b10a      	cbz	r2, 8005e06 <_vfiprintf_r+0x86>
 8005e02:	2a25      	cmp	r2, #37	@ 0x25
 8005e04:	d1f9      	bne.n	8005dfa <_vfiprintf_r+0x7a>
 8005e06:	ebba 0b04 	subs.w	fp, sl, r4
 8005e0a:	d00b      	beq.n	8005e24 <_vfiprintf_r+0xa4>
 8005e0c:	465b      	mov	r3, fp
 8005e0e:	4622      	mov	r2, r4
 8005e10:	4629      	mov	r1, r5
 8005e12:	4630      	mov	r0, r6
 8005e14:	f7ff ffa2 	bl	8005d5c <__sfputs_r>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f000 80a7 	beq.w	8005f6c <_vfiprintf_r+0x1ec>
 8005e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e20:	445a      	add	r2, fp
 8005e22:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e24:	f89a 3000 	ldrb.w	r3, [sl]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 809f 	beq.w	8005f6c <_vfiprintf_r+0x1ec>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f04f 32ff 	mov.w	r2, #4294967295
 8005e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e38:	f10a 0a01 	add.w	sl, sl, #1
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	9307      	str	r3, [sp, #28]
 8005e40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e44:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e46:	4654      	mov	r4, sl
 8005e48:	2205      	movs	r2, #5
 8005e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4e:	4853      	ldr	r0, [pc, #332]	@ (8005f9c <_vfiprintf_r+0x21c>)
 8005e50:	f7fa f9de 	bl	8000210 <memchr>
 8005e54:	9a04      	ldr	r2, [sp, #16]
 8005e56:	b9d8      	cbnz	r0, 8005e90 <_vfiprintf_r+0x110>
 8005e58:	06d1      	lsls	r1, r2, #27
 8005e5a:	bf44      	itt	mi
 8005e5c:	2320      	movmi	r3, #32
 8005e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e62:	0713      	lsls	r3, r2, #28
 8005e64:	bf44      	itt	mi
 8005e66:	232b      	movmi	r3, #43	@ 0x2b
 8005e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e72:	d015      	beq.n	8005ea0 <_vfiprintf_r+0x120>
 8005e74:	9a07      	ldr	r2, [sp, #28]
 8005e76:	4654      	mov	r4, sl
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f04f 0c0a 	mov.w	ip, #10
 8005e7e:	4621      	mov	r1, r4
 8005e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e84:	3b30      	subs	r3, #48	@ 0x30
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	d94b      	bls.n	8005f22 <_vfiprintf_r+0x1a2>
 8005e8a:	b1b0      	cbz	r0, 8005eba <_vfiprintf_r+0x13a>
 8005e8c:	9207      	str	r2, [sp, #28]
 8005e8e:	e014      	b.n	8005eba <_vfiprintf_r+0x13a>
 8005e90:	eba0 0308 	sub.w	r3, r0, r8
 8005e94:	fa09 f303 	lsl.w	r3, r9, r3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	46a2      	mov	sl, r4
 8005e9e:	e7d2      	b.n	8005e46 <_vfiprintf_r+0xc6>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	1d19      	adds	r1, r3, #4
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	9103      	str	r1, [sp, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bfbb      	ittet	lt
 8005eac:	425b      	neglt	r3, r3
 8005eae:	f042 0202 	orrlt.w	r2, r2, #2
 8005eb2:	9307      	strge	r3, [sp, #28]
 8005eb4:	9307      	strlt	r3, [sp, #28]
 8005eb6:	bfb8      	it	lt
 8005eb8:	9204      	strlt	r2, [sp, #16]
 8005eba:	7823      	ldrb	r3, [r4, #0]
 8005ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ebe:	d10a      	bne.n	8005ed6 <_vfiprintf_r+0x156>
 8005ec0:	7863      	ldrb	r3, [r4, #1]
 8005ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec4:	d132      	bne.n	8005f2c <_vfiprintf_r+0x1ac>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	1d1a      	adds	r2, r3, #4
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	9203      	str	r2, [sp, #12]
 8005ece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ed2:	3402      	adds	r4, #2
 8005ed4:	9305      	str	r3, [sp, #20]
 8005ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005fac <_vfiprintf_r+0x22c>
 8005eda:	7821      	ldrb	r1, [r4, #0]
 8005edc:	2203      	movs	r2, #3
 8005ede:	4650      	mov	r0, sl
 8005ee0:	f7fa f996 	bl	8000210 <memchr>
 8005ee4:	b138      	cbz	r0, 8005ef6 <_vfiprintf_r+0x176>
 8005ee6:	9b04      	ldr	r3, [sp, #16]
 8005ee8:	eba0 000a 	sub.w	r0, r0, sl
 8005eec:	2240      	movs	r2, #64	@ 0x40
 8005eee:	4082      	lsls	r2, r0
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	3401      	adds	r4, #1
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005efa:	4829      	ldr	r0, [pc, #164]	@ (8005fa0 <_vfiprintf_r+0x220>)
 8005efc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f00:	2206      	movs	r2, #6
 8005f02:	f7fa f985 	bl	8000210 <memchr>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	d03f      	beq.n	8005f8a <_vfiprintf_r+0x20a>
 8005f0a:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <_vfiprintf_r+0x224>)
 8005f0c:	bb1b      	cbnz	r3, 8005f56 <_vfiprintf_r+0x1d6>
 8005f0e:	9b03      	ldr	r3, [sp, #12]
 8005f10:	3307      	adds	r3, #7
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	3308      	adds	r3, #8
 8005f18:	9303      	str	r3, [sp, #12]
 8005f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1c:	443b      	add	r3, r7
 8005f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f20:	e76a      	b.n	8005df8 <_vfiprintf_r+0x78>
 8005f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f26:	460c      	mov	r4, r1
 8005f28:	2001      	movs	r0, #1
 8005f2a:	e7a8      	b.n	8005e7e <_vfiprintf_r+0xfe>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	3401      	adds	r4, #1
 8005f30:	9305      	str	r3, [sp, #20]
 8005f32:	4619      	mov	r1, r3
 8005f34:	f04f 0c0a 	mov.w	ip, #10
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f3e:	3a30      	subs	r2, #48	@ 0x30
 8005f40:	2a09      	cmp	r2, #9
 8005f42:	d903      	bls.n	8005f4c <_vfiprintf_r+0x1cc>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d0c6      	beq.n	8005ed6 <_vfiprintf_r+0x156>
 8005f48:	9105      	str	r1, [sp, #20]
 8005f4a:	e7c4      	b.n	8005ed6 <_vfiprintf_r+0x156>
 8005f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f50:	4604      	mov	r4, r0
 8005f52:	2301      	movs	r3, #1
 8005f54:	e7f0      	b.n	8005f38 <_vfiprintf_r+0x1b8>
 8005f56:	ab03      	add	r3, sp, #12
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	462a      	mov	r2, r5
 8005f5c:	4b12      	ldr	r3, [pc, #72]	@ (8005fa8 <_vfiprintf_r+0x228>)
 8005f5e:	a904      	add	r1, sp, #16
 8005f60:	4630      	mov	r0, r6
 8005f62:	f7fd fda1 	bl	8003aa8 <_printf_float>
 8005f66:	4607      	mov	r7, r0
 8005f68:	1c78      	adds	r0, r7, #1
 8005f6a:	d1d6      	bne.n	8005f1a <_vfiprintf_r+0x19a>
 8005f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005f6e:	07d9      	lsls	r1, r3, #31
 8005f70:	d405      	bmi.n	8005f7e <_vfiprintf_r+0x1fe>
 8005f72:	89ab      	ldrh	r3, [r5, #12]
 8005f74:	059a      	lsls	r2, r3, #22
 8005f76:	d402      	bmi.n	8005f7e <_vfiprintf_r+0x1fe>
 8005f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f7a:	f7fe fad1 	bl	8004520 <__retarget_lock_release_recursive>
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	065b      	lsls	r3, r3, #25
 8005f82:	f53f af1f 	bmi.w	8005dc4 <_vfiprintf_r+0x44>
 8005f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f88:	e71e      	b.n	8005dc8 <_vfiprintf_r+0x48>
 8005f8a:	ab03      	add	r3, sp, #12
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4b05      	ldr	r3, [pc, #20]	@ (8005fa8 <_vfiprintf_r+0x228>)
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	4630      	mov	r0, r6
 8005f96:	f7fe f81f 	bl	8003fd8 <_printf_i>
 8005f9a:	e7e4      	b.n	8005f66 <_vfiprintf_r+0x1e6>
 8005f9c:	080065f7 	.word	0x080065f7
 8005fa0:	08006601 	.word	0x08006601
 8005fa4:	08003aa9 	.word	0x08003aa9
 8005fa8:	08005d5d 	.word	0x08005d5d
 8005fac:	080065fd 	.word	0x080065fd

08005fb0 <__swbuf_r>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	460e      	mov	r6, r1
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	b118      	cbz	r0, 8005fc2 <__swbuf_r+0x12>
 8005fba:	6a03      	ldr	r3, [r0, #32]
 8005fbc:	b90b      	cbnz	r3, 8005fc2 <__swbuf_r+0x12>
 8005fbe:	f7fe f9b7 	bl	8004330 <__sinit>
 8005fc2:	69a3      	ldr	r3, [r4, #24]
 8005fc4:	60a3      	str	r3, [r4, #8]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	071a      	lsls	r2, r3, #28
 8005fca:	d501      	bpl.n	8005fd0 <__swbuf_r+0x20>
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	b943      	cbnz	r3, 8005fe2 <__swbuf_r+0x32>
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f82a 	bl	800602c <__swsetup_r>
 8005fd8:	b118      	cbz	r0, 8005fe2 <__swbuf_r+0x32>
 8005fda:	f04f 37ff 	mov.w	r7, #4294967295
 8005fde:	4638      	mov	r0, r7
 8005fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	6922      	ldr	r2, [r4, #16]
 8005fe6:	1a98      	subs	r0, r3, r2
 8005fe8:	6963      	ldr	r3, [r4, #20]
 8005fea:	b2f6      	uxtb	r6, r6
 8005fec:	4283      	cmp	r3, r0
 8005fee:	4637      	mov	r7, r6
 8005ff0:	dc05      	bgt.n	8005ffe <__swbuf_r+0x4e>
 8005ff2:	4621      	mov	r1, r4
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	f7ff fde9 	bl	8005bcc <_fflush_r>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	d1ed      	bne.n	8005fda <__swbuf_r+0x2a>
 8005ffe:	68a3      	ldr	r3, [r4, #8]
 8006000:	3b01      	subs	r3, #1
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	6022      	str	r2, [r4, #0]
 800600a:	701e      	strb	r6, [r3, #0]
 800600c:	6962      	ldr	r2, [r4, #20]
 800600e:	1c43      	adds	r3, r0, #1
 8006010:	429a      	cmp	r2, r3
 8006012:	d004      	beq.n	800601e <__swbuf_r+0x6e>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	07db      	lsls	r3, r3, #31
 8006018:	d5e1      	bpl.n	8005fde <__swbuf_r+0x2e>
 800601a:	2e0a      	cmp	r6, #10
 800601c:	d1df      	bne.n	8005fde <__swbuf_r+0x2e>
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	f7ff fdd3 	bl	8005bcc <_fflush_r>
 8006026:	2800      	cmp	r0, #0
 8006028:	d0d9      	beq.n	8005fde <__swbuf_r+0x2e>
 800602a:	e7d6      	b.n	8005fda <__swbuf_r+0x2a>

0800602c <__swsetup_r>:
 800602c:	b538      	push	{r3, r4, r5, lr}
 800602e:	4b29      	ldr	r3, [pc, #164]	@ (80060d4 <__swsetup_r+0xa8>)
 8006030:	4605      	mov	r5, r0
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	460c      	mov	r4, r1
 8006036:	b118      	cbz	r0, 8006040 <__swsetup_r+0x14>
 8006038:	6a03      	ldr	r3, [r0, #32]
 800603a:	b90b      	cbnz	r3, 8006040 <__swsetup_r+0x14>
 800603c:	f7fe f978 	bl	8004330 <__sinit>
 8006040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006044:	0719      	lsls	r1, r3, #28
 8006046:	d422      	bmi.n	800608e <__swsetup_r+0x62>
 8006048:	06da      	lsls	r2, r3, #27
 800604a:	d407      	bmi.n	800605c <__swsetup_r+0x30>
 800604c:	2209      	movs	r2, #9
 800604e:	602a      	str	r2, [r5, #0]
 8006050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	f04f 30ff 	mov.w	r0, #4294967295
 800605a:	e033      	b.n	80060c4 <__swsetup_r+0x98>
 800605c:	0758      	lsls	r0, r3, #29
 800605e:	d512      	bpl.n	8006086 <__swsetup_r+0x5a>
 8006060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006062:	b141      	cbz	r1, 8006076 <__swsetup_r+0x4a>
 8006064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006068:	4299      	cmp	r1, r3
 800606a:	d002      	beq.n	8006072 <__swsetup_r+0x46>
 800606c:	4628      	mov	r0, r5
 800606e:	f7ff f8a7 	bl	80051c0 <_free_r>
 8006072:	2300      	movs	r3, #0
 8006074:	6363      	str	r3, [r4, #52]	@ 0x34
 8006076:	89a3      	ldrh	r3, [r4, #12]
 8006078:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800607c:	81a3      	strh	r3, [r4, #12]
 800607e:	2300      	movs	r3, #0
 8006080:	6063      	str	r3, [r4, #4]
 8006082:	6923      	ldr	r3, [r4, #16]
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	89a3      	ldrh	r3, [r4, #12]
 8006088:	f043 0308 	orr.w	r3, r3, #8
 800608c:	81a3      	strh	r3, [r4, #12]
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	b94b      	cbnz	r3, 80060a6 <__swsetup_r+0x7a>
 8006092:	89a3      	ldrh	r3, [r4, #12]
 8006094:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800609c:	d003      	beq.n	80060a6 <__swsetup_r+0x7a>
 800609e:	4621      	mov	r1, r4
 80060a0:	4628      	mov	r0, r5
 80060a2:	f000 f883 	bl	80061ac <__smakebuf_r>
 80060a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060aa:	f013 0201 	ands.w	r2, r3, #1
 80060ae:	d00a      	beq.n	80060c6 <__swsetup_r+0x9a>
 80060b0:	2200      	movs	r2, #0
 80060b2:	60a2      	str	r2, [r4, #8]
 80060b4:	6962      	ldr	r2, [r4, #20]
 80060b6:	4252      	negs	r2, r2
 80060b8:	61a2      	str	r2, [r4, #24]
 80060ba:	6922      	ldr	r2, [r4, #16]
 80060bc:	b942      	cbnz	r2, 80060d0 <__swsetup_r+0xa4>
 80060be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80060c2:	d1c5      	bne.n	8006050 <__swsetup_r+0x24>
 80060c4:	bd38      	pop	{r3, r4, r5, pc}
 80060c6:	0799      	lsls	r1, r3, #30
 80060c8:	bf58      	it	pl
 80060ca:	6962      	ldrpl	r2, [r4, #20]
 80060cc:	60a2      	str	r2, [r4, #8]
 80060ce:	e7f4      	b.n	80060ba <__swsetup_r+0x8e>
 80060d0:	2000      	movs	r0, #0
 80060d2:	e7f7      	b.n	80060c4 <__swsetup_r+0x98>
 80060d4:	20000028 	.word	0x20000028

080060d8 <_raise_r>:
 80060d8:	291f      	cmp	r1, #31
 80060da:	b538      	push	{r3, r4, r5, lr}
 80060dc:	4605      	mov	r5, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	d904      	bls.n	80060ec <_raise_r+0x14>
 80060e2:	2316      	movs	r3, #22
 80060e4:	6003      	str	r3, [r0, #0]
 80060e6:	f04f 30ff 	mov.w	r0, #4294967295
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80060ee:	b112      	cbz	r2, 80060f6 <_raise_r+0x1e>
 80060f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060f4:	b94b      	cbnz	r3, 800610a <_raise_r+0x32>
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f830 	bl	800615c <_getpid_r>
 80060fc:	4622      	mov	r2, r4
 80060fe:	4601      	mov	r1, r0
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006106:	f000 b817 	b.w	8006138 <_kill_r>
 800610a:	2b01      	cmp	r3, #1
 800610c:	d00a      	beq.n	8006124 <_raise_r+0x4c>
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	d103      	bne.n	800611a <_raise_r+0x42>
 8006112:	2316      	movs	r3, #22
 8006114:	6003      	str	r3, [r0, #0]
 8006116:	2001      	movs	r0, #1
 8006118:	e7e7      	b.n	80060ea <_raise_r+0x12>
 800611a:	2100      	movs	r1, #0
 800611c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006120:	4620      	mov	r0, r4
 8006122:	4798      	blx	r3
 8006124:	2000      	movs	r0, #0
 8006126:	e7e0      	b.n	80060ea <_raise_r+0x12>

08006128 <raise>:
 8006128:	4b02      	ldr	r3, [pc, #8]	@ (8006134 <raise+0xc>)
 800612a:	4601      	mov	r1, r0
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	f7ff bfd3 	b.w	80060d8 <_raise_r>
 8006132:	bf00      	nop
 8006134:	20000028 	.word	0x20000028

08006138 <_kill_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	@ (8006158 <_kill_r+0x20>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	f7fb f973 	bl	8001430 <_kill>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d102      	bne.n	8006154 <_kill_r+0x1c>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	b103      	cbz	r3, 8006154 <_kill_r+0x1c>
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	bd38      	pop	{r3, r4, r5, pc}
 8006156:	bf00      	nop
 8006158:	200003d8 	.word	0x200003d8

0800615c <_getpid_r>:
 800615c:	f7fb b960 	b.w	8001420 <_getpid>

08006160 <__swhatbuf_r>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	2900      	cmp	r1, #0
 800616a:	b096      	sub	sp, #88	@ 0x58
 800616c:	4615      	mov	r5, r2
 800616e:	461e      	mov	r6, r3
 8006170:	da0d      	bge.n	800618e <__swhatbuf_r+0x2e>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006178:	f04f 0100 	mov.w	r1, #0
 800617c:	bf14      	ite	ne
 800617e:	2340      	movne	r3, #64	@ 0x40
 8006180:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006184:	2000      	movs	r0, #0
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	b016      	add	sp, #88	@ 0x58
 800618c:	bd70      	pop	{r4, r5, r6, pc}
 800618e:	466a      	mov	r2, sp
 8006190:	f000 f848 	bl	8006224 <_fstat_r>
 8006194:	2800      	cmp	r0, #0
 8006196:	dbec      	blt.n	8006172 <__swhatbuf_r+0x12>
 8006198:	9901      	ldr	r1, [sp, #4]
 800619a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800619e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80061a2:	4259      	negs	r1, r3
 80061a4:	4159      	adcs	r1, r3
 80061a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80061aa:	e7eb      	b.n	8006184 <__swhatbuf_r+0x24>

080061ac <__smakebuf_r>:
 80061ac:	898b      	ldrh	r3, [r1, #12]
 80061ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061b0:	079d      	lsls	r5, r3, #30
 80061b2:	4606      	mov	r6, r0
 80061b4:	460c      	mov	r4, r1
 80061b6:	d507      	bpl.n	80061c8 <__smakebuf_r+0x1c>
 80061b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	6123      	str	r3, [r4, #16]
 80061c0:	2301      	movs	r3, #1
 80061c2:	6163      	str	r3, [r4, #20]
 80061c4:	b003      	add	sp, #12
 80061c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061c8:	ab01      	add	r3, sp, #4
 80061ca:	466a      	mov	r2, sp
 80061cc:	f7ff ffc8 	bl	8006160 <__swhatbuf_r>
 80061d0:	9f00      	ldr	r7, [sp, #0]
 80061d2:	4605      	mov	r5, r0
 80061d4:	4639      	mov	r1, r7
 80061d6:	4630      	mov	r0, r6
 80061d8:	f7ff f866 	bl	80052a8 <_malloc_r>
 80061dc:	b948      	cbnz	r0, 80061f2 <__smakebuf_r+0x46>
 80061de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e2:	059a      	lsls	r2, r3, #22
 80061e4:	d4ee      	bmi.n	80061c4 <__smakebuf_r+0x18>
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	f043 0302 	orr.w	r3, r3, #2
 80061ee:	81a3      	strh	r3, [r4, #12]
 80061f0:	e7e2      	b.n	80061b8 <__smakebuf_r+0xc>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	6020      	str	r0, [r4, #0]
 80061f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061fa:	81a3      	strh	r3, [r4, #12]
 80061fc:	9b01      	ldr	r3, [sp, #4]
 80061fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006202:	b15b      	cbz	r3, 800621c <__smakebuf_r+0x70>
 8006204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006208:	4630      	mov	r0, r6
 800620a:	f000 f81d 	bl	8006248 <_isatty_r>
 800620e:	b128      	cbz	r0, 800621c <__smakebuf_r+0x70>
 8006210:	89a3      	ldrh	r3, [r4, #12]
 8006212:	f023 0303 	bic.w	r3, r3, #3
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	81a3      	strh	r3, [r4, #12]
 800621c:	89a3      	ldrh	r3, [r4, #12]
 800621e:	431d      	orrs	r5, r3
 8006220:	81a5      	strh	r5, [r4, #12]
 8006222:	e7cf      	b.n	80061c4 <__smakebuf_r+0x18>

08006224 <_fstat_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	@ (8006244 <_fstat_r+0x20>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f7fb f95d 	bl	80014f0 <_fstat>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_fstat_r+0x1c>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	b103      	cbz	r3, 8006240 <_fstat_r+0x1c>
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	200003d8 	.word	0x200003d8

08006248 <_isatty_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4d06      	ldr	r5, [pc, #24]	@ (8006264 <_isatty_r+0x1c>)
 800624c:	2300      	movs	r3, #0
 800624e:	4604      	mov	r4, r0
 8006250:	4608      	mov	r0, r1
 8006252:	602b      	str	r3, [r5, #0]
 8006254:	f7fb f95c 	bl	8001510 <_isatty>
 8006258:	1c43      	adds	r3, r0, #1
 800625a:	d102      	bne.n	8006262 <_isatty_r+0x1a>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	b103      	cbz	r3, 8006262 <_isatty_r+0x1a>
 8006260:	6023      	str	r3, [r4, #0]
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	200003d8 	.word	0x200003d8

08006268 <_init>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr

08006274 <_fini>:
 8006274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006276:	bf00      	nop
 8006278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627a:	bc08      	pop	{r3}
 800627c:	469e      	mov	lr, r3
 800627e:	4770      	bx	lr
